  .text
  main: jal main_207
  li $v0,10
  syscall
.text
  .data
 errorStr: .asciiz "runtime error: "
.text

error: 
.text
  move $a1,$a0
  la $a0, errorStr
  li $v0,4
  syscall
  move $a0,$a1
  li $v0,4
  syscall
  li $v0,10
  syscall
  .data
 .align 4
 char: .space 8
.text
  #START PROLOG
getchar_0: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  li $v0, 8  # System call code for read_string
  la $a0, char # a0 is the address of the space
  li $a1, 2  # a1 is the max length that needs to be read
  syscall  # Call read_string
  lw $a0, char
  bnez $a0, GETCHAR_RET_NORMAL
  li $v0, -1
  j EPILOG_214
  GETCHAR_RET_NORMAL:
  move $v0, $a0
EPILOG_214: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
  #START PROLOG
halt_1: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  li $v0,10
  syscall
EPILOG_215: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
  .data
 trueStr: .asciiz "true"
  falseStr: .asciiz "false"
.text

  #START PROLOG
printb_2: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  bnez $a0, printTrue
  la $a0, falseStr
  li $v0,4
  syscall
  j EPILOG_216
  printTrue:
  la $a0, trueStr
  li $v0,4
  syscall
EPILOG_216: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
  #START PROLOG
printc_3: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  li $v0, 11
  syscall
EPILOG_217: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
  #START PROLOG
printi_4: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  li $v0, 1
  syscall
EPILOG_218: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
  #START PROLOG
prints_5: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  li $v0,4
  syscall
EPILOG_219: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
.data
   A_0_0_6: .word 0
.data
   A_0_1_7: .word 0
.data
   A_0_2_8: .word 0
.data
   A_0_3_9: .word 0
.data
   A_0_4_10: .word 0
.data
   A_0_5_11: .word 0
.data
   A_0_6_12: .word 0
.data
   A_0_7_13: .word 0
.data
   A_0_8_14: .word 0
.data
   A_0_9_15: .word 0
.data
   A_1_0_16: .word 0
.data
   A_1_1_17: .word 0
.data
   A_1_2_18: .word 0
.data
   A_1_3_19: .word 0
.data
   A_1_4_20: .word 0
.data
   A_1_5_21: .word 0
.data
   A_1_6_22: .word 0
.data
   A_1_7_23: .word 0
.data
   A_1_8_24: .word 0
.data
   A_1_9_25: .word 0
.data
   A_2_0_26: .word 0
.data
   A_2_1_27: .word 0
.data
   A_2_2_28: .word 0
.data
   A_2_3_29: .word 0
.data
   A_2_4_30: .word 0
.data
   A_2_5_31: .word 0
.data
   A_2_6_32: .word 0
.data
   A_2_7_33: .word 0
.data
   A_2_8_34: .word 0
.data
   A_2_9_35: .word 0
.data
   A_3_0_36: .word 0
.data
   A_3_1_37: .word 0
.data
   A_3_2_38: .word 0
.data
   A_3_3_39: .word 0
.data
   A_3_4_40: .word 0
.data
   A_3_5_41: .word 0
.data
   A_3_6_42: .word 0
.data
   A_3_7_43: .word 0
.data
   A_3_8_44: .word 0
.data
   A_3_9_45: .word 0
.data
   A_4_0_46: .word 0
.data
   A_4_1_47: .word 0
.data
   A_4_2_48: .word 0
.data
   A_4_3_49: .word 0
.data
   A_4_4_50: .word 0
.data
   A_4_5_51: .word 0
.data
   A_4_6_52: .word 0
.data
   A_4_7_53: .word 0
.data
   A_4_8_54: .word 0
.data
   A_4_9_55: .word 0
.data
   A_5_0_56: .word 0
.data
   A_5_1_57: .word 0
.data
   A_5_2_58: .word 0
.data
   A_5_3_59: .word 0
.data
   A_5_4_60: .word 0
.data
   A_5_5_61: .word 0
.data
   A_5_6_62: .word 0
.data
   A_5_7_63: .word 0
.data
   A_5_8_64: .word 0
.data
   A_5_9_65: .word 0
.data
   A_6_0_66: .word 0
.data
   A_6_1_67: .word 0
.data
   A_6_2_68: .word 0
.data
   A_6_3_69: .word 0
.data
   A_6_4_70: .word 0
.data
   A_6_5_71: .word 0
.data
   A_6_6_72: .word 0
.data
   A_6_7_73: .word 0
.data
   A_6_8_74: .word 0
.data
   A_6_9_75: .word 0
.data
   A_7_0_76: .word 0
.data
   A_7_1_77: .word 0
.data
   A_7_2_78: .word 0
.data
   A_7_3_79: .word 0
.data
   A_7_4_80: .word 0
.data
   A_7_5_81: .word 0
.data
   A_7_6_82: .word 0
.data
   A_7_7_83: .word 0
.data
   A_7_8_84: .word 0
.data
   A_7_9_85: .word 0
.data
   A_8_0_86: .word 0
.data
   A_8_1_87: .word 0
.data
   A_8_2_88: .word 0
.data
   A_8_3_89: .word 0
.data
   A_8_4_90: .word 0
.data
   A_8_5_91: .word 0
.data
   A_8_6_92: .word 0
.data
   A_8_7_93: .word 0
.data
   A_8_8_94: .word 0
.data
   A_8_9_95: .word 0
.data
   A_9_0_96: .word 0
.data
   A_9_1_97: .word 0
.data
   A_9_2_98: .word 0
.data
   A_9_3_99: .word 0
.data
   A_9_4_100: .word 0
.data
   A_9_5_101: .word 0
.data
   A_9_6_102: .word 0
.data
   A_9_7_103: .word 0
.data
   A_9_8_104: .word 0
.data
   A_9_9_105: .word 0
.data
   not_there_106: .word 0
.data
   T_0_0_107: .word 0
.data
   T_0_1_108: .word 0
.data
   T_0_2_109: .word 0
.data
   T_0_3_110: .word 0
.data
   T_0_4_111: .word 0
.data
   T_0_5_112: .word 0
.data
   T_0_6_113: .word 0
.data
   T_0_7_114: .word 0
.data
   T_0_8_115: .word 0
.data
   T_0_9_116: .word 0
.data
   T_1_0_117: .word 0
.data
   T_1_1_118: .word 0
.data
   T_1_2_119: .word 0
.data
   T_1_3_120: .word 0
.data
   T_1_4_121: .word 0
.data
   T_1_5_122: .word 0
.data
   T_1_6_123: .word 0
.data
   T_1_7_124: .word 0
.data
   T_1_8_125: .word 0
.data
   T_1_9_126: .word 0
.data
   T_2_0_127: .word 0
.data
   T_2_1_128: .word 0
.data
   T_2_2_129: .word 0
.data
   T_2_3_130: .word 0
.data
   T_2_4_131: .word 0
.data
   T_2_5_132: .word 0
.data
   T_2_6_133: .word 0
.data
   T_2_7_134: .word 0
.data
   T_2_8_135: .word 0
.data
   T_2_9_136: .word 0
.data
   T_3_0_137: .word 0
.data
   T_3_1_138: .word 0
.data
   T_3_2_139: .word 0
.data
   T_3_3_140: .word 0
.data
   T_3_4_141: .word 0
.data
   T_3_5_142: .word 0
.data
   T_3_6_143: .word 0
.data
   T_3_7_144: .word 0
.data
   T_3_8_145: .word 0
.data
   T_3_9_146: .word 0
.data
   T_4_0_147: .word 0
.data
   T_4_1_148: .word 0
.data
   T_4_2_149: .word 0
.data
   T_4_3_150: .word 0
.data
   T_4_4_151: .word 0
.data
   T_4_5_152: .word 0
.data
   T_4_6_153: .word 0
.data
   T_4_7_154: .word 0
.data
   T_4_8_155: .word 0
.data
   T_4_9_156: .word 0
.data
   T_5_0_157: .word 0
.data
   T_5_1_158: .word 0
.data
   T_5_2_159: .word 0
.data
   T_5_3_160: .word 0
.data
   T_5_4_161: .word 0
.data
   T_5_5_162: .word 0
.data
   T_5_6_163: .word 0
.data
   T_5_7_164: .word 0
.data
   T_5_8_165: .word 0
.data
   T_5_9_166: .word 0
.data
   T_6_0_167: .word 0
.data
   T_6_1_168: .word 0
.data
   T_6_2_169: .word 0
.data
   T_6_3_170: .word 0
.data
   T_6_4_171: .word 0
.data
   T_6_5_172: .word 0
.data
   T_6_6_173: .word 0
.data
   T_6_7_174: .word 0
.data
   T_6_8_175: .word 0
.data
   T_6_9_176: .word 0
.data
   T_7_0_177: .word 0
.data
   T_7_1_178: .word 0
.data
   T_7_2_179: .word 0
.data
   T_7_3_180: .word 0
.data
   T_7_4_181: .word 0
.data
   T_7_5_182: .word 0
.data
   T_7_6_183: .word 0
.data
   T_7_7_184: .word 0
.data
   T_7_8_185: .word 0
.data
   T_7_9_186: .word 0
.data
   T_8_0_187: .word 0
.data
   T_8_1_188: .word 0
.data
   T_8_2_189: .word 0
.data
   T_8_3_190: .word 0
.data
   T_8_4_191: .word 0
.data
   T_8_5_192: .word 0
.data
   T_8_6_193: .word 0
.data
   T_8_7_194: .word 0
.data
   T_8_8_195: .word 0
.data
   T_8_9_196: .word 0
.data
   T_9_0_197: .word 0
.data
   T_9_1_198: .word 0
.data
   T_9_2_199: .word 0
.data
   T_9_3_200: .word 0
.data
   T_9_4_201: .word 0
.data
   T_9_5_202: .word 0
.data
   T_9_6_203: .word 0
.data
   T_9_7_204: .word 0
.data
   T_9_8_205: .word 0
.data
   T_9_9_206: .word 0
.text
  #START PROLOG
main_207: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  #variable i is declared to be
  #reg name $s0
  #variable j is declared to be
  #reg name $s1
  #variable x is declared to be
  #reg name $s2
  #variable n is declared to be
  #reg name $s3
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s4
  li $v0, 123
  move $s4, $v0
#regData in funcInv #0 = $s4
  #final label of #0 in funcInvEvalArgs
  L_223: 
  move $v0, $s4
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal INTERNALseed_212
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s4
  move $s4, $v0
  #final label in funcInvStatement
  L_222: 
  #final label in statem expression
  L_221: 
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_226: 
  move $v0, $s5
  move $s0, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_225: 
  #final label in statem expression
  L_224: 
  #starting while
  #start of while loop
  L_228:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_232: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_233: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_231
  j L_231
  #final label in binaryExp
  L_231: 
  #jumpToAllOnlyIf
  L_229:
  move $v0, $s4
  bnez $v0, L_234
  j L_227
  #whileBodyLabel
  L_234:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_239: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_240: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_238
  j L_238
  #final label in binaryExp
  L_238: 
  #jumpToAllOnlyIf
  L_236:
  move $v0, $s4
  beqz $v0, L_237
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_243: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_242: 
  #final label in statem expression
  L_241: 
  #starting while
  #start of while loop
  L_245:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_249: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_250: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_248
  j L_248
  #final label in binaryExp
  L_248: 
  #jumpToAllOnlyIf
  L_246:
  move $v0, $s4
  bnez $v0, L_251
  j L_244
  #whileBodyLabel
  L_251:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_256: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_257: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_255
  j L_255
  #final label in binaryExp
  L_255: 
  #jumpToAllOnlyIf
  L_253:
  move $v0, $s4
  beqz $v0, L_254
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_264: 
  L_262: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_263: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_266
  .data
ARITH_ERROR_265: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_265
  j error
  L_266:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_261
  j L_261
  #final label in binaryExp
  L_261: 
  #final label in codeGenAssignmentExpression
  L_260: 
  move $v0, $s5
  sw $v0, A_0_0_6
  move $s4, $v0
  #final label in assignmentStatement
  L_259: 
  #final label in statem expression
  L_258: 
  j L_252
  #inside else
  L_254:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_271: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_272: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_270
  j L_270
  #final label in binaryExp
  L_270: 
  #jumpToAllOnlyIf
  L_268:
  move $v0, $s4
  beqz $v0, L_269
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_279: 
  L_277: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_278: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_281
  .data
ARITH_ERROR_280: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_280
  j error
  L_281:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_276
  j L_276
  #final label in binaryExp
  L_276: 
  #final label in codeGenAssignmentExpression
  L_275: 
  move $v0, $s5
  sw $v0, A_0_1_7
  move $s4, $v0
  #final label in assignmentStatement
  L_274: 
  #final label in statem expression
  L_273: 
  j L_267
  #inside else
  L_269:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_286: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_287: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_285
  j L_285
  #final label in binaryExp
  L_285: 
  #jumpToAllOnlyIf
  L_283:
  move $v0, $s4
  beqz $v0, L_284
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_294: 
  L_292: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_293: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_296
  .data
ARITH_ERROR_295: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_295
  j error
  L_296:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_291
  j L_291
  #final label in binaryExp
  L_291: 
  #final label in codeGenAssignmentExpression
  L_290: 
  move $v0, $s5
  sw $v0, A_0_2_8
  move $s4, $v0
  #final label in assignmentStatement
  L_289: 
  #final label in statem expression
  L_288: 
  j L_282
  #inside else
  L_284:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_301: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_302: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_300
  j L_300
  #final label in binaryExp
  L_300: 
  #jumpToAllOnlyIf
  L_298:
  move $v0, $s4
  beqz $v0, L_299
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_309: 
  L_307: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_308: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_311
  .data
ARITH_ERROR_310: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_310
  j error
  L_311:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_306
  j L_306
  #final label in binaryExp
  L_306: 
  #final label in codeGenAssignmentExpression
  L_305: 
  move $v0, $s5
  sw $v0, A_0_3_9
  move $s4, $v0
  #final label in assignmentStatement
  L_304: 
  #final label in statem expression
  L_303: 
  j L_297
  #inside else
  L_299:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_316: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_317: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_315
  j L_315
  #final label in binaryExp
  L_315: 
  #jumpToAllOnlyIf
  L_313:
  move $v0, $s4
  beqz $v0, L_314
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_324: 
  L_322: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_323: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_326
  .data
ARITH_ERROR_325: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_325
  j error
  L_326:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_321
  j L_321
  #final label in binaryExp
  L_321: 
  #final label in codeGenAssignmentExpression
  L_320: 
  move $v0, $s5
  sw $v0, A_0_4_10
  move $s4, $v0
  #final label in assignmentStatement
  L_319: 
  #final label in statem expression
  L_318: 
  j L_312
  #inside else
  L_314:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_331: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_332: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_330
  j L_330
  #final label in binaryExp
  L_330: 
  #jumpToAllOnlyIf
  L_328:
  move $v0, $s4
  beqz $v0, L_329
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_339: 
  L_337: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_338: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_341
  .data
ARITH_ERROR_340: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_340
  j error
  L_341:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_336
  j L_336
  #final label in binaryExp
  L_336: 
  #final label in codeGenAssignmentExpression
  L_335: 
  move $v0, $s5
  sw $v0, A_0_5_11
  move $s4, $v0
  #final label in assignmentStatement
  L_334: 
  #final label in statem expression
  L_333: 
  j L_327
  #inside else
  L_329:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_346: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_347: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_345
  j L_345
  #final label in binaryExp
  L_345: 
  #jumpToAllOnlyIf
  L_343:
  move $v0, $s4
  beqz $v0, L_344
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_354: 
  L_352: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_353: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_356
  .data
ARITH_ERROR_355: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_355
  j error
  L_356:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_351
  j L_351
  #final label in binaryExp
  L_351: 
  #final label in codeGenAssignmentExpression
  L_350: 
  move $v0, $s5
  sw $v0, A_0_6_12
  move $s4, $v0
  #final label in assignmentStatement
  L_349: 
  #final label in statem expression
  L_348: 
  j L_342
  #inside else
  L_344:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_361: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_362: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_360
  j L_360
  #final label in binaryExp
  L_360: 
  #jumpToAllOnlyIf
  L_358:
  move $v0, $s4
  beqz $v0, L_359
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_369: 
  L_367: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_368: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_371
  .data
ARITH_ERROR_370: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_370
  j error
  L_371:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_366
  j L_366
  #final label in binaryExp
  L_366: 
  #final label in codeGenAssignmentExpression
  L_365: 
  move $v0, $s5
  sw $v0, A_0_7_13
  move $s4, $v0
  #final label in assignmentStatement
  L_364: 
  #final label in statem expression
  L_363: 
  j L_357
  #inside else
  L_359:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_376: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_377: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_375
  j L_375
  #final label in binaryExp
  L_375: 
  #jumpToAllOnlyIf
  L_373:
  move $v0, $s4
  beqz $v0, L_374
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_384: 
  L_382: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_383: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_386
  .data
ARITH_ERROR_385: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_385
  j error
  L_386:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_381
  j L_381
  #final label in binaryExp
  L_381: 
  #final label in codeGenAssignmentExpression
  L_380: 
  move $v0, $s5
  sw $v0, A_0_8_14
  move $s4, $v0
  #final label in assignmentStatement
  L_379: 
  #final label in statem expression
  L_378: 
  j L_372
  #inside else
  L_374:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_390: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_391: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_389
  j L_389
  #final label in binaryExp
  L_389: 
  #jumpToAllOnlyIf
  L_388:
  move $v0, $s4
  beqz $v0, L_387
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_398: 
  L_396: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_397: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_400
  .data
ARITH_ERROR_399: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_399
  j error
  L_400:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_395
  j L_395
  #final label in binaryExp
  L_395: 
  #final label in codeGenAssignmentExpression
  L_394: 
  move $v0, $s5
  sw $v0, A_0_9_15
  move $s4, $v0
  #final label in assignmentStatement
  L_393: 
  #final label in statem expression
  L_392: 
  #if finish label = 387
  L_387:
  #if finish label = 372
  L_372:
  #if finish label = 357
  L_357:
  #if finish label = 342
  L_342:
  #if finish label = 327
  L_327:
  #if finish label = 312
  L_312:
  #if finish label = 297
  L_297:
  #if finish label = 282
  L_282:
  #if finish label = 267
  L_267:
  #if finish label = 252
  L_252:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_405: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_406: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_404
  j L_404
  #final label in binaryExp
  L_404: 
  #final label in codeGenAssignmentExpression
  L_403: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_402: 
  #final label in statem expression
  L_401: 
  #whileBodyEndJump
  L_247:
  j  L_245
  #while finish label = 244
  L_244:
  j L_235
  #inside else
  L_237:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_411: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_412: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_410
  j L_410
  #final label in binaryExp
  L_410: 
  #jumpToAllOnlyIf
  L_408:
  move $v0, $s4
  beqz $v0, L_409
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_415: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_414: 
  #final label in statem expression
  L_413: 
  #starting while
  #start of while loop
  L_417:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_421: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_422: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_420
  j L_420
  #final label in binaryExp
  L_420: 
  #jumpToAllOnlyIf
  L_418:
  move $v0, $s4
  bnez $v0, L_423
  j L_416
  #whileBodyLabel
  L_423:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_428: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_429: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_427
  j L_427
  #final label in binaryExp
  L_427: 
  #jumpToAllOnlyIf
  L_425:
  move $v0, $s4
  beqz $v0, L_426
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_436: 
  L_434: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_435: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_438
  .data
ARITH_ERROR_437: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_437
  j error
  L_438:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_433
  j L_433
  #final label in binaryExp
  L_433: 
  #final label in codeGenAssignmentExpression
  L_432: 
  move $v0, $s5
  sw $v0, A_1_0_16
  move $s4, $v0
  #final label in assignmentStatement
  L_431: 
  #final label in statem expression
  L_430: 
  j L_424
  #inside else
  L_426:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_443: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_444: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_442
  j L_442
  #final label in binaryExp
  L_442: 
  #jumpToAllOnlyIf
  L_440:
  move $v0, $s4
  beqz $v0, L_441
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_451: 
  L_449: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_450: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_453
  .data
ARITH_ERROR_452: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_452
  j error
  L_453:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_448
  j L_448
  #final label in binaryExp
  L_448: 
  #final label in codeGenAssignmentExpression
  L_447: 
  move $v0, $s5
  sw $v0, A_1_1_17
  move $s4, $v0
  #final label in assignmentStatement
  L_446: 
  #final label in statem expression
  L_445: 
  j L_439
  #inside else
  L_441:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_458: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_459: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_457
  j L_457
  #final label in binaryExp
  L_457: 
  #jumpToAllOnlyIf
  L_455:
  move $v0, $s4
  beqz $v0, L_456
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_466: 
  L_464: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_465: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_468
  .data
ARITH_ERROR_467: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_467
  j error
  L_468:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_463
  j L_463
  #final label in binaryExp
  L_463: 
  #final label in codeGenAssignmentExpression
  L_462: 
  move $v0, $s5
  sw $v0, A_1_2_18
  move $s4, $v0
  #final label in assignmentStatement
  L_461: 
  #final label in statem expression
  L_460: 
  j L_454
  #inside else
  L_456:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_473: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_474: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_472
  j L_472
  #final label in binaryExp
  L_472: 
  #jumpToAllOnlyIf
  L_470:
  move $v0, $s4
  beqz $v0, L_471
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_481: 
  L_479: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_480: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_483
  .data
ARITH_ERROR_482: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_482
  j error
  L_483:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_478
  j L_478
  #final label in binaryExp
  L_478: 
  #final label in codeGenAssignmentExpression
  L_477: 
  move $v0, $s5
  sw $v0, A_1_3_19
  move $s4, $v0
  #final label in assignmentStatement
  L_476: 
  #final label in statem expression
  L_475: 
  j L_469
  #inside else
  L_471:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_488: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_489: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_487
  j L_487
  #final label in binaryExp
  L_487: 
  #jumpToAllOnlyIf
  L_485:
  move $v0, $s4
  beqz $v0, L_486
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_496: 
  L_494: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_495: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_498
  .data
ARITH_ERROR_497: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_497
  j error
  L_498:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_493
  j L_493
  #final label in binaryExp
  L_493: 
  #final label in codeGenAssignmentExpression
  L_492: 
  move $v0, $s5
  sw $v0, A_1_4_20
  move $s4, $v0
  #final label in assignmentStatement
  L_491: 
  #final label in statem expression
  L_490: 
  j L_484
  #inside else
  L_486:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_503: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_504: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_502
  j L_502
  #final label in binaryExp
  L_502: 
  #jumpToAllOnlyIf
  L_500:
  move $v0, $s4
  beqz $v0, L_501
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_511: 
  L_509: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_510: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_513
  .data
ARITH_ERROR_512: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_512
  j error
  L_513:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_508
  j L_508
  #final label in binaryExp
  L_508: 
  #final label in codeGenAssignmentExpression
  L_507: 
  move $v0, $s5
  sw $v0, A_1_5_21
  move $s4, $v0
  #final label in assignmentStatement
  L_506: 
  #final label in statem expression
  L_505: 
  j L_499
  #inside else
  L_501:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_518: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_519: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_517
  j L_517
  #final label in binaryExp
  L_517: 
  #jumpToAllOnlyIf
  L_515:
  move $v0, $s4
  beqz $v0, L_516
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_526: 
  L_524: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_525: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_528
  .data
ARITH_ERROR_527: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_527
  j error
  L_528:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_523
  j L_523
  #final label in binaryExp
  L_523: 
  #final label in codeGenAssignmentExpression
  L_522: 
  move $v0, $s5
  sw $v0, A_1_6_22
  move $s4, $v0
  #final label in assignmentStatement
  L_521: 
  #final label in statem expression
  L_520: 
  j L_514
  #inside else
  L_516:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_533: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_534: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_532
  j L_532
  #final label in binaryExp
  L_532: 
  #jumpToAllOnlyIf
  L_530:
  move $v0, $s4
  beqz $v0, L_531
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_541: 
  L_539: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_540: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_543
  .data
ARITH_ERROR_542: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_542
  j error
  L_543:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_538
  j L_538
  #final label in binaryExp
  L_538: 
  #final label in codeGenAssignmentExpression
  L_537: 
  move $v0, $s5
  sw $v0, A_1_7_23
  move $s4, $v0
  #final label in assignmentStatement
  L_536: 
  #final label in statem expression
  L_535: 
  j L_529
  #inside else
  L_531:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_548: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_549: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_547
  j L_547
  #final label in binaryExp
  L_547: 
  #jumpToAllOnlyIf
  L_545:
  move $v0, $s4
  beqz $v0, L_546
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_556: 
  L_554: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_555: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_558
  .data
ARITH_ERROR_557: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_557
  j error
  L_558:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_553
  j L_553
  #final label in binaryExp
  L_553: 
  #final label in codeGenAssignmentExpression
  L_552: 
  move $v0, $s5
  sw $v0, A_1_8_24
  move $s4, $v0
  #final label in assignmentStatement
  L_551: 
  #final label in statem expression
  L_550: 
  j L_544
  #inside else
  L_546:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_562: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_563: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_561
  j L_561
  #final label in binaryExp
  L_561: 
  #jumpToAllOnlyIf
  L_560:
  move $v0, $s4
  beqz $v0, L_559
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_570: 
  L_568: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_569: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_572
  .data
ARITH_ERROR_571: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_571
  j error
  L_572:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_567
  j L_567
  #final label in binaryExp
  L_567: 
  #final label in codeGenAssignmentExpression
  L_566: 
  move $v0, $s5
  sw $v0, A_1_9_25
  move $s4, $v0
  #final label in assignmentStatement
  L_565: 
  #final label in statem expression
  L_564: 
  #if finish label = 559
  L_559:
  #if finish label = 544
  L_544:
  #if finish label = 529
  L_529:
  #if finish label = 514
  L_514:
  #if finish label = 499
  L_499:
  #if finish label = 484
  L_484:
  #if finish label = 469
  L_469:
  #if finish label = 454
  L_454:
  #if finish label = 439
  L_439:
  #if finish label = 424
  L_424:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_577: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_578: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_576
  j L_576
  #final label in binaryExp
  L_576: 
  #final label in codeGenAssignmentExpression
  L_575: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_574: 
  #final label in statem expression
  L_573: 
  #whileBodyEndJump
  L_419:
  j  L_417
  #while finish label = 416
  L_416:
  j L_407
  #inside else
  L_409:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_583: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_584: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_582
  j L_582
  #final label in binaryExp
  L_582: 
  #jumpToAllOnlyIf
  L_580:
  move $v0, $s4
  beqz $v0, L_581
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_587: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_586: 
  #final label in statem expression
  L_585: 
  #starting while
  #start of while loop
  L_589:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_593: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_594: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_592
  j L_592
  #final label in binaryExp
  L_592: 
  #jumpToAllOnlyIf
  L_590:
  move $v0, $s4
  bnez $v0, L_595
  j L_588
  #whileBodyLabel
  L_595:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_600: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_601: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_599
  j L_599
  #final label in binaryExp
  L_599: 
  #jumpToAllOnlyIf
  L_597:
  move $v0, $s4
  beqz $v0, L_598
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_608: 
  L_606: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_607: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_610
  .data
ARITH_ERROR_609: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_609
  j error
  L_610:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_605
  j L_605
  #final label in binaryExp
  L_605: 
  #final label in codeGenAssignmentExpression
  L_604: 
  move $v0, $s5
  sw $v0, A_2_0_26
  move $s4, $v0
  #final label in assignmentStatement
  L_603: 
  #final label in statem expression
  L_602: 
  j L_596
  #inside else
  L_598:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_615: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_616: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_614
  j L_614
  #final label in binaryExp
  L_614: 
  #jumpToAllOnlyIf
  L_612:
  move $v0, $s4
  beqz $v0, L_613
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_623: 
  L_621: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_622: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_625
  .data
ARITH_ERROR_624: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_624
  j error
  L_625:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_620
  j L_620
  #final label in binaryExp
  L_620: 
  #final label in codeGenAssignmentExpression
  L_619: 
  move $v0, $s5
  sw $v0, A_2_1_27
  move $s4, $v0
  #final label in assignmentStatement
  L_618: 
  #final label in statem expression
  L_617: 
  j L_611
  #inside else
  L_613:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_630: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_631: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_629
  j L_629
  #final label in binaryExp
  L_629: 
  #jumpToAllOnlyIf
  L_627:
  move $v0, $s4
  beqz $v0, L_628
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_638: 
  L_636: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_637: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_640
  .data
ARITH_ERROR_639: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_639
  j error
  L_640:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_635
  j L_635
  #final label in binaryExp
  L_635: 
  #final label in codeGenAssignmentExpression
  L_634: 
  move $v0, $s5
  sw $v0, A_2_2_28
  move $s4, $v0
  #final label in assignmentStatement
  L_633: 
  #final label in statem expression
  L_632: 
  j L_626
  #inside else
  L_628:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_645: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_646: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_644
  j L_644
  #final label in binaryExp
  L_644: 
  #jumpToAllOnlyIf
  L_642:
  move $v0, $s4
  beqz $v0, L_643
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_653: 
  L_651: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_652: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_655
  .data
ARITH_ERROR_654: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_654
  j error
  L_655:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_650
  j L_650
  #final label in binaryExp
  L_650: 
  #final label in codeGenAssignmentExpression
  L_649: 
  move $v0, $s5
  sw $v0, A_2_3_29
  move $s4, $v0
  #final label in assignmentStatement
  L_648: 
  #final label in statem expression
  L_647: 
  j L_641
  #inside else
  L_643:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_660: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_661: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_659
  j L_659
  #final label in binaryExp
  L_659: 
  #jumpToAllOnlyIf
  L_657:
  move $v0, $s4
  beqz $v0, L_658
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_668: 
  L_666: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_667: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_670
  .data
ARITH_ERROR_669: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_669
  j error
  L_670:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_665
  j L_665
  #final label in binaryExp
  L_665: 
  #final label in codeGenAssignmentExpression
  L_664: 
  move $v0, $s5
  sw $v0, A_2_4_30
  move $s4, $v0
  #final label in assignmentStatement
  L_663: 
  #final label in statem expression
  L_662: 
  j L_656
  #inside else
  L_658:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_675: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_676: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_674
  j L_674
  #final label in binaryExp
  L_674: 
  #jumpToAllOnlyIf
  L_672:
  move $v0, $s4
  beqz $v0, L_673
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_683: 
  L_681: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_682: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_685
  .data
ARITH_ERROR_684: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_684
  j error
  L_685:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_680
  j L_680
  #final label in binaryExp
  L_680: 
  #final label in codeGenAssignmentExpression
  L_679: 
  move $v0, $s5
  sw $v0, A_2_5_31
  move $s4, $v0
  #final label in assignmentStatement
  L_678: 
  #final label in statem expression
  L_677: 
  j L_671
  #inside else
  L_673:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_690: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_691: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_689
  j L_689
  #final label in binaryExp
  L_689: 
  #jumpToAllOnlyIf
  L_687:
  move $v0, $s4
  beqz $v0, L_688
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_698: 
  L_696: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_697: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_700
  .data
ARITH_ERROR_699: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_699
  j error
  L_700:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_695
  j L_695
  #final label in binaryExp
  L_695: 
  #final label in codeGenAssignmentExpression
  L_694: 
  move $v0, $s5
  sw $v0, A_2_6_32
  move $s4, $v0
  #final label in assignmentStatement
  L_693: 
  #final label in statem expression
  L_692: 
  j L_686
  #inside else
  L_688:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_705: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_706: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_704
  j L_704
  #final label in binaryExp
  L_704: 
  #jumpToAllOnlyIf
  L_702:
  move $v0, $s4
  beqz $v0, L_703
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_713: 
  L_711: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_712: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_715
  .data
ARITH_ERROR_714: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_714
  j error
  L_715:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_710
  j L_710
  #final label in binaryExp
  L_710: 
  #final label in codeGenAssignmentExpression
  L_709: 
  move $v0, $s5
  sw $v0, A_2_7_33
  move $s4, $v0
  #final label in assignmentStatement
  L_708: 
  #final label in statem expression
  L_707: 
  j L_701
  #inside else
  L_703:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_720: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_721: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_719
  j L_719
  #final label in binaryExp
  L_719: 
  #jumpToAllOnlyIf
  L_717:
  move $v0, $s4
  beqz $v0, L_718
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_728: 
  L_726: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_727: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_730
  .data
ARITH_ERROR_729: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_729
  j error
  L_730:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_725
  j L_725
  #final label in binaryExp
  L_725: 
  #final label in codeGenAssignmentExpression
  L_724: 
  move $v0, $s5
  sw $v0, A_2_8_34
  move $s4, $v0
  #final label in assignmentStatement
  L_723: 
  #final label in statem expression
  L_722: 
  j L_716
  #inside else
  L_718:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_734: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_735: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_733
  j L_733
  #final label in binaryExp
  L_733: 
  #jumpToAllOnlyIf
  L_732:
  move $v0, $s4
  beqz $v0, L_731
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_742: 
  L_740: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_741: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_744
  .data
ARITH_ERROR_743: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_743
  j error
  L_744:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_739
  j L_739
  #final label in binaryExp
  L_739: 
  #final label in codeGenAssignmentExpression
  L_738: 
  move $v0, $s5
  sw $v0, A_2_9_35
  move $s4, $v0
  #final label in assignmentStatement
  L_737: 
  #final label in statem expression
  L_736: 
  #if finish label = 731
  L_731:
  #if finish label = 716
  L_716:
  #if finish label = 701
  L_701:
  #if finish label = 686
  L_686:
  #if finish label = 671
  L_671:
  #if finish label = 656
  L_656:
  #if finish label = 641
  L_641:
  #if finish label = 626
  L_626:
  #if finish label = 611
  L_611:
  #if finish label = 596
  L_596:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_749: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_750: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_748
  j L_748
  #final label in binaryExp
  L_748: 
  #final label in codeGenAssignmentExpression
  L_747: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_746: 
  #final label in statem expression
  L_745: 
  #whileBodyEndJump
  L_591:
  j  L_589
  #while finish label = 588
  L_588:
  j L_579
  #inside else
  L_581:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_755: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_756: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_754
  j L_754
  #final label in binaryExp
  L_754: 
  #jumpToAllOnlyIf
  L_752:
  move $v0, $s4
  beqz $v0, L_753
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_759: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_758: 
  #final label in statem expression
  L_757: 
  #starting while
  #start of while loop
  L_761:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_765: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_766: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_764
  j L_764
  #final label in binaryExp
  L_764: 
  #jumpToAllOnlyIf
  L_762:
  move $v0, $s4
  bnez $v0, L_767
  j L_760
  #whileBodyLabel
  L_767:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_772: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_773: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_771
  j L_771
  #final label in binaryExp
  L_771: 
  #jumpToAllOnlyIf
  L_769:
  move $v0, $s4
  beqz $v0, L_770
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_780: 
  L_778: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_779: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_782
  .data
ARITH_ERROR_781: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_781
  j error
  L_782:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_777
  j L_777
  #final label in binaryExp
  L_777: 
  #final label in codeGenAssignmentExpression
  L_776: 
  move $v0, $s5
  sw $v0, A_3_0_36
  move $s4, $v0
  #final label in assignmentStatement
  L_775: 
  #final label in statem expression
  L_774: 
  j L_768
  #inside else
  L_770:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_787: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_788: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_786
  j L_786
  #final label in binaryExp
  L_786: 
  #jumpToAllOnlyIf
  L_784:
  move $v0, $s4
  beqz $v0, L_785
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_795: 
  L_793: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_794: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_797
  .data
ARITH_ERROR_796: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_796
  j error
  L_797:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_792
  j L_792
  #final label in binaryExp
  L_792: 
  #final label in codeGenAssignmentExpression
  L_791: 
  move $v0, $s5
  sw $v0, A_3_1_37
  move $s4, $v0
  #final label in assignmentStatement
  L_790: 
  #final label in statem expression
  L_789: 
  j L_783
  #inside else
  L_785:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_802: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_803: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_801
  j L_801
  #final label in binaryExp
  L_801: 
  #jumpToAllOnlyIf
  L_799:
  move $v0, $s4
  beqz $v0, L_800
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_810: 
  L_808: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_809: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_812
  .data
ARITH_ERROR_811: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_811
  j error
  L_812:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_807
  j L_807
  #final label in binaryExp
  L_807: 
  #final label in codeGenAssignmentExpression
  L_806: 
  move $v0, $s5
  sw $v0, A_3_2_38
  move $s4, $v0
  #final label in assignmentStatement
  L_805: 
  #final label in statem expression
  L_804: 
  j L_798
  #inside else
  L_800:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_817: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_818: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_816
  j L_816
  #final label in binaryExp
  L_816: 
  #jumpToAllOnlyIf
  L_814:
  move $v0, $s4
  beqz $v0, L_815
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_825: 
  L_823: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_824: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_827
  .data
ARITH_ERROR_826: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_826
  j error
  L_827:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_822
  j L_822
  #final label in binaryExp
  L_822: 
  #final label in codeGenAssignmentExpression
  L_821: 
  move $v0, $s5
  sw $v0, A_3_3_39
  move $s4, $v0
  #final label in assignmentStatement
  L_820: 
  #final label in statem expression
  L_819: 
  j L_813
  #inside else
  L_815:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_832: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_833: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_831
  j L_831
  #final label in binaryExp
  L_831: 
  #jumpToAllOnlyIf
  L_829:
  move $v0, $s4
  beqz $v0, L_830
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_840: 
  L_838: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_839: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_842
  .data
ARITH_ERROR_841: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_841
  j error
  L_842:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_837
  j L_837
  #final label in binaryExp
  L_837: 
  #final label in codeGenAssignmentExpression
  L_836: 
  move $v0, $s5
  sw $v0, A_3_4_40
  move $s4, $v0
  #final label in assignmentStatement
  L_835: 
  #final label in statem expression
  L_834: 
  j L_828
  #inside else
  L_830:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_847: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_848: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_846
  j L_846
  #final label in binaryExp
  L_846: 
  #jumpToAllOnlyIf
  L_844:
  move $v0, $s4
  beqz $v0, L_845
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_855: 
  L_853: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_854: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_857
  .data
ARITH_ERROR_856: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_856
  j error
  L_857:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_852
  j L_852
  #final label in binaryExp
  L_852: 
  #final label in codeGenAssignmentExpression
  L_851: 
  move $v0, $s5
  sw $v0, A_3_5_41
  move $s4, $v0
  #final label in assignmentStatement
  L_850: 
  #final label in statem expression
  L_849: 
  j L_843
  #inside else
  L_845:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_862: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_863: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_861
  j L_861
  #final label in binaryExp
  L_861: 
  #jumpToAllOnlyIf
  L_859:
  move $v0, $s4
  beqz $v0, L_860
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_870: 
  L_868: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_869: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_872
  .data
ARITH_ERROR_871: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_871
  j error
  L_872:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_867
  j L_867
  #final label in binaryExp
  L_867: 
  #final label in codeGenAssignmentExpression
  L_866: 
  move $v0, $s5
  sw $v0, A_3_6_42
  move $s4, $v0
  #final label in assignmentStatement
  L_865: 
  #final label in statem expression
  L_864: 
  j L_858
  #inside else
  L_860:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_877: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_878: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_876
  j L_876
  #final label in binaryExp
  L_876: 
  #jumpToAllOnlyIf
  L_874:
  move $v0, $s4
  beqz $v0, L_875
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_885: 
  L_883: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_884: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_887
  .data
ARITH_ERROR_886: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_886
  j error
  L_887:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_882
  j L_882
  #final label in binaryExp
  L_882: 
  #final label in codeGenAssignmentExpression
  L_881: 
  move $v0, $s5
  sw $v0, A_3_7_43
  move $s4, $v0
  #final label in assignmentStatement
  L_880: 
  #final label in statem expression
  L_879: 
  j L_873
  #inside else
  L_875:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_892: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_893: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_891
  j L_891
  #final label in binaryExp
  L_891: 
  #jumpToAllOnlyIf
  L_889:
  move $v0, $s4
  beqz $v0, L_890
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_900: 
  L_898: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_899: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_902
  .data
ARITH_ERROR_901: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_901
  j error
  L_902:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_897
  j L_897
  #final label in binaryExp
  L_897: 
  #final label in codeGenAssignmentExpression
  L_896: 
  move $v0, $s5
  sw $v0, A_3_8_44
  move $s4, $v0
  #final label in assignmentStatement
  L_895: 
  #final label in statem expression
  L_894: 
  j L_888
  #inside else
  L_890:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_906: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_907: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_905
  j L_905
  #final label in binaryExp
  L_905: 
  #jumpToAllOnlyIf
  L_904:
  move $v0, $s4
  beqz $v0, L_903
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_914: 
  L_912: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_913: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_916
  .data
ARITH_ERROR_915: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_915
  j error
  L_916:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_911
  j L_911
  #final label in binaryExp
  L_911: 
  #final label in codeGenAssignmentExpression
  L_910: 
  move $v0, $s5
  sw $v0, A_3_9_45
  move $s4, $v0
  #final label in assignmentStatement
  L_909: 
  #final label in statem expression
  L_908: 
  #if finish label = 903
  L_903:
  #if finish label = 888
  L_888:
  #if finish label = 873
  L_873:
  #if finish label = 858
  L_858:
  #if finish label = 843
  L_843:
  #if finish label = 828
  L_828:
  #if finish label = 813
  L_813:
  #if finish label = 798
  L_798:
  #if finish label = 783
  L_783:
  #if finish label = 768
  L_768:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_921: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_922: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_920
  j L_920
  #final label in binaryExp
  L_920: 
  #final label in codeGenAssignmentExpression
  L_919: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_918: 
  #final label in statem expression
  L_917: 
  #whileBodyEndJump
  L_763:
  j  L_761
  #while finish label = 760
  L_760:
  j L_751
  #inside else
  L_753:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_927: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_928: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_926
  j L_926
  #final label in binaryExp
  L_926: 
  #jumpToAllOnlyIf
  L_924:
  move $v0, $s4
  beqz $v0, L_925
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_931: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_930: 
  #final label in statem expression
  L_929: 
  #starting while
  #start of while loop
  L_933:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_937: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_938: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_936
  j L_936
  #final label in binaryExp
  L_936: 
  #jumpToAllOnlyIf
  L_934:
  move $v0, $s4
  bnez $v0, L_939
  j L_932
  #whileBodyLabel
  L_939:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_944: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_945: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_943
  j L_943
  #final label in binaryExp
  L_943: 
  #jumpToAllOnlyIf
  L_941:
  move $v0, $s4
  beqz $v0, L_942
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_952: 
  L_950: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_951: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_954
  .data
ARITH_ERROR_953: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_953
  j error
  L_954:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_949
  j L_949
  #final label in binaryExp
  L_949: 
  #final label in codeGenAssignmentExpression
  L_948: 
  move $v0, $s5
  sw $v0, A_4_0_46
  move $s4, $v0
  #final label in assignmentStatement
  L_947: 
  #final label in statem expression
  L_946: 
  j L_940
  #inside else
  L_942:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_959: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_960: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_958
  j L_958
  #final label in binaryExp
  L_958: 
  #jumpToAllOnlyIf
  L_956:
  move $v0, $s4
  beqz $v0, L_957
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_967: 
  L_965: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_966: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_969
  .data
ARITH_ERROR_968: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_968
  j error
  L_969:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_964
  j L_964
  #final label in binaryExp
  L_964: 
  #final label in codeGenAssignmentExpression
  L_963: 
  move $v0, $s5
  sw $v0, A_4_1_47
  move $s4, $v0
  #final label in assignmentStatement
  L_962: 
  #final label in statem expression
  L_961: 
  j L_955
  #inside else
  L_957:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_974: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_975: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_973
  j L_973
  #final label in binaryExp
  L_973: 
  #jumpToAllOnlyIf
  L_971:
  move $v0, $s4
  beqz $v0, L_972
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_982: 
  L_980: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_981: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_984
  .data
ARITH_ERROR_983: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_983
  j error
  L_984:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_979
  j L_979
  #final label in binaryExp
  L_979: 
  #final label in codeGenAssignmentExpression
  L_978: 
  move $v0, $s5
  sw $v0, A_4_2_48
  move $s4, $v0
  #final label in assignmentStatement
  L_977: 
  #final label in statem expression
  L_976: 
  j L_970
  #inside else
  L_972:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_989: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_990: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_988
  j L_988
  #final label in binaryExp
  L_988: 
  #jumpToAllOnlyIf
  L_986:
  move $v0, $s4
  beqz $v0, L_987
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_997: 
  L_995: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_996: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_999
  .data
ARITH_ERROR_998: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_998
  j error
  L_999:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_994
  j L_994
  #final label in binaryExp
  L_994: 
  #final label in codeGenAssignmentExpression
  L_993: 
  move $v0, $s5
  sw $v0, A_4_3_49
  move $s4, $v0
  #final label in assignmentStatement
  L_992: 
  #final label in statem expression
  L_991: 
  j L_985
  #inside else
  L_987:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1004: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_1005: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1003
  j L_1003
  #final label in binaryExp
  L_1003: 
  #jumpToAllOnlyIf
  L_1001:
  move $v0, $s4
  beqz $v0, L_1002
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1012: 
  L_1010: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1011: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1014
  .data
ARITH_ERROR_1013: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1013
  j error
  L_1014:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1009
  j L_1009
  #final label in binaryExp
  L_1009: 
  #final label in codeGenAssignmentExpression
  L_1008: 
  move $v0, $s5
  sw $v0, A_4_4_50
  move $s4, $v0
  #final label in assignmentStatement
  L_1007: 
  #final label in statem expression
  L_1006: 
  j L_1000
  #inside else
  L_1002:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1019: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_1020: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1018
  j L_1018
  #final label in binaryExp
  L_1018: 
  #jumpToAllOnlyIf
  L_1016:
  move $v0, $s4
  beqz $v0, L_1017
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1027: 
  L_1025: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1026: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1029
  .data
ARITH_ERROR_1028: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1028
  j error
  L_1029:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1024
  j L_1024
  #final label in binaryExp
  L_1024: 
  #final label in codeGenAssignmentExpression
  L_1023: 
  move $v0, $s5
  sw $v0, A_4_5_51
  move $s4, $v0
  #final label in assignmentStatement
  L_1022: 
  #final label in statem expression
  L_1021: 
  j L_1015
  #inside else
  L_1017:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1034: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_1035: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1033
  j L_1033
  #final label in binaryExp
  L_1033: 
  #jumpToAllOnlyIf
  L_1031:
  move $v0, $s4
  beqz $v0, L_1032
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1042: 
  L_1040: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1041: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1044
  .data
ARITH_ERROR_1043: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1043
  j error
  L_1044:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1039
  j L_1039
  #final label in binaryExp
  L_1039: 
  #final label in codeGenAssignmentExpression
  L_1038: 
  move $v0, $s5
  sw $v0, A_4_6_52
  move $s4, $v0
  #final label in assignmentStatement
  L_1037: 
  #final label in statem expression
  L_1036: 
  j L_1030
  #inside else
  L_1032:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1049: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_1050: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1048
  j L_1048
  #final label in binaryExp
  L_1048: 
  #jumpToAllOnlyIf
  L_1046:
  move $v0, $s4
  beqz $v0, L_1047
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1057: 
  L_1055: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1056: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1059
  .data
ARITH_ERROR_1058: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1058
  j error
  L_1059:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1054
  j L_1054
  #final label in binaryExp
  L_1054: 
  #final label in codeGenAssignmentExpression
  L_1053: 
  move $v0, $s5
  sw $v0, A_4_7_53
  move $s4, $v0
  #final label in assignmentStatement
  L_1052: 
  #final label in statem expression
  L_1051: 
  j L_1045
  #inside else
  L_1047:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1064: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_1065: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1063
  j L_1063
  #final label in binaryExp
  L_1063: 
  #jumpToAllOnlyIf
  L_1061:
  move $v0, $s4
  beqz $v0, L_1062
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1072: 
  L_1070: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1071: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1074
  .data
ARITH_ERROR_1073: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1073
  j error
  L_1074:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1069
  j L_1069
  #final label in binaryExp
  L_1069: 
  #final label in codeGenAssignmentExpression
  L_1068: 
  move $v0, $s5
  sw $v0, A_4_8_54
  move $s4, $v0
  #final label in assignmentStatement
  L_1067: 
  #final label in statem expression
  L_1066: 
  j L_1060
  #inside else
  L_1062:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1078: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1079: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1077
  j L_1077
  #final label in binaryExp
  L_1077: 
  #jumpToAllOnlyIf
  L_1076:
  move $v0, $s4
  beqz $v0, L_1075
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1086: 
  L_1084: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1085: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1088
  .data
ARITH_ERROR_1087: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1087
  j error
  L_1088:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1083
  j L_1083
  #final label in binaryExp
  L_1083: 
  #final label in codeGenAssignmentExpression
  L_1082: 
  move $v0, $s5
  sw $v0, A_4_9_55
  move $s4, $v0
  #final label in assignmentStatement
  L_1081: 
  #final label in statem expression
  L_1080: 
  #if finish label = 1075
  L_1075:
  #if finish label = 1060
  L_1060:
  #if finish label = 1045
  L_1045:
  #if finish label = 1030
  L_1030:
  #if finish label = 1015
  L_1015:
  #if finish label = 1000
  L_1000:
  #if finish label = 985
  L_985:
  #if finish label = 970
  L_970:
  #if finish label = 955
  L_955:
  #if finish label = 940
  L_940:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_1093: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_1094: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1092
  j L_1092
  #final label in binaryExp
  L_1092: 
  #final label in codeGenAssignmentExpression
  L_1091: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1090: 
  #final label in statem expression
  L_1089: 
  #whileBodyEndJump
  L_935:
  j  L_933
  #while finish label = 932
  L_932:
  j L_923
  #inside else
  L_925:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_1099: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_1100: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1098
  j L_1098
  #final label in binaryExp
  L_1098: 
  #jumpToAllOnlyIf
  L_1096:
  move $v0, $s4
  beqz $v0, L_1097
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_1103: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1102: 
  #final label in statem expression
  L_1101: 
  #starting while
  #start of while loop
  L_1105:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1109: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1110: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1108
  j L_1108
  #final label in binaryExp
  L_1108: 
  #jumpToAllOnlyIf
  L_1106:
  move $v0, $s4
  bnez $v0, L_1111
  j L_1104
  #whileBodyLabel
  L_1111:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1116: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_1117: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1115
  j L_1115
  #final label in binaryExp
  L_1115: 
  #jumpToAllOnlyIf
  L_1113:
  move $v0, $s4
  beqz $v0, L_1114
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1124: 
  L_1122: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1123: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1126
  .data
ARITH_ERROR_1125: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1125
  j error
  L_1126:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1121
  j L_1121
  #final label in binaryExp
  L_1121: 
  #final label in codeGenAssignmentExpression
  L_1120: 
  move $v0, $s5
  sw $v0, A_5_0_56
  move $s4, $v0
  #final label in assignmentStatement
  L_1119: 
  #final label in statem expression
  L_1118: 
  j L_1112
  #inside else
  L_1114:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1131: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_1132: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1130
  j L_1130
  #final label in binaryExp
  L_1130: 
  #jumpToAllOnlyIf
  L_1128:
  move $v0, $s4
  beqz $v0, L_1129
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1139: 
  L_1137: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1138: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1141
  .data
ARITH_ERROR_1140: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1140
  j error
  L_1141:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1136
  j L_1136
  #final label in binaryExp
  L_1136: 
  #final label in codeGenAssignmentExpression
  L_1135: 
  move $v0, $s5
  sw $v0, A_5_1_57
  move $s4, $v0
  #final label in assignmentStatement
  L_1134: 
  #final label in statem expression
  L_1133: 
  j L_1127
  #inside else
  L_1129:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1146: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_1147: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1145
  j L_1145
  #final label in binaryExp
  L_1145: 
  #jumpToAllOnlyIf
  L_1143:
  move $v0, $s4
  beqz $v0, L_1144
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1154: 
  L_1152: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1153: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1156
  .data
ARITH_ERROR_1155: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1155
  j error
  L_1156:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1151
  j L_1151
  #final label in binaryExp
  L_1151: 
  #final label in codeGenAssignmentExpression
  L_1150: 
  move $v0, $s5
  sw $v0, A_5_2_58
  move $s4, $v0
  #final label in assignmentStatement
  L_1149: 
  #final label in statem expression
  L_1148: 
  j L_1142
  #inside else
  L_1144:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1161: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_1162: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1160
  j L_1160
  #final label in binaryExp
  L_1160: 
  #jumpToAllOnlyIf
  L_1158:
  move $v0, $s4
  beqz $v0, L_1159
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1169: 
  L_1167: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1168: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1171
  .data
ARITH_ERROR_1170: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1170
  j error
  L_1171:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1166
  j L_1166
  #final label in binaryExp
  L_1166: 
  #final label in codeGenAssignmentExpression
  L_1165: 
  move $v0, $s5
  sw $v0, A_5_3_59
  move $s4, $v0
  #final label in assignmentStatement
  L_1164: 
  #final label in statem expression
  L_1163: 
  j L_1157
  #inside else
  L_1159:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1176: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_1177: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1175
  j L_1175
  #final label in binaryExp
  L_1175: 
  #jumpToAllOnlyIf
  L_1173:
  move $v0, $s4
  beqz $v0, L_1174
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1184: 
  L_1182: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1183: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1186
  .data
ARITH_ERROR_1185: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1185
  j error
  L_1186:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1181
  j L_1181
  #final label in binaryExp
  L_1181: 
  #final label in codeGenAssignmentExpression
  L_1180: 
  move $v0, $s5
  sw $v0, A_5_4_60
  move $s4, $v0
  #final label in assignmentStatement
  L_1179: 
  #final label in statem expression
  L_1178: 
  j L_1172
  #inside else
  L_1174:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1191: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_1192: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1190
  j L_1190
  #final label in binaryExp
  L_1190: 
  #jumpToAllOnlyIf
  L_1188:
  move $v0, $s4
  beqz $v0, L_1189
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1199: 
  L_1197: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1198: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1201
  .data
ARITH_ERROR_1200: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1200
  j error
  L_1201:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1196
  j L_1196
  #final label in binaryExp
  L_1196: 
  #final label in codeGenAssignmentExpression
  L_1195: 
  move $v0, $s5
  sw $v0, A_5_5_61
  move $s4, $v0
  #final label in assignmentStatement
  L_1194: 
  #final label in statem expression
  L_1193: 
  j L_1187
  #inside else
  L_1189:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1206: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_1207: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1205
  j L_1205
  #final label in binaryExp
  L_1205: 
  #jumpToAllOnlyIf
  L_1203:
  move $v0, $s4
  beqz $v0, L_1204
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1214: 
  L_1212: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1213: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1216
  .data
ARITH_ERROR_1215: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1215
  j error
  L_1216:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1211
  j L_1211
  #final label in binaryExp
  L_1211: 
  #final label in codeGenAssignmentExpression
  L_1210: 
  move $v0, $s5
  sw $v0, A_5_6_62
  move $s4, $v0
  #final label in assignmentStatement
  L_1209: 
  #final label in statem expression
  L_1208: 
  j L_1202
  #inside else
  L_1204:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1221: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_1222: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1220
  j L_1220
  #final label in binaryExp
  L_1220: 
  #jumpToAllOnlyIf
  L_1218:
  move $v0, $s4
  beqz $v0, L_1219
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1229: 
  L_1227: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1228: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1231
  .data
ARITH_ERROR_1230: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1230
  j error
  L_1231:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1226
  j L_1226
  #final label in binaryExp
  L_1226: 
  #final label in codeGenAssignmentExpression
  L_1225: 
  move $v0, $s5
  sw $v0, A_5_7_63
  move $s4, $v0
  #final label in assignmentStatement
  L_1224: 
  #final label in statem expression
  L_1223: 
  j L_1217
  #inside else
  L_1219:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1236: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_1237: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1235
  j L_1235
  #final label in binaryExp
  L_1235: 
  #jumpToAllOnlyIf
  L_1233:
  move $v0, $s4
  beqz $v0, L_1234
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1244: 
  L_1242: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1243: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1246
  .data
ARITH_ERROR_1245: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1245
  j error
  L_1246:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1241
  j L_1241
  #final label in binaryExp
  L_1241: 
  #final label in codeGenAssignmentExpression
  L_1240: 
  move $v0, $s5
  sw $v0, A_5_8_64
  move $s4, $v0
  #final label in assignmentStatement
  L_1239: 
  #final label in statem expression
  L_1238: 
  j L_1232
  #inside else
  L_1234:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1250: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1251: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1249
  j L_1249
  #final label in binaryExp
  L_1249: 
  #jumpToAllOnlyIf
  L_1248:
  move $v0, $s4
  beqz $v0, L_1247
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1258: 
  L_1256: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1257: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1260
  .data
ARITH_ERROR_1259: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1259
  j error
  L_1260:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1255
  j L_1255
  #final label in binaryExp
  L_1255: 
  #final label in codeGenAssignmentExpression
  L_1254: 
  move $v0, $s5
  sw $v0, A_5_9_65
  move $s4, $v0
  #final label in assignmentStatement
  L_1253: 
  #final label in statem expression
  L_1252: 
  #if finish label = 1247
  L_1247:
  #if finish label = 1232
  L_1232:
  #if finish label = 1217
  L_1217:
  #if finish label = 1202
  L_1202:
  #if finish label = 1187
  L_1187:
  #if finish label = 1172
  L_1172:
  #if finish label = 1157
  L_1157:
  #if finish label = 1142
  L_1142:
  #if finish label = 1127
  L_1127:
  #if finish label = 1112
  L_1112:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_1265: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_1266: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1264
  j L_1264
  #final label in binaryExp
  L_1264: 
  #final label in codeGenAssignmentExpression
  L_1263: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1262: 
  #final label in statem expression
  L_1261: 
  #whileBodyEndJump
  L_1107:
  j  L_1105
  #while finish label = 1104
  L_1104:
  j L_1095
  #inside else
  L_1097:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_1271: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_1272: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1270
  j L_1270
  #final label in binaryExp
  L_1270: 
  #jumpToAllOnlyIf
  L_1268:
  move $v0, $s4
  beqz $v0, L_1269
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_1275: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1274: 
  #final label in statem expression
  L_1273: 
  #starting while
  #start of while loop
  L_1277:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1281: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1282: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1280
  j L_1280
  #final label in binaryExp
  L_1280: 
  #jumpToAllOnlyIf
  L_1278:
  move $v0, $s4
  bnez $v0, L_1283
  j L_1276
  #whileBodyLabel
  L_1283:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1288: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_1289: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1287
  j L_1287
  #final label in binaryExp
  L_1287: 
  #jumpToAllOnlyIf
  L_1285:
  move $v0, $s4
  beqz $v0, L_1286
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1296: 
  L_1294: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1295: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1298
  .data
ARITH_ERROR_1297: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1297
  j error
  L_1298:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1293
  j L_1293
  #final label in binaryExp
  L_1293: 
  #final label in codeGenAssignmentExpression
  L_1292: 
  move $v0, $s5
  sw $v0, A_6_0_66
  move $s4, $v0
  #final label in assignmentStatement
  L_1291: 
  #final label in statem expression
  L_1290: 
  j L_1284
  #inside else
  L_1286:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1303: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_1304: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1302
  j L_1302
  #final label in binaryExp
  L_1302: 
  #jumpToAllOnlyIf
  L_1300:
  move $v0, $s4
  beqz $v0, L_1301
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1311: 
  L_1309: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1310: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1313
  .data
ARITH_ERROR_1312: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1312
  j error
  L_1313:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1308
  j L_1308
  #final label in binaryExp
  L_1308: 
  #final label in codeGenAssignmentExpression
  L_1307: 
  move $v0, $s5
  sw $v0, A_6_1_67
  move $s4, $v0
  #final label in assignmentStatement
  L_1306: 
  #final label in statem expression
  L_1305: 
  j L_1299
  #inside else
  L_1301:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1318: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_1319: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1317
  j L_1317
  #final label in binaryExp
  L_1317: 
  #jumpToAllOnlyIf
  L_1315:
  move $v0, $s4
  beqz $v0, L_1316
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1326: 
  L_1324: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1325: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1328
  .data
ARITH_ERROR_1327: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1327
  j error
  L_1328:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1323
  j L_1323
  #final label in binaryExp
  L_1323: 
  #final label in codeGenAssignmentExpression
  L_1322: 
  move $v0, $s5
  sw $v0, A_6_2_68
  move $s4, $v0
  #final label in assignmentStatement
  L_1321: 
  #final label in statem expression
  L_1320: 
  j L_1314
  #inside else
  L_1316:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1333: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_1334: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1332
  j L_1332
  #final label in binaryExp
  L_1332: 
  #jumpToAllOnlyIf
  L_1330:
  move $v0, $s4
  beqz $v0, L_1331
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1341: 
  L_1339: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1340: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1343
  .data
ARITH_ERROR_1342: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1342
  j error
  L_1343:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1338
  j L_1338
  #final label in binaryExp
  L_1338: 
  #final label in codeGenAssignmentExpression
  L_1337: 
  move $v0, $s5
  sw $v0, A_6_3_69
  move $s4, $v0
  #final label in assignmentStatement
  L_1336: 
  #final label in statem expression
  L_1335: 
  j L_1329
  #inside else
  L_1331:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1348: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_1349: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1347
  j L_1347
  #final label in binaryExp
  L_1347: 
  #jumpToAllOnlyIf
  L_1345:
  move $v0, $s4
  beqz $v0, L_1346
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1356: 
  L_1354: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1355: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1358
  .data
ARITH_ERROR_1357: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1357
  j error
  L_1358:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1353
  j L_1353
  #final label in binaryExp
  L_1353: 
  #final label in codeGenAssignmentExpression
  L_1352: 
  move $v0, $s5
  sw $v0, A_6_4_70
  move $s4, $v0
  #final label in assignmentStatement
  L_1351: 
  #final label in statem expression
  L_1350: 
  j L_1344
  #inside else
  L_1346:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1363: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_1364: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1362
  j L_1362
  #final label in binaryExp
  L_1362: 
  #jumpToAllOnlyIf
  L_1360:
  move $v0, $s4
  beqz $v0, L_1361
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1371: 
  L_1369: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1370: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1373
  .data
ARITH_ERROR_1372: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1372
  j error
  L_1373:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1368
  j L_1368
  #final label in binaryExp
  L_1368: 
  #final label in codeGenAssignmentExpression
  L_1367: 
  move $v0, $s5
  sw $v0, A_6_5_71
  move $s4, $v0
  #final label in assignmentStatement
  L_1366: 
  #final label in statem expression
  L_1365: 
  j L_1359
  #inside else
  L_1361:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1378: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_1379: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1377
  j L_1377
  #final label in binaryExp
  L_1377: 
  #jumpToAllOnlyIf
  L_1375:
  move $v0, $s4
  beqz $v0, L_1376
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1386: 
  L_1384: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1385: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1388
  .data
ARITH_ERROR_1387: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1387
  j error
  L_1388:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1383
  j L_1383
  #final label in binaryExp
  L_1383: 
  #final label in codeGenAssignmentExpression
  L_1382: 
  move $v0, $s5
  sw $v0, A_6_6_72
  move $s4, $v0
  #final label in assignmentStatement
  L_1381: 
  #final label in statem expression
  L_1380: 
  j L_1374
  #inside else
  L_1376:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1393: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_1394: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1392
  j L_1392
  #final label in binaryExp
  L_1392: 
  #jumpToAllOnlyIf
  L_1390:
  move $v0, $s4
  beqz $v0, L_1391
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1401: 
  L_1399: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1400: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1403
  .data
ARITH_ERROR_1402: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1402
  j error
  L_1403:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1398
  j L_1398
  #final label in binaryExp
  L_1398: 
  #final label in codeGenAssignmentExpression
  L_1397: 
  move $v0, $s5
  sw $v0, A_6_7_73
  move $s4, $v0
  #final label in assignmentStatement
  L_1396: 
  #final label in statem expression
  L_1395: 
  j L_1389
  #inside else
  L_1391:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1408: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_1409: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1407
  j L_1407
  #final label in binaryExp
  L_1407: 
  #jumpToAllOnlyIf
  L_1405:
  move $v0, $s4
  beqz $v0, L_1406
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1416: 
  L_1414: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1415: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1418
  .data
ARITH_ERROR_1417: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1417
  j error
  L_1418:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1413
  j L_1413
  #final label in binaryExp
  L_1413: 
  #final label in codeGenAssignmentExpression
  L_1412: 
  move $v0, $s5
  sw $v0, A_6_8_74
  move $s4, $v0
  #final label in assignmentStatement
  L_1411: 
  #final label in statem expression
  L_1410: 
  j L_1404
  #inside else
  L_1406:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1422: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1423: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1421
  j L_1421
  #final label in binaryExp
  L_1421: 
  #jumpToAllOnlyIf
  L_1420:
  move $v0, $s4
  beqz $v0, L_1419
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1430: 
  L_1428: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1429: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1432
  .data
ARITH_ERROR_1431: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1431
  j error
  L_1432:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1427
  j L_1427
  #final label in binaryExp
  L_1427: 
  #final label in codeGenAssignmentExpression
  L_1426: 
  move $v0, $s5
  sw $v0, A_6_9_75
  move $s4, $v0
  #final label in assignmentStatement
  L_1425: 
  #final label in statem expression
  L_1424: 
  #if finish label = 1419
  L_1419:
  #if finish label = 1404
  L_1404:
  #if finish label = 1389
  L_1389:
  #if finish label = 1374
  L_1374:
  #if finish label = 1359
  L_1359:
  #if finish label = 1344
  L_1344:
  #if finish label = 1329
  L_1329:
  #if finish label = 1314
  L_1314:
  #if finish label = 1299
  L_1299:
  #if finish label = 1284
  L_1284:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_1437: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_1438: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1436
  j L_1436
  #final label in binaryExp
  L_1436: 
  #final label in codeGenAssignmentExpression
  L_1435: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1434: 
  #final label in statem expression
  L_1433: 
  #whileBodyEndJump
  L_1279:
  j  L_1277
  #while finish label = 1276
  L_1276:
  j L_1267
  #inside else
  L_1269:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_1443: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_1444: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1442
  j L_1442
  #final label in binaryExp
  L_1442: 
  #jumpToAllOnlyIf
  L_1440:
  move $v0, $s4
  beqz $v0, L_1441
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_1447: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1446: 
  #final label in statem expression
  L_1445: 
  #starting while
  #start of while loop
  L_1449:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1453: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1454: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1452
  j L_1452
  #final label in binaryExp
  L_1452: 
  #jumpToAllOnlyIf
  L_1450:
  move $v0, $s4
  bnez $v0, L_1455
  j L_1448
  #whileBodyLabel
  L_1455:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1460: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_1461: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1459
  j L_1459
  #final label in binaryExp
  L_1459: 
  #jumpToAllOnlyIf
  L_1457:
  move $v0, $s4
  beqz $v0, L_1458
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1468: 
  L_1466: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1467: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1470
  .data
ARITH_ERROR_1469: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1469
  j error
  L_1470:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1465
  j L_1465
  #final label in binaryExp
  L_1465: 
  #final label in codeGenAssignmentExpression
  L_1464: 
  move $v0, $s5
  sw $v0, A_7_0_76
  move $s4, $v0
  #final label in assignmentStatement
  L_1463: 
  #final label in statem expression
  L_1462: 
  j L_1456
  #inside else
  L_1458:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1475: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_1476: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1474
  j L_1474
  #final label in binaryExp
  L_1474: 
  #jumpToAllOnlyIf
  L_1472:
  move $v0, $s4
  beqz $v0, L_1473
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1483: 
  L_1481: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1482: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1485
  .data
ARITH_ERROR_1484: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1484
  j error
  L_1485:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1480
  j L_1480
  #final label in binaryExp
  L_1480: 
  #final label in codeGenAssignmentExpression
  L_1479: 
  move $v0, $s5
  sw $v0, A_7_1_77
  move $s4, $v0
  #final label in assignmentStatement
  L_1478: 
  #final label in statem expression
  L_1477: 
  j L_1471
  #inside else
  L_1473:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1490: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_1491: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1489
  j L_1489
  #final label in binaryExp
  L_1489: 
  #jumpToAllOnlyIf
  L_1487:
  move $v0, $s4
  beqz $v0, L_1488
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1498: 
  L_1496: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1497: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1500
  .data
ARITH_ERROR_1499: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1499
  j error
  L_1500:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1495
  j L_1495
  #final label in binaryExp
  L_1495: 
  #final label in codeGenAssignmentExpression
  L_1494: 
  move $v0, $s5
  sw $v0, A_7_2_78
  move $s4, $v0
  #final label in assignmentStatement
  L_1493: 
  #final label in statem expression
  L_1492: 
  j L_1486
  #inside else
  L_1488:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1505: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_1506: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1504
  j L_1504
  #final label in binaryExp
  L_1504: 
  #jumpToAllOnlyIf
  L_1502:
  move $v0, $s4
  beqz $v0, L_1503
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1513: 
  L_1511: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1512: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1515
  .data
ARITH_ERROR_1514: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1514
  j error
  L_1515:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1510
  j L_1510
  #final label in binaryExp
  L_1510: 
  #final label in codeGenAssignmentExpression
  L_1509: 
  move $v0, $s5
  sw $v0, A_7_3_79
  move $s4, $v0
  #final label in assignmentStatement
  L_1508: 
  #final label in statem expression
  L_1507: 
  j L_1501
  #inside else
  L_1503:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1520: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_1521: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1519
  j L_1519
  #final label in binaryExp
  L_1519: 
  #jumpToAllOnlyIf
  L_1517:
  move $v0, $s4
  beqz $v0, L_1518
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1528: 
  L_1526: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1527: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1530
  .data
ARITH_ERROR_1529: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1529
  j error
  L_1530:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1525
  j L_1525
  #final label in binaryExp
  L_1525: 
  #final label in codeGenAssignmentExpression
  L_1524: 
  move $v0, $s5
  sw $v0, A_7_4_80
  move $s4, $v0
  #final label in assignmentStatement
  L_1523: 
  #final label in statem expression
  L_1522: 
  j L_1516
  #inside else
  L_1518:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1535: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_1536: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1534
  j L_1534
  #final label in binaryExp
  L_1534: 
  #jumpToAllOnlyIf
  L_1532:
  move $v0, $s4
  beqz $v0, L_1533
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1543: 
  L_1541: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1542: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1545
  .data
ARITH_ERROR_1544: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1544
  j error
  L_1545:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1540
  j L_1540
  #final label in binaryExp
  L_1540: 
  #final label in codeGenAssignmentExpression
  L_1539: 
  move $v0, $s5
  sw $v0, A_7_5_81
  move $s4, $v0
  #final label in assignmentStatement
  L_1538: 
  #final label in statem expression
  L_1537: 
  j L_1531
  #inside else
  L_1533:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1550: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_1551: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1549
  j L_1549
  #final label in binaryExp
  L_1549: 
  #jumpToAllOnlyIf
  L_1547:
  move $v0, $s4
  beqz $v0, L_1548
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1558: 
  L_1556: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1557: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1560
  .data
ARITH_ERROR_1559: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1559
  j error
  L_1560:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1555
  j L_1555
  #final label in binaryExp
  L_1555: 
  #final label in codeGenAssignmentExpression
  L_1554: 
  move $v0, $s5
  sw $v0, A_7_6_82
  move $s4, $v0
  #final label in assignmentStatement
  L_1553: 
  #final label in statem expression
  L_1552: 
  j L_1546
  #inside else
  L_1548:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1565: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_1566: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1564
  j L_1564
  #final label in binaryExp
  L_1564: 
  #jumpToAllOnlyIf
  L_1562:
  move $v0, $s4
  beqz $v0, L_1563
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1573: 
  L_1571: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1572: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1575
  .data
ARITH_ERROR_1574: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1574
  j error
  L_1575:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1570
  j L_1570
  #final label in binaryExp
  L_1570: 
  #final label in codeGenAssignmentExpression
  L_1569: 
  move $v0, $s5
  sw $v0, A_7_7_83
  move $s4, $v0
  #final label in assignmentStatement
  L_1568: 
  #final label in statem expression
  L_1567: 
  j L_1561
  #inside else
  L_1563:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1580: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_1581: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1579
  j L_1579
  #final label in binaryExp
  L_1579: 
  #jumpToAllOnlyIf
  L_1577:
  move $v0, $s4
  beqz $v0, L_1578
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1588: 
  L_1586: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1587: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1590
  .data
ARITH_ERROR_1589: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1589
  j error
  L_1590:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1585
  j L_1585
  #final label in binaryExp
  L_1585: 
  #final label in codeGenAssignmentExpression
  L_1584: 
  move $v0, $s5
  sw $v0, A_7_8_84
  move $s4, $v0
  #final label in assignmentStatement
  L_1583: 
  #final label in statem expression
  L_1582: 
  j L_1576
  #inside else
  L_1578:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1594: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1595: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1593
  j L_1593
  #final label in binaryExp
  L_1593: 
  #jumpToAllOnlyIf
  L_1592:
  move $v0, $s4
  beqz $v0, L_1591
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1602: 
  L_1600: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1601: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1604
  .data
ARITH_ERROR_1603: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1603
  j error
  L_1604:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1599
  j L_1599
  #final label in binaryExp
  L_1599: 
  #final label in codeGenAssignmentExpression
  L_1598: 
  move $v0, $s5
  sw $v0, A_7_9_85
  move $s4, $v0
  #final label in assignmentStatement
  L_1597: 
  #final label in statem expression
  L_1596: 
  #if finish label = 1591
  L_1591:
  #if finish label = 1576
  L_1576:
  #if finish label = 1561
  L_1561:
  #if finish label = 1546
  L_1546:
  #if finish label = 1531
  L_1531:
  #if finish label = 1516
  L_1516:
  #if finish label = 1501
  L_1501:
  #if finish label = 1486
  L_1486:
  #if finish label = 1471
  L_1471:
  #if finish label = 1456
  L_1456:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_1609: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_1610: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1608
  j L_1608
  #final label in binaryExp
  L_1608: 
  #final label in codeGenAssignmentExpression
  L_1607: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1606: 
  #final label in statem expression
  L_1605: 
  #whileBodyEndJump
  L_1451:
  j  L_1449
  #while finish label = 1448
  L_1448:
  j L_1439
  #inside else
  L_1441:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_1615: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_1616: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1614
  j L_1614
  #final label in binaryExp
  L_1614: 
  #jumpToAllOnlyIf
  L_1612:
  move $v0, $s4
  beqz $v0, L_1613
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_1619: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1618: 
  #final label in statem expression
  L_1617: 
  #starting while
  #start of while loop
  L_1621:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1625: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1626: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1624
  j L_1624
  #final label in binaryExp
  L_1624: 
  #jumpToAllOnlyIf
  L_1622:
  move $v0, $s4
  bnez $v0, L_1627
  j L_1620
  #whileBodyLabel
  L_1627:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1632: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_1633: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1631
  j L_1631
  #final label in binaryExp
  L_1631: 
  #jumpToAllOnlyIf
  L_1629:
  move $v0, $s4
  beqz $v0, L_1630
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1640: 
  L_1638: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1639: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1642
  .data
ARITH_ERROR_1641: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1641
  j error
  L_1642:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1637
  j L_1637
  #final label in binaryExp
  L_1637: 
  #final label in codeGenAssignmentExpression
  L_1636: 
  move $v0, $s5
  sw $v0, A_8_0_86
  move $s4, $v0
  #final label in assignmentStatement
  L_1635: 
  #final label in statem expression
  L_1634: 
  j L_1628
  #inside else
  L_1630:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1647: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_1648: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1646
  j L_1646
  #final label in binaryExp
  L_1646: 
  #jumpToAllOnlyIf
  L_1644:
  move $v0, $s4
  beqz $v0, L_1645
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1655: 
  L_1653: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1654: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1657
  .data
ARITH_ERROR_1656: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1656
  j error
  L_1657:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1652
  j L_1652
  #final label in binaryExp
  L_1652: 
  #final label in codeGenAssignmentExpression
  L_1651: 
  move $v0, $s5
  sw $v0, A_8_1_87
  move $s4, $v0
  #final label in assignmentStatement
  L_1650: 
  #final label in statem expression
  L_1649: 
  j L_1643
  #inside else
  L_1645:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1662: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_1663: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1661
  j L_1661
  #final label in binaryExp
  L_1661: 
  #jumpToAllOnlyIf
  L_1659:
  move $v0, $s4
  beqz $v0, L_1660
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1670: 
  L_1668: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1669: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1672
  .data
ARITH_ERROR_1671: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1671
  j error
  L_1672:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1667
  j L_1667
  #final label in binaryExp
  L_1667: 
  #final label in codeGenAssignmentExpression
  L_1666: 
  move $v0, $s5
  sw $v0, A_8_2_88
  move $s4, $v0
  #final label in assignmentStatement
  L_1665: 
  #final label in statem expression
  L_1664: 
  j L_1658
  #inside else
  L_1660:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1677: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_1678: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1676
  j L_1676
  #final label in binaryExp
  L_1676: 
  #jumpToAllOnlyIf
  L_1674:
  move $v0, $s4
  beqz $v0, L_1675
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1685: 
  L_1683: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1684: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1687
  .data
ARITH_ERROR_1686: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1686
  j error
  L_1687:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1682
  j L_1682
  #final label in binaryExp
  L_1682: 
  #final label in codeGenAssignmentExpression
  L_1681: 
  move $v0, $s5
  sw $v0, A_8_3_89
  move $s4, $v0
  #final label in assignmentStatement
  L_1680: 
  #final label in statem expression
  L_1679: 
  j L_1673
  #inside else
  L_1675:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1692: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_1693: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1691
  j L_1691
  #final label in binaryExp
  L_1691: 
  #jumpToAllOnlyIf
  L_1689:
  move $v0, $s4
  beqz $v0, L_1690
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1700: 
  L_1698: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1699: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1702
  .data
ARITH_ERROR_1701: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1701
  j error
  L_1702:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1697
  j L_1697
  #final label in binaryExp
  L_1697: 
  #final label in codeGenAssignmentExpression
  L_1696: 
  move $v0, $s5
  sw $v0, A_8_4_90
  move $s4, $v0
  #final label in assignmentStatement
  L_1695: 
  #final label in statem expression
  L_1694: 
  j L_1688
  #inside else
  L_1690:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1707: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_1708: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1706
  j L_1706
  #final label in binaryExp
  L_1706: 
  #jumpToAllOnlyIf
  L_1704:
  move $v0, $s4
  beqz $v0, L_1705
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1715: 
  L_1713: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1714: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1717
  .data
ARITH_ERROR_1716: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1716
  j error
  L_1717:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1712
  j L_1712
  #final label in binaryExp
  L_1712: 
  #final label in codeGenAssignmentExpression
  L_1711: 
  move $v0, $s5
  sw $v0, A_8_5_91
  move $s4, $v0
  #final label in assignmentStatement
  L_1710: 
  #final label in statem expression
  L_1709: 
  j L_1703
  #inside else
  L_1705:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1722: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_1723: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1721
  j L_1721
  #final label in binaryExp
  L_1721: 
  #jumpToAllOnlyIf
  L_1719:
  move $v0, $s4
  beqz $v0, L_1720
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1730: 
  L_1728: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1729: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1732
  .data
ARITH_ERROR_1731: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1731
  j error
  L_1732:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1727
  j L_1727
  #final label in binaryExp
  L_1727: 
  #final label in codeGenAssignmentExpression
  L_1726: 
  move $v0, $s5
  sw $v0, A_8_6_92
  move $s4, $v0
  #final label in assignmentStatement
  L_1725: 
  #final label in statem expression
  L_1724: 
  j L_1718
  #inside else
  L_1720:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1737: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_1738: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1736
  j L_1736
  #final label in binaryExp
  L_1736: 
  #jumpToAllOnlyIf
  L_1734:
  move $v0, $s4
  beqz $v0, L_1735
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1745: 
  L_1743: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1744: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1747
  .data
ARITH_ERROR_1746: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1746
  j error
  L_1747:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1742
  j L_1742
  #final label in binaryExp
  L_1742: 
  #final label in codeGenAssignmentExpression
  L_1741: 
  move $v0, $s5
  sw $v0, A_8_7_93
  move $s4, $v0
  #final label in assignmentStatement
  L_1740: 
  #final label in statem expression
  L_1739: 
  j L_1733
  #inside else
  L_1735:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1752: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_1753: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1751
  j L_1751
  #final label in binaryExp
  L_1751: 
  #jumpToAllOnlyIf
  L_1749:
  move $v0, $s4
  beqz $v0, L_1750
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1760: 
  L_1758: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1759: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1762
  .data
ARITH_ERROR_1761: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1761
  j error
  L_1762:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1757
  j L_1757
  #final label in binaryExp
  L_1757: 
  #final label in codeGenAssignmentExpression
  L_1756: 
  move $v0, $s5
  sw $v0, A_8_8_94
  move $s4, $v0
  #final label in assignmentStatement
  L_1755: 
  #final label in statem expression
  L_1754: 
  j L_1748
  #inside else
  L_1750:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1766: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1767: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1765
  j L_1765
  #final label in binaryExp
  L_1765: 
  #jumpToAllOnlyIf
  L_1764:
  move $v0, $s4
  beqz $v0, L_1763
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1774: 
  L_1772: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1773: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1776
  .data
ARITH_ERROR_1775: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1775
  j error
  L_1776:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1771
  j L_1771
  #final label in binaryExp
  L_1771: 
  #final label in codeGenAssignmentExpression
  L_1770: 
  move $v0, $s5
  sw $v0, A_8_9_95
  move $s4, $v0
  #final label in assignmentStatement
  L_1769: 
  #final label in statem expression
  L_1768: 
  #if finish label = 1763
  L_1763:
  #if finish label = 1748
  L_1748:
  #if finish label = 1733
  L_1733:
  #if finish label = 1718
  L_1718:
  #if finish label = 1703
  L_1703:
  #if finish label = 1688
  L_1688:
  #if finish label = 1673
  L_1673:
  #if finish label = 1658
  L_1658:
  #if finish label = 1643
  L_1643:
  #if finish label = 1628
  L_1628:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_1781: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_1782: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1780
  j L_1780
  #final label in binaryExp
  L_1780: 
  #final label in codeGenAssignmentExpression
  L_1779: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1778: 
  #final label in statem expression
  L_1777: 
  #whileBodyEndJump
  L_1623:
  j  L_1621
  #while finish label = 1620
  L_1620:
  j L_1611
  #inside else
  L_1613:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_1786: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1787: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1785
  j L_1785
  #final label in binaryExp
  L_1785: 
  #jumpToAllOnlyIf
  L_1784:
  move $v0, $s4
  beqz $v0, L_1783
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_1790: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1789: 
  #final label in statem expression
  L_1788: 
  #starting while
  #start of while loop
  L_1792:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1796: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1797: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1795
  j L_1795
  #final label in binaryExp
  L_1795: 
  #jumpToAllOnlyIf
  L_1793:
  move $v0, $s4
  bnez $v0, L_1798
  j L_1791
  #whileBodyLabel
  L_1798:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1803: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_1804: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1802
  j L_1802
  #final label in binaryExp
  L_1802: 
  #jumpToAllOnlyIf
  L_1800:
  move $v0, $s4
  beqz $v0, L_1801
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1811: 
  L_1809: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1810: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1813
  .data
ARITH_ERROR_1812: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1812
  j error
  L_1813:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1808
  j L_1808
  #final label in binaryExp
  L_1808: 
  #final label in codeGenAssignmentExpression
  L_1807: 
  move $v0, $s5
  sw $v0, A_9_0_96
  move $s4, $v0
  #final label in assignmentStatement
  L_1806: 
  #final label in statem expression
  L_1805: 
  j L_1799
  #inside else
  L_1801:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1818: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_1819: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1817
  j L_1817
  #final label in binaryExp
  L_1817: 
  #jumpToAllOnlyIf
  L_1815:
  move $v0, $s4
  beqz $v0, L_1816
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1826: 
  L_1824: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1825: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1828
  .data
ARITH_ERROR_1827: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1827
  j error
  L_1828:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1823
  j L_1823
  #final label in binaryExp
  L_1823: 
  #final label in codeGenAssignmentExpression
  L_1822: 
  move $v0, $s5
  sw $v0, A_9_1_97
  move $s4, $v0
  #final label in assignmentStatement
  L_1821: 
  #final label in statem expression
  L_1820: 
  j L_1814
  #inside else
  L_1816:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1833: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_1834: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1832
  j L_1832
  #final label in binaryExp
  L_1832: 
  #jumpToAllOnlyIf
  L_1830:
  move $v0, $s4
  beqz $v0, L_1831
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1841: 
  L_1839: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1840: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1843
  .data
ARITH_ERROR_1842: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1842
  j error
  L_1843:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1838
  j L_1838
  #final label in binaryExp
  L_1838: 
  #final label in codeGenAssignmentExpression
  L_1837: 
  move $v0, $s5
  sw $v0, A_9_2_98
  move $s4, $v0
  #final label in assignmentStatement
  L_1836: 
  #final label in statem expression
  L_1835: 
  j L_1829
  #inside else
  L_1831:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1848: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_1849: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1847
  j L_1847
  #final label in binaryExp
  L_1847: 
  #jumpToAllOnlyIf
  L_1845:
  move $v0, $s4
  beqz $v0, L_1846
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1856: 
  L_1854: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1855: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1858
  .data
ARITH_ERROR_1857: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1857
  j error
  L_1858:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1853
  j L_1853
  #final label in binaryExp
  L_1853: 
  #final label in codeGenAssignmentExpression
  L_1852: 
  move $v0, $s5
  sw $v0, A_9_3_99
  move $s4, $v0
  #final label in assignmentStatement
  L_1851: 
  #final label in statem expression
  L_1850: 
  j L_1844
  #inside else
  L_1846:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1863: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_1864: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1862
  j L_1862
  #final label in binaryExp
  L_1862: 
  #jumpToAllOnlyIf
  L_1860:
  move $v0, $s4
  beqz $v0, L_1861
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1871: 
  L_1869: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1870: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1873
  .data
ARITH_ERROR_1872: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1872
  j error
  L_1873:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1868
  j L_1868
  #final label in binaryExp
  L_1868: 
  #final label in codeGenAssignmentExpression
  L_1867: 
  move $v0, $s5
  sw $v0, A_9_4_100
  move $s4, $v0
  #final label in assignmentStatement
  L_1866: 
  #final label in statem expression
  L_1865: 
  j L_1859
  #inside else
  L_1861:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1878: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_1879: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1877
  j L_1877
  #final label in binaryExp
  L_1877: 
  #jumpToAllOnlyIf
  L_1875:
  move $v0, $s4
  beqz $v0, L_1876
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1886: 
  L_1884: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1885: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1888
  .data
ARITH_ERROR_1887: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1887
  j error
  L_1888:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1883
  j L_1883
  #final label in binaryExp
  L_1883: 
  #final label in codeGenAssignmentExpression
  L_1882: 
  move $v0, $s5
  sw $v0, A_9_5_101
  move $s4, $v0
  #final label in assignmentStatement
  L_1881: 
  #final label in statem expression
  L_1880: 
  j L_1874
  #inside else
  L_1876:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1893: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_1894: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1892
  j L_1892
  #final label in binaryExp
  L_1892: 
  #jumpToAllOnlyIf
  L_1890:
  move $v0, $s4
  beqz $v0, L_1891
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1901: 
  L_1899: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1900: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1903
  .data
ARITH_ERROR_1902: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1902
  j error
  L_1903:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1898
  j L_1898
  #final label in binaryExp
  L_1898: 
  #final label in codeGenAssignmentExpression
  L_1897: 
  move $v0, $s5
  sw $v0, A_9_6_102
  move $s4, $v0
  #final label in assignmentStatement
  L_1896: 
  #final label in statem expression
  L_1895: 
  j L_1889
  #inside else
  L_1891:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1908: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_1909: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1907
  j L_1907
  #final label in binaryExp
  L_1907: 
  #jumpToAllOnlyIf
  L_1905:
  move $v0, $s4
  beqz $v0, L_1906
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1916: 
  L_1914: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1915: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1918
  .data
ARITH_ERROR_1917: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1917
  j error
  L_1918:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1913
  j L_1913
  #final label in binaryExp
  L_1913: 
  #final label in codeGenAssignmentExpression
  L_1912: 
  move $v0, $s5
  sw $v0, A_9_7_103
  move $s4, $v0
  #final label in assignmentStatement
  L_1911: 
  #final label in statem expression
  L_1910: 
  j L_1904
  #inside else
  L_1906:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1923: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_1924: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1922
  j L_1922
  #final label in binaryExp
  L_1922: 
  #jumpToAllOnlyIf
  L_1920:
  move $v0, $s4
  beqz $v0, L_1921
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1931: 
  L_1929: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1930: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1933
  .data
ARITH_ERROR_1932: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1932
  j error
  L_1933:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1928
  j L_1928
  #final label in binaryExp
  L_1928: 
  #final label in codeGenAssignmentExpression
  L_1927: 
  move $v0, $s5
  sw $v0, A_9_8_104
  move $s4, $v0
  #final label in assignmentStatement
  L_1926: 
  #final label in statem expression
  L_1925: 
  j L_1919
  #inside else
  L_1921:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1937: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1938: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1936
  j L_1936
  #final label in binaryExp
  L_1936: 
  #jumpToAllOnlyIf
  L_1935:
  move $v0, $s4
  beqz $v0, L_1934
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal morerandom_210
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s6
  move $s6, $v0
  #final label in funcInvStatement
  L_1945: 
  L_1943: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_1944: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  bnez $v1, L_1947
  .data
ARITH_ERROR_1946: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_1946
  j error
  L_1947:
  rem $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1942
  j L_1942
  #final label in binaryExp
  L_1942: 
  #final label in codeGenAssignmentExpression
  L_1941: 
  move $v0, $s5
  sw $v0, A_9_9_105
  move $s4, $v0
  #final label in assignmentStatement
  L_1940: 
  #final label in statem expression
  L_1939: 
  #if finish label = 1934
  L_1934:
  #if finish label = 1919
  L_1919:
  #if finish label = 1904
  L_1904:
  #if finish label = 1889
  L_1889:
  #if finish label = 1874
  L_1874:
  #if finish label = 1859
  L_1859:
  #if finish label = 1844
  L_1844:
  #if finish label = 1829
  L_1829:
  #if finish label = 1814
  L_1814:
  #if finish label = 1799
  L_1799:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_1952: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_1953: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1951
  j L_1951
  #final label in binaryExp
  L_1951: 
  #final label in codeGenAssignmentExpression
  L_1950: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1949: 
  #final label in statem expression
  L_1948: 
  #whileBodyEndJump
  L_1794:
  j  L_1792
  #while finish label = 1791
  L_1791:
  #if finish label = 1783
  L_1783:
  #if finish label = 1611
  L_1611:
  #if finish label = 1439
  L_1439:
  #if finish label = 1267
  L_1267:
  #if finish label = 1095
  L_1095:
  #if finish label = 923
  L_923:
  #if finish label = 751
  L_751:
  #if finish label = 579
  L_579:
  #if finish label = 407
  L_407:
  #if finish label = 235
  L_235:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s0
  move $s6, $v0
  L_1958: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_1959: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_1957
  j L_1957
  #final label in binaryExp
  L_1957: 
  #final label in codeGenAssignmentExpression
  L_1956: 
  move $v0, $s5
  move $s0, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1955: 
  #final label in statem expression
  L_1954: 
  #whileBodyEndJump
  L_230:
  j  L_228
  #while finish label = 227
  L_227:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_1962: 
  move $v0, $s5
  move $s2, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1961: 
  #final label in statem expression
  L_1960: 
  #starting while
  #start of while loop
  L_1964:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s2
  move $s5, $v0
  L_1968: 
  #storing literal to v0
  #reg name $s6
  li $v0, 10
  move $s6, $v0
  L_1969: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1967
  j L_1967
  #final label in binaryExp
  L_1967: 
  #jumpToAllOnlyIf
  L_1965:
  move $v0, $s4
  bnez $v0, L_1970
  j L_1963
  #whileBodyLabel
  L_1970:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_1973: 
  move $v0, $s5
  move $s0, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1972: 
  #final label in statem expression
  L_1971: 
  #starting while
  #start of while loop
  L_1975:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_1979: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1980: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1978
  j L_1978
  #final label in binaryExp
  L_1978: 
  #jumpToAllOnlyIf
  L_1976:
  move $v0, $s4
  bnez $v0, L_1981
  j L_1974
  #whileBodyLabel
  L_1981:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_1986: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_1987: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1985
  j L_1985
  #final label in binaryExp
  L_1985: 
  #jumpToAllOnlyIf
  L_1983:
  move $v0, $s4
  beqz $v0, L_1984
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_1990: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_1989: 
  #final label in statem expression
  L_1988: 
  #starting while
  #start of while loop
  L_1992:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_1996: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_1997: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_1995
  j L_1995
  #final label in binaryExp
  L_1995: 
  #jumpToAllOnlyIf
  L_1993:
  move $v0, $s4
  bnez $v0, L_1998
  j L_1991
  #whileBodyLabel
  L_1998:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2003: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_2004: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2002
  j L_2002
  #final label in binaryExp
  L_2002: 
  #jumpToAllOnlyIf
  L_2000:
  move $v0, $s4
  beqz $v0, L_2001
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2009: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2010: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2008: 
  #final label in codeGenAssignmentExpression
  L_2007: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2006: 
  #final label in statem expression
  L_2005: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_0_6
  move $s5, $v0
  L_2015: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2016: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2014
  j L_2014
  #final label in binaryExp
  L_2014: 
  #jumpToAllOnlyIf
  L_2012:
  move $v0, $s4
  beqz $v0, L_2013
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2024: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2025: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2023
  j L_2023
  #final label in binaryExp
  L_2023: 
  #T1Or
  L_2021:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2020
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2027: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2028: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2026
  j L_2026
  #final label in binaryExp
  L_2026: 
  #T2Or
  L_2022:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2020
  j L_2020
  #final label in binaryExp
  L_2020: 
  #jumpToAllOnlyIf
  L_2018:
  move $v0, $s4
  beqz $v0, L_2019
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2031: 
  move $v0, $s5
  sw $v0, T_0_0_107
  move $s4, $v0
  #final label in assignmentStatement
  L_2030: 
  #final label in statem expression
  L_2029: 
  j L_2017
  #inside else
  L_2019:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2034: 
  move $v0, $s5
  sw $v0, T_0_0_107
  move $s4, $v0
  #final label in assignmentStatement
  L_2033: 
  #final label in statem expression
  L_2032: 
  #if finish label = 2017
  L_2017:
  j L_2011
  #inside else
  L_2013:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2039: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2040: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2038
  j L_2038
  #final label in binaryExp
  L_2038: 
  #jumpToAllOnlyIf
  L_2036:
  move $v0, $s4
  beqz $v0, L_2037
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2043: 
  move $v0, $s5
  sw $v0, T_0_0_107
  move $s4, $v0
  #final label in assignmentStatement
  L_2042: 
  #final label in statem expression
  L_2041: 
  j L_2035
  #inside else
  L_2037:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2046: 
  move $v0, $s5
  sw $v0, T_0_0_107
  move $s4, $v0
  #final label in assignmentStatement
  L_2045: 
  #final label in statem expression
  L_2044: 
  #if finish label = 2035
  L_2035:
  #if finish label = 2011
  L_2011:
  j L_1999
  #inside else
  L_2001:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2051: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2052: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2050
  j L_2050
  #final label in binaryExp
  L_2050: 
  #jumpToAllOnlyIf
  L_2048:
  move $v0, $s4
  beqz $v0, L_2049
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2057: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2058: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2056: 
  #final label in codeGenAssignmentExpression
  L_2055: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2054: 
  #final label in statem expression
  L_2053: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_1_7
  move $s5, $v0
  L_2063: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2064: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2062
  j L_2062
  #final label in binaryExp
  L_2062: 
  #jumpToAllOnlyIf
  L_2060:
  move $v0, $s4
  beqz $v0, L_2061
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2072: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2073: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2071
  j L_2071
  #final label in binaryExp
  L_2071: 
  #T1Or
  L_2069:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2068
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2075: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2076: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2074
  j L_2074
  #final label in binaryExp
  L_2074: 
  #T2Or
  L_2070:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2068
  j L_2068
  #final label in binaryExp
  L_2068: 
  #jumpToAllOnlyIf
  L_2066:
  move $v0, $s4
  beqz $v0, L_2067
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2079: 
  move $v0, $s5
  sw $v0, T_0_1_108
  move $s4, $v0
  #final label in assignmentStatement
  L_2078: 
  #final label in statem expression
  L_2077: 
  j L_2065
  #inside else
  L_2067:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2082: 
  move $v0, $s5
  sw $v0, T_0_1_108
  move $s4, $v0
  #final label in assignmentStatement
  L_2081: 
  #final label in statem expression
  L_2080: 
  #if finish label = 2065
  L_2065:
  j L_2059
  #inside else
  L_2061:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2087: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2088: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2086
  j L_2086
  #final label in binaryExp
  L_2086: 
  #jumpToAllOnlyIf
  L_2084:
  move $v0, $s4
  beqz $v0, L_2085
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2091: 
  move $v0, $s5
  sw $v0, T_0_1_108
  move $s4, $v0
  #final label in assignmentStatement
  L_2090: 
  #final label in statem expression
  L_2089: 
  j L_2083
  #inside else
  L_2085:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2094: 
  move $v0, $s5
  sw $v0, T_0_1_108
  move $s4, $v0
  #final label in assignmentStatement
  L_2093: 
  #final label in statem expression
  L_2092: 
  #if finish label = 2083
  L_2083:
  #if finish label = 2059
  L_2059:
  j L_2047
  #inside else
  L_2049:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2099: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_2100: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2098
  j L_2098
  #final label in binaryExp
  L_2098: 
  #jumpToAllOnlyIf
  L_2096:
  move $v0, $s4
  beqz $v0, L_2097
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2105: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2106: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2104: 
  #final label in codeGenAssignmentExpression
  L_2103: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2102: 
  #final label in statem expression
  L_2101: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_2_8
  move $s5, $v0
  L_2111: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2112: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2110
  j L_2110
  #final label in binaryExp
  L_2110: 
  #jumpToAllOnlyIf
  L_2108:
  move $v0, $s4
  beqz $v0, L_2109
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2120: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2121: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2119
  j L_2119
  #final label in binaryExp
  L_2119: 
  #T1Or
  L_2117:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2116
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2123: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2124: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2122
  j L_2122
  #final label in binaryExp
  L_2122: 
  #T2Or
  L_2118:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2116
  j L_2116
  #final label in binaryExp
  L_2116: 
  #jumpToAllOnlyIf
  L_2114:
  move $v0, $s4
  beqz $v0, L_2115
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2127: 
  move $v0, $s5
  sw $v0, T_0_2_109
  move $s4, $v0
  #final label in assignmentStatement
  L_2126: 
  #final label in statem expression
  L_2125: 
  j L_2113
  #inside else
  L_2115:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2130: 
  move $v0, $s5
  sw $v0, T_0_2_109
  move $s4, $v0
  #final label in assignmentStatement
  L_2129: 
  #final label in statem expression
  L_2128: 
  #if finish label = 2113
  L_2113:
  j L_2107
  #inside else
  L_2109:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2135: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2136: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2134
  j L_2134
  #final label in binaryExp
  L_2134: 
  #jumpToAllOnlyIf
  L_2132:
  move $v0, $s4
  beqz $v0, L_2133
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2139: 
  move $v0, $s5
  sw $v0, T_0_2_109
  move $s4, $v0
  #final label in assignmentStatement
  L_2138: 
  #final label in statem expression
  L_2137: 
  j L_2131
  #inside else
  L_2133:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2142: 
  move $v0, $s5
  sw $v0, T_0_2_109
  move $s4, $v0
  #final label in assignmentStatement
  L_2141: 
  #final label in statem expression
  L_2140: 
  #if finish label = 2131
  L_2131:
  #if finish label = 2107
  L_2107:
  j L_2095
  #inside else
  L_2097:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2147: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2148: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2146
  j L_2146
  #final label in binaryExp
  L_2146: 
  #jumpToAllOnlyIf
  L_2144:
  move $v0, $s4
  beqz $v0, L_2145
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2153: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2154: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2152: 
  #final label in codeGenAssignmentExpression
  L_2151: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2150: 
  #final label in statem expression
  L_2149: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_3_9
  move $s5, $v0
  L_2159: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2160: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2158
  j L_2158
  #final label in binaryExp
  L_2158: 
  #jumpToAllOnlyIf
  L_2156:
  move $v0, $s4
  beqz $v0, L_2157
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2168: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2169: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2167
  j L_2167
  #final label in binaryExp
  L_2167: 
  #T1Or
  L_2165:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2164
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2171: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2172: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2170
  j L_2170
  #final label in binaryExp
  L_2170: 
  #T2Or
  L_2166:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2164
  j L_2164
  #final label in binaryExp
  L_2164: 
  #jumpToAllOnlyIf
  L_2162:
  move $v0, $s4
  beqz $v0, L_2163
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2175: 
  move $v0, $s5
  sw $v0, T_0_3_110
  move $s4, $v0
  #final label in assignmentStatement
  L_2174: 
  #final label in statem expression
  L_2173: 
  j L_2161
  #inside else
  L_2163:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2178: 
  move $v0, $s5
  sw $v0, T_0_3_110
  move $s4, $v0
  #final label in assignmentStatement
  L_2177: 
  #final label in statem expression
  L_2176: 
  #if finish label = 2161
  L_2161:
  j L_2155
  #inside else
  L_2157:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2183: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2184: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2182
  j L_2182
  #final label in binaryExp
  L_2182: 
  #jumpToAllOnlyIf
  L_2180:
  move $v0, $s4
  beqz $v0, L_2181
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2187: 
  move $v0, $s5
  sw $v0, T_0_3_110
  move $s4, $v0
  #final label in assignmentStatement
  L_2186: 
  #final label in statem expression
  L_2185: 
  j L_2179
  #inside else
  L_2181:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2190: 
  move $v0, $s5
  sw $v0, T_0_3_110
  move $s4, $v0
  #final label in assignmentStatement
  L_2189: 
  #final label in statem expression
  L_2188: 
  #if finish label = 2179
  L_2179:
  #if finish label = 2155
  L_2155:
  j L_2143
  #inside else
  L_2145:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2195: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_2196: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2194
  j L_2194
  #final label in binaryExp
  L_2194: 
  #jumpToAllOnlyIf
  L_2192:
  move $v0, $s4
  beqz $v0, L_2193
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2201: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2202: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2200: 
  #final label in codeGenAssignmentExpression
  L_2199: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2198: 
  #final label in statem expression
  L_2197: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_4_10
  move $s5, $v0
  L_2207: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2208: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2206
  j L_2206
  #final label in binaryExp
  L_2206: 
  #jumpToAllOnlyIf
  L_2204:
  move $v0, $s4
  beqz $v0, L_2205
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2216: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2217: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2215
  j L_2215
  #final label in binaryExp
  L_2215: 
  #T1Or
  L_2213:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2212
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2219: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2220: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2218
  j L_2218
  #final label in binaryExp
  L_2218: 
  #T2Or
  L_2214:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2212
  j L_2212
  #final label in binaryExp
  L_2212: 
  #jumpToAllOnlyIf
  L_2210:
  move $v0, $s4
  beqz $v0, L_2211
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2223: 
  move $v0, $s5
  sw $v0, T_0_4_111
  move $s4, $v0
  #final label in assignmentStatement
  L_2222: 
  #final label in statem expression
  L_2221: 
  j L_2209
  #inside else
  L_2211:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2226: 
  move $v0, $s5
  sw $v0, T_0_4_111
  move $s4, $v0
  #final label in assignmentStatement
  L_2225: 
  #final label in statem expression
  L_2224: 
  #if finish label = 2209
  L_2209:
  j L_2203
  #inside else
  L_2205:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2231: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2232: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2230
  j L_2230
  #final label in binaryExp
  L_2230: 
  #jumpToAllOnlyIf
  L_2228:
  move $v0, $s4
  beqz $v0, L_2229
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2235: 
  move $v0, $s5
  sw $v0, T_0_4_111
  move $s4, $v0
  #final label in assignmentStatement
  L_2234: 
  #final label in statem expression
  L_2233: 
  j L_2227
  #inside else
  L_2229:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2238: 
  move $v0, $s5
  sw $v0, T_0_4_111
  move $s4, $v0
  #final label in assignmentStatement
  L_2237: 
  #final label in statem expression
  L_2236: 
  #if finish label = 2227
  L_2227:
  #if finish label = 2203
  L_2203:
  j L_2191
  #inside else
  L_2193:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2243: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_2244: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2242
  j L_2242
  #final label in binaryExp
  L_2242: 
  #jumpToAllOnlyIf
  L_2240:
  move $v0, $s4
  beqz $v0, L_2241
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2249: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2250: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2248: 
  #final label in codeGenAssignmentExpression
  L_2247: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2246: 
  #final label in statem expression
  L_2245: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_5_11
  move $s5, $v0
  L_2255: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2256: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2254
  j L_2254
  #final label in binaryExp
  L_2254: 
  #jumpToAllOnlyIf
  L_2252:
  move $v0, $s4
  beqz $v0, L_2253
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2264: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2265: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2263
  j L_2263
  #final label in binaryExp
  L_2263: 
  #T1Or
  L_2261:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2260
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2267: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2268: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2266
  j L_2266
  #final label in binaryExp
  L_2266: 
  #T2Or
  L_2262:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2260
  j L_2260
  #final label in binaryExp
  L_2260: 
  #jumpToAllOnlyIf
  L_2258:
  move $v0, $s4
  beqz $v0, L_2259
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2271: 
  move $v0, $s5
  sw $v0, T_0_5_112
  move $s4, $v0
  #final label in assignmentStatement
  L_2270: 
  #final label in statem expression
  L_2269: 
  j L_2257
  #inside else
  L_2259:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2274: 
  move $v0, $s5
  sw $v0, T_0_5_112
  move $s4, $v0
  #final label in assignmentStatement
  L_2273: 
  #final label in statem expression
  L_2272: 
  #if finish label = 2257
  L_2257:
  j L_2251
  #inside else
  L_2253:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2279: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2280: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2278
  j L_2278
  #final label in binaryExp
  L_2278: 
  #jumpToAllOnlyIf
  L_2276:
  move $v0, $s4
  beqz $v0, L_2277
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2283: 
  move $v0, $s5
  sw $v0, T_0_5_112
  move $s4, $v0
  #final label in assignmentStatement
  L_2282: 
  #final label in statem expression
  L_2281: 
  j L_2275
  #inside else
  L_2277:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2286: 
  move $v0, $s5
  sw $v0, T_0_5_112
  move $s4, $v0
  #final label in assignmentStatement
  L_2285: 
  #final label in statem expression
  L_2284: 
  #if finish label = 2275
  L_2275:
  #if finish label = 2251
  L_2251:
  j L_2239
  #inside else
  L_2241:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2291: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_2292: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2290
  j L_2290
  #final label in binaryExp
  L_2290: 
  #jumpToAllOnlyIf
  L_2288:
  move $v0, $s4
  beqz $v0, L_2289
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2297: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2298: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2296: 
  #final label in codeGenAssignmentExpression
  L_2295: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2294: 
  #final label in statem expression
  L_2293: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_6_12
  move $s5, $v0
  L_2303: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2304: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2302
  j L_2302
  #final label in binaryExp
  L_2302: 
  #jumpToAllOnlyIf
  L_2300:
  move $v0, $s4
  beqz $v0, L_2301
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2312: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2313: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2311
  j L_2311
  #final label in binaryExp
  L_2311: 
  #T1Or
  L_2309:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2308
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2315: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2316: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2314
  j L_2314
  #final label in binaryExp
  L_2314: 
  #T2Or
  L_2310:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2308
  j L_2308
  #final label in binaryExp
  L_2308: 
  #jumpToAllOnlyIf
  L_2306:
  move $v0, $s4
  beqz $v0, L_2307
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2319: 
  move $v0, $s5
  sw $v0, T_0_6_113
  move $s4, $v0
  #final label in assignmentStatement
  L_2318: 
  #final label in statem expression
  L_2317: 
  j L_2305
  #inside else
  L_2307:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2322: 
  move $v0, $s5
  sw $v0, T_0_6_113
  move $s4, $v0
  #final label in assignmentStatement
  L_2321: 
  #final label in statem expression
  L_2320: 
  #if finish label = 2305
  L_2305:
  j L_2299
  #inside else
  L_2301:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2327: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2328: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2326
  j L_2326
  #final label in binaryExp
  L_2326: 
  #jumpToAllOnlyIf
  L_2324:
  move $v0, $s4
  beqz $v0, L_2325
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2331: 
  move $v0, $s5
  sw $v0, T_0_6_113
  move $s4, $v0
  #final label in assignmentStatement
  L_2330: 
  #final label in statem expression
  L_2329: 
  j L_2323
  #inside else
  L_2325:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2334: 
  move $v0, $s5
  sw $v0, T_0_6_113
  move $s4, $v0
  #final label in assignmentStatement
  L_2333: 
  #final label in statem expression
  L_2332: 
  #if finish label = 2323
  L_2323:
  #if finish label = 2299
  L_2299:
  j L_2287
  #inside else
  L_2289:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2339: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_2340: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2338
  j L_2338
  #final label in binaryExp
  L_2338: 
  #jumpToAllOnlyIf
  L_2336:
  move $v0, $s4
  beqz $v0, L_2337
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2345: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2346: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2344: 
  #final label in codeGenAssignmentExpression
  L_2343: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2342: 
  #final label in statem expression
  L_2341: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_7_13
  move $s5, $v0
  L_2351: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2352: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2350
  j L_2350
  #final label in binaryExp
  L_2350: 
  #jumpToAllOnlyIf
  L_2348:
  move $v0, $s4
  beqz $v0, L_2349
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2360: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2361: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2359
  j L_2359
  #final label in binaryExp
  L_2359: 
  #T1Or
  L_2357:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2356
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2363: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2364: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2362
  j L_2362
  #final label in binaryExp
  L_2362: 
  #T2Or
  L_2358:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2356
  j L_2356
  #final label in binaryExp
  L_2356: 
  #jumpToAllOnlyIf
  L_2354:
  move $v0, $s4
  beqz $v0, L_2355
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2367: 
  move $v0, $s5
  sw $v0, T_0_7_114
  move $s4, $v0
  #final label in assignmentStatement
  L_2366: 
  #final label in statem expression
  L_2365: 
  j L_2353
  #inside else
  L_2355:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2370: 
  move $v0, $s5
  sw $v0, T_0_7_114
  move $s4, $v0
  #final label in assignmentStatement
  L_2369: 
  #final label in statem expression
  L_2368: 
  #if finish label = 2353
  L_2353:
  j L_2347
  #inside else
  L_2349:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2375: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2376: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2374
  j L_2374
  #final label in binaryExp
  L_2374: 
  #jumpToAllOnlyIf
  L_2372:
  move $v0, $s4
  beqz $v0, L_2373
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2379: 
  move $v0, $s5
  sw $v0, T_0_7_114
  move $s4, $v0
  #final label in assignmentStatement
  L_2378: 
  #final label in statem expression
  L_2377: 
  j L_2371
  #inside else
  L_2373:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2382: 
  move $v0, $s5
  sw $v0, T_0_7_114
  move $s4, $v0
  #final label in assignmentStatement
  L_2381: 
  #final label in statem expression
  L_2380: 
  #if finish label = 2371
  L_2371:
  #if finish label = 2347
  L_2347:
  j L_2335
  #inside else
  L_2337:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2387: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_2388: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2386
  j L_2386
  #final label in binaryExp
  L_2386: 
  #jumpToAllOnlyIf
  L_2384:
  move $v0, $s4
  beqz $v0, L_2385
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2393: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2394: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2392: 
  #final label in codeGenAssignmentExpression
  L_2391: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2390: 
  #final label in statem expression
  L_2389: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_8_14
  move $s5, $v0
  L_2399: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2400: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2398
  j L_2398
  #final label in binaryExp
  L_2398: 
  #jumpToAllOnlyIf
  L_2396:
  move $v0, $s4
  beqz $v0, L_2397
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2408: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2409: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2407
  j L_2407
  #final label in binaryExp
  L_2407: 
  #T1Or
  L_2405:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2404
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2411: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2412: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2410
  j L_2410
  #final label in binaryExp
  L_2410: 
  #T2Or
  L_2406:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2404
  j L_2404
  #final label in binaryExp
  L_2404: 
  #jumpToAllOnlyIf
  L_2402:
  move $v0, $s4
  beqz $v0, L_2403
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2415: 
  move $v0, $s5
  sw $v0, T_0_8_115
  move $s4, $v0
  #final label in assignmentStatement
  L_2414: 
  #final label in statem expression
  L_2413: 
  j L_2401
  #inside else
  L_2403:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2418: 
  move $v0, $s5
  sw $v0, T_0_8_115
  move $s4, $v0
  #final label in assignmentStatement
  L_2417: 
  #final label in statem expression
  L_2416: 
  #if finish label = 2401
  L_2401:
  j L_2395
  #inside else
  L_2397:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2423: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2424: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2422
  j L_2422
  #final label in binaryExp
  L_2422: 
  #jumpToAllOnlyIf
  L_2420:
  move $v0, $s4
  beqz $v0, L_2421
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2427: 
  move $v0, $s5
  sw $v0, T_0_8_115
  move $s4, $v0
  #final label in assignmentStatement
  L_2426: 
  #final label in statem expression
  L_2425: 
  j L_2419
  #inside else
  L_2421:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2430: 
  move $v0, $s5
  sw $v0, T_0_8_115
  move $s4, $v0
  #final label in assignmentStatement
  L_2429: 
  #final label in statem expression
  L_2428: 
  #if finish label = 2419
  L_2419:
  #if finish label = 2395
  L_2395:
  j L_2383
  #inside else
  L_2385:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2434: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_2435: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2433
  j L_2433
  #final label in binaryExp
  L_2433: 
  #jumpToAllOnlyIf
  L_2432:
  move $v0, $s4
  beqz $v0, L_2431
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2440: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2441: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2439: 
  #final label in codeGenAssignmentExpression
  L_2438: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2437: 
  #final label in statem expression
  L_2436: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_0_9_15
  move $s5, $v0
  L_2446: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2447: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2445
  j L_2445
  #final label in binaryExp
  L_2445: 
  #jumpToAllOnlyIf
  L_2443:
  move $v0, $s4
  beqz $v0, L_2444
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2455: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2456: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2454
  j L_2454
  #final label in binaryExp
  L_2454: 
  #T1Or
  L_2452:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2451
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2458: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2459: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2457
  j L_2457
  #final label in binaryExp
  L_2457: 
  #T2Or
  L_2453:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2451
  j L_2451
  #final label in binaryExp
  L_2451: 
  #jumpToAllOnlyIf
  L_2449:
  move $v0, $s4
  beqz $v0, L_2450
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2462: 
  move $v0, $s5
  sw $v0, T_0_9_116
  move $s4, $v0
  #final label in assignmentStatement
  L_2461: 
  #final label in statem expression
  L_2460: 
  j L_2448
  #inside else
  L_2450:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2465: 
  move $v0, $s5
  sw $v0, T_0_9_116
  move $s4, $v0
  #final label in assignmentStatement
  L_2464: 
  #final label in statem expression
  L_2463: 
  #if finish label = 2448
  L_2448:
  j L_2442
  #inside else
  L_2444:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2470: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2471: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2469
  j L_2469
  #final label in binaryExp
  L_2469: 
  #jumpToAllOnlyIf
  L_2467:
  move $v0, $s4
  beqz $v0, L_2468
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2474: 
  move $v0, $s5
  sw $v0, T_0_9_116
  move $s4, $v0
  #final label in assignmentStatement
  L_2473: 
  #final label in statem expression
  L_2472: 
  j L_2466
  #inside else
  L_2468:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2477: 
  move $v0, $s5
  sw $v0, T_0_9_116
  move $s4, $v0
  #final label in assignmentStatement
  L_2476: 
  #final label in statem expression
  L_2475: 
  #if finish label = 2466
  L_2466:
  #if finish label = 2442
  L_2442:
  #if finish label = 2431
  L_2431:
  #if finish label = 2383
  L_2383:
  #if finish label = 2335
  L_2335:
  #if finish label = 2287
  L_2287:
  #if finish label = 2239
  L_2239:
  #if finish label = 2191
  L_2191:
  #if finish label = 2143
  L_2143:
  #if finish label = 2095
  L_2095:
  #if finish label = 2047
  L_2047:
  #if finish label = 1999
  L_1999:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_2482: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_2483: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2481
  j L_2481
  #final label in binaryExp
  L_2481: 
  #final label in codeGenAssignmentExpression
  L_2480: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2479: 
  #final label in statem expression
  L_2478: 
  #whileBodyEndJump
  L_1994:
  j  L_1992
  #while finish label = 1991
  L_1991:
  j L_1982
  #inside else
  L_1984:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_2488: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2489: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2487
  j L_2487
  #final label in binaryExp
  L_2487: 
  #jumpToAllOnlyIf
  L_2485:
  move $v0, $s4
  beqz $v0, L_2486
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2492: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2491: 
  #final label in statem expression
  L_2490: 
  #starting while
  #start of while loop
  L_2494:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2498: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_2499: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2497
  j L_2497
  #final label in binaryExp
  L_2497: 
  #jumpToAllOnlyIf
  L_2495:
  move $v0, $s4
  bnez $v0, L_2500
  j L_2493
  #whileBodyLabel
  L_2500:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2505: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_2506: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2504
  j L_2504
  #final label in binaryExp
  L_2504: 
  #jumpToAllOnlyIf
  L_2502:
  move $v0, $s4
  beqz $v0, L_2503
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2511: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2512: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2510: 
  #final label in codeGenAssignmentExpression
  L_2509: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2508: 
  #final label in statem expression
  L_2507: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_0_16
  move $s5, $v0
  L_2517: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2518: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2516
  j L_2516
  #final label in binaryExp
  L_2516: 
  #jumpToAllOnlyIf
  L_2514:
  move $v0, $s4
  beqz $v0, L_2515
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2526: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2527: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2525
  j L_2525
  #final label in binaryExp
  L_2525: 
  #T1Or
  L_2523:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2522
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2529: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2530: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2528
  j L_2528
  #final label in binaryExp
  L_2528: 
  #T2Or
  L_2524:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2522
  j L_2522
  #final label in binaryExp
  L_2522: 
  #jumpToAllOnlyIf
  L_2520:
  move $v0, $s4
  beqz $v0, L_2521
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2533: 
  move $v0, $s5
  sw $v0, T_1_0_117
  move $s4, $v0
  #final label in assignmentStatement
  L_2532: 
  #final label in statem expression
  L_2531: 
  j L_2519
  #inside else
  L_2521:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2536: 
  move $v0, $s5
  sw $v0, T_1_0_117
  move $s4, $v0
  #final label in assignmentStatement
  L_2535: 
  #final label in statem expression
  L_2534: 
  #if finish label = 2519
  L_2519:
  j L_2513
  #inside else
  L_2515:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2541: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2542: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2540
  j L_2540
  #final label in binaryExp
  L_2540: 
  #jumpToAllOnlyIf
  L_2538:
  move $v0, $s4
  beqz $v0, L_2539
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2545: 
  move $v0, $s5
  sw $v0, T_1_0_117
  move $s4, $v0
  #final label in assignmentStatement
  L_2544: 
  #final label in statem expression
  L_2543: 
  j L_2537
  #inside else
  L_2539:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2548: 
  move $v0, $s5
  sw $v0, T_1_0_117
  move $s4, $v0
  #final label in assignmentStatement
  L_2547: 
  #final label in statem expression
  L_2546: 
  #if finish label = 2537
  L_2537:
  #if finish label = 2513
  L_2513:
  j L_2501
  #inside else
  L_2503:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2553: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2554: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2552
  j L_2552
  #final label in binaryExp
  L_2552: 
  #jumpToAllOnlyIf
  L_2550:
  move $v0, $s4
  beqz $v0, L_2551
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2559: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2560: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2558: 
  #final label in codeGenAssignmentExpression
  L_2557: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2556: 
  #final label in statem expression
  L_2555: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_1_17
  move $s5, $v0
  L_2565: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2566: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2564
  j L_2564
  #final label in binaryExp
  L_2564: 
  #jumpToAllOnlyIf
  L_2562:
  move $v0, $s4
  beqz $v0, L_2563
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2574: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2575: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2573
  j L_2573
  #final label in binaryExp
  L_2573: 
  #T1Or
  L_2571:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2570
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2577: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2578: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2576
  j L_2576
  #final label in binaryExp
  L_2576: 
  #T2Or
  L_2572:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2570
  j L_2570
  #final label in binaryExp
  L_2570: 
  #jumpToAllOnlyIf
  L_2568:
  move $v0, $s4
  beqz $v0, L_2569
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2581: 
  move $v0, $s5
  sw $v0, T_1_1_118
  move $s4, $v0
  #final label in assignmentStatement
  L_2580: 
  #final label in statem expression
  L_2579: 
  j L_2567
  #inside else
  L_2569:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2584: 
  move $v0, $s5
  sw $v0, T_1_1_118
  move $s4, $v0
  #final label in assignmentStatement
  L_2583: 
  #final label in statem expression
  L_2582: 
  #if finish label = 2567
  L_2567:
  j L_2561
  #inside else
  L_2563:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2589: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2590: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2588
  j L_2588
  #final label in binaryExp
  L_2588: 
  #jumpToAllOnlyIf
  L_2586:
  move $v0, $s4
  beqz $v0, L_2587
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2593: 
  move $v0, $s5
  sw $v0, T_1_1_118
  move $s4, $v0
  #final label in assignmentStatement
  L_2592: 
  #final label in statem expression
  L_2591: 
  j L_2585
  #inside else
  L_2587:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2596: 
  move $v0, $s5
  sw $v0, T_1_1_118
  move $s4, $v0
  #final label in assignmentStatement
  L_2595: 
  #final label in statem expression
  L_2594: 
  #if finish label = 2585
  L_2585:
  #if finish label = 2561
  L_2561:
  j L_2549
  #inside else
  L_2551:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2601: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_2602: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2600
  j L_2600
  #final label in binaryExp
  L_2600: 
  #jumpToAllOnlyIf
  L_2598:
  move $v0, $s4
  beqz $v0, L_2599
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2607: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2608: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2606: 
  #final label in codeGenAssignmentExpression
  L_2605: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2604: 
  #final label in statem expression
  L_2603: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_2_18
  move $s5, $v0
  L_2613: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2614: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2612
  j L_2612
  #final label in binaryExp
  L_2612: 
  #jumpToAllOnlyIf
  L_2610:
  move $v0, $s4
  beqz $v0, L_2611
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2622: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2623: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2621
  j L_2621
  #final label in binaryExp
  L_2621: 
  #T1Or
  L_2619:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2618
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2625: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2626: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2624
  j L_2624
  #final label in binaryExp
  L_2624: 
  #T2Or
  L_2620:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2618
  j L_2618
  #final label in binaryExp
  L_2618: 
  #jumpToAllOnlyIf
  L_2616:
  move $v0, $s4
  beqz $v0, L_2617
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2629: 
  move $v0, $s5
  sw $v0, T_1_2_119
  move $s4, $v0
  #final label in assignmentStatement
  L_2628: 
  #final label in statem expression
  L_2627: 
  j L_2615
  #inside else
  L_2617:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2632: 
  move $v0, $s5
  sw $v0, T_1_2_119
  move $s4, $v0
  #final label in assignmentStatement
  L_2631: 
  #final label in statem expression
  L_2630: 
  #if finish label = 2615
  L_2615:
  j L_2609
  #inside else
  L_2611:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2637: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2638: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2636
  j L_2636
  #final label in binaryExp
  L_2636: 
  #jumpToAllOnlyIf
  L_2634:
  move $v0, $s4
  beqz $v0, L_2635
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2641: 
  move $v0, $s5
  sw $v0, T_1_2_119
  move $s4, $v0
  #final label in assignmentStatement
  L_2640: 
  #final label in statem expression
  L_2639: 
  j L_2633
  #inside else
  L_2635:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2644: 
  move $v0, $s5
  sw $v0, T_1_2_119
  move $s4, $v0
  #final label in assignmentStatement
  L_2643: 
  #final label in statem expression
  L_2642: 
  #if finish label = 2633
  L_2633:
  #if finish label = 2609
  L_2609:
  j L_2597
  #inside else
  L_2599:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2649: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2650: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2648
  j L_2648
  #final label in binaryExp
  L_2648: 
  #jumpToAllOnlyIf
  L_2646:
  move $v0, $s4
  beqz $v0, L_2647
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2655: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2656: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2654: 
  #final label in codeGenAssignmentExpression
  L_2653: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2652: 
  #final label in statem expression
  L_2651: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_3_19
  move $s5, $v0
  L_2661: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2662: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2660
  j L_2660
  #final label in binaryExp
  L_2660: 
  #jumpToAllOnlyIf
  L_2658:
  move $v0, $s4
  beqz $v0, L_2659
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2670: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2671: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2669
  j L_2669
  #final label in binaryExp
  L_2669: 
  #T1Or
  L_2667:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2666
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2673: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2674: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2672
  j L_2672
  #final label in binaryExp
  L_2672: 
  #T2Or
  L_2668:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2666
  j L_2666
  #final label in binaryExp
  L_2666: 
  #jumpToAllOnlyIf
  L_2664:
  move $v0, $s4
  beqz $v0, L_2665
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2677: 
  move $v0, $s5
  sw $v0, T_1_3_120
  move $s4, $v0
  #final label in assignmentStatement
  L_2676: 
  #final label in statem expression
  L_2675: 
  j L_2663
  #inside else
  L_2665:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2680: 
  move $v0, $s5
  sw $v0, T_1_3_120
  move $s4, $v0
  #final label in assignmentStatement
  L_2679: 
  #final label in statem expression
  L_2678: 
  #if finish label = 2663
  L_2663:
  j L_2657
  #inside else
  L_2659:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2685: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2686: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2684
  j L_2684
  #final label in binaryExp
  L_2684: 
  #jumpToAllOnlyIf
  L_2682:
  move $v0, $s4
  beqz $v0, L_2683
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2689: 
  move $v0, $s5
  sw $v0, T_1_3_120
  move $s4, $v0
  #final label in assignmentStatement
  L_2688: 
  #final label in statem expression
  L_2687: 
  j L_2681
  #inside else
  L_2683:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2692: 
  move $v0, $s5
  sw $v0, T_1_3_120
  move $s4, $v0
  #final label in assignmentStatement
  L_2691: 
  #final label in statem expression
  L_2690: 
  #if finish label = 2681
  L_2681:
  #if finish label = 2657
  L_2657:
  j L_2645
  #inside else
  L_2647:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2697: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_2698: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2696
  j L_2696
  #final label in binaryExp
  L_2696: 
  #jumpToAllOnlyIf
  L_2694:
  move $v0, $s4
  beqz $v0, L_2695
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2703: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2704: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2702: 
  #final label in codeGenAssignmentExpression
  L_2701: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2700: 
  #final label in statem expression
  L_2699: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_4_20
  move $s5, $v0
  L_2709: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2710: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2708
  j L_2708
  #final label in binaryExp
  L_2708: 
  #jumpToAllOnlyIf
  L_2706:
  move $v0, $s4
  beqz $v0, L_2707
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2718: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2719: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2717
  j L_2717
  #final label in binaryExp
  L_2717: 
  #T1Or
  L_2715:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2714
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2721: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2722: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2720
  j L_2720
  #final label in binaryExp
  L_2720: 
  #T2Or
  L_2716:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2714
  j L_2714
  #final label in binaryExp
  L_2714: 
  #jumpToAllOnlyIf
  L_2712:
  move $v0, $s4
  beqz $v0, L_2713
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2725: 
  move $v0, $s5
  sw $v0, T_1_4_121
  move $s4, $v0
  #final label in assignmentStatement
  L_2724: 
  #final label in statem expression
  L_2723: 
  j L_2711
  #inside else
  L_2713:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2728: 
  move $v0, $s5
  sw $v0, T_1_4_121
  move $s4, $v0
  #final label in assignmentStatement
  L_2727: 
  #final label in statem expression
  L_2726: 
  #if finish label = 2711
  L_2711:
  j L_2705
  #inside else
  L_2707:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2733: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2734: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2732
  j L_2732
  #final label in binaryExp
  L_2732: 
  #jumpToAllOnlyIf
  L_2730:
  move $v0, $s4
  beqz $v0, L_2731
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2737: 
  move $v0, $s5
  sw $v0, T_1_4_121
  move $s4, $v0
  #final label in assignmentStatement
  L_2736: 
  #final label in statem expression
  L_2735: 
  j L_2729
  #inside else
  L_2731:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2740: 
  move $v0, $s5
  sw $v0, T_1_4_121
  move $s4, $v0
  #final label in assignmentStatement
  L_2739: 
  #final label in statem expression
  L_2738: 
  #if finish label = 2729
  L_2729:
  #if finish label = 2705
  L_2705:
  j L_2693
  #inside else
  L_2695:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2745: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_2746: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2744
  j L_2744
  #final label in binaryExp
  L_2744: 
  #jumpToAllOnlyIf
  L_2742:
  move $v0, $s4
  beqz $v0, L_2743
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2751: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2752: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2750: 
  #final label in codeGenAssignmentExpression
  L_2749: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2748: 
  #final label in statem expression
  L_2747: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_5_21
  move $s5, $v0
  L_2757: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2758: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2756
  j L_2756
  #final label in binaryExp
  L_2756: 
  #jumpToAllOnlyIf
  L_2754:
  move $v0, $s4
  beqz $v0, L_2755
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2766: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2767: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2765
  j L_2765
  #final label in binaryExp
  L_2765: 
  #T1Or
  L_2763:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2762
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2769: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2770: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2768
  j L_2768
  #final label in binaryExp
  L_2768: 
  #T2Or
  L_2764:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2762
  j L_2762
  #final label in binaryExp
  L_2762: 
  #jumpToAllOnlyIf
  L_2760:
  move $v0, $s4
  beqz $v0, L_2761
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2773: 
  move $v0, $s5
  sw $v0, T_1_5_122
  move $s4, $v0
  #final label in assignmentStatement
  L_2772: 
  #final label in statem expression
  L_2771: 
  j L_2759
  #inside else
  L_2761:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2776: 
  move $v0, $s5
  sw $v0, T_1_5_122
  move $s4, $v0
  #final label in assignmentStatement
  L_2775: 
  #final label in statem expression
  L_2774: 
  #if finish label = 2759
  L_2759:
  j L_2753
  #inside else
  L_2755:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2781: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2782: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2780
  j L_2780
  #final label in binaryExp
  L_2780: 
  #jumpToAllOnlyIf
  L_2778:
  move $v0, $s4
  beqz $v0, L_2779
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2785: 
  move $v0, $s5
  sw $v0, T_1_5_122
  move $s4, $v0
  #final label in assignmentStatement
  L_2784: 
  #final label in statem expression
  L_2783: 
  j L_2777
  #inside else
  L_2779:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2788: 
  move $v0, $s5
  sw $v0, T_1_5_122
  move $s4, $v0
  #final label in assignmentStatement
  L_2787: 
  #final label in statem expression
  L_2786: 
  #if finish label = 2777
  L_2777:
  #if finish label = 2753
  L_2753:
  j L_2741
  #inside else
  L_2743:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2793: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_2794: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2792
  j L_2792
  #final label in binaryExp
  L_2792: 
  #jumpToAllOnlyIf
  L_2790:
  move $v0, $s4
  beqz $v0, L_2791
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2799: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2800: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2798: 
  #final label in codeGenAssignmentExpression
  L_2797: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2796: 
  #final label in statem expression
  L_2795: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_6_22
  move $s5, $v0
  L_2805: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2806: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2804
  j L_2804
  #final label in binaryExp
  L_2804: 
  #jumpToAllOnlyIf
  L_2802:
  move $v0, $s4
  beqz $v0, L_2803
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2814: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2815: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2813
  j L_2813
  #final label in binaryExp
  L_2813: 
  #T1Or
  L_2811:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2810
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2817: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2818: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2816
  j L_2816
  #final label in binaryExp
  L_2816: 
  #T2Or
  L_2812:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2810
  j L_2810
  #final label in binaryExp
  L_2810: 
  #jumpToAllOnlyIf
  L_2808:
  move $v0, $s4
  beqz $v0, L_2809
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2821: 
  move $v0, $s5
  sw $v0, T_1_6_123
  move $s4, $v0
  #final label in assignmentStatement
  L_2820: 
  #final label in statem expression
  L_2819: 
  j L_2807
  #inside else
  L_2809:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2824: 
  move $v0, $s5
  sw $v0, T_1_6_123
  move $s4, $v0
  #final label in assignmentStatement
  L_2823: 
  #final label in statem expression
  L_2822: 
  #if finish label = 2807
  L_2807:
  j L_2801
  #inside else
  L_2803:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2829: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2830: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2828
  j L_2828
  #final label in binaryExp
  L_2828: 
  #jumpToAllOnlyIf
  L_2826:
  move $v0, $s4
  beqz $v0, L_2827
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2833: 
  move $v0, $s5
  sw $v0, T_1_6_123
  move $s4, $v0
  #final label in assignmentStatement
  L_2832: 
  #final label in statem expression
  L_2831: 
  j L_2825
  #inside else
  L_2827:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2836: 
  move $v0, $s5
  sw $v0, T_1_6_123
  move $s4, $v0
  #final label in assignmentStatement
  L_2835: 
  #final label in statem expression
  L_2834: 
  #if finish label = 2825
  L_2825:
  #if finish label = 2801
  L_2801:
  j L_2789
  #inside else
  L_2791:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2841: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_2842: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2840
  j L_2840
  #final label in binaryExp
  L_2840: 
  #jumpToAllOnlyIf
  L_2838:
  move $v0, $s4
  beqz $v0, L_2839
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2847: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2848: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2846: 
  #final label in codeGenAssignmentExpression
  L_2845: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2844: 
  #final label in statem expression
  L_2843: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_7_23
  move $s5, $v0
  L_2853: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2854: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2852
  j L_2852
  #final label in binaryExp
  L_2852: 
  #jumpToAllOnlyIf
  L_2850:
  move $v0, $s4
  beqz $v0, L_2851
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2862: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2863: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2861
  j L_2861
  #final label in binaryExp
  L_2861: 
  #T1Or
  L_2859:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2858
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2865: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2866: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2864
  j L_2864
  #final label in binaryExp
  L_2864: 
  #T2Or
  L_2860:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2858
  j L_2858
  #final label in binaryExp
  L_2858: 
  #jumpToAllOnlyIf
  L_2856:
  move $v0, $s4
  beqz $v0, L_2857
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2869: 
  move $v0, $s5
  sw $v0, T_1_7_124
  move $s4, $v0
  #final label in assignmentStatement
  L_2868: 
  #final label in statem expression
  L_2867: 
  j L_2855
  #inside else
  L_2857:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2872: 
  move $v0, $s5
  sw $v0, T_1_7_124
  move $s4, $v0
  #final label in assignmentStatement
  L_2871: 
  #final label in statem expression
  L_2870: 
  #if finish label = 2855
  L_2855:
  j L_2849
  #inside else
  L_2851:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2877: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2878: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2876
  j L_2876
  #final label in binaryExp
  L_2876: 
  #jumpToAllOnlyIf
  L_2874:
  move $v0, $s4
  beqz $v0, L_2875
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2881: 
  move $v0, $s5
  sw $v0, T_1_7_124
  move $s4, $v0
  #final label in assignmentStatement
  L_2880: 
  #final label in statem expression
  L_2879: 
  j L_2873
  #inside else
  L_2875:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2884: 
  move $v0, $s5
  sw $v0, T_1_7_124
  move $s4, $v0
  #final label in assignmentStatement
  L_2883: 
  #final label in statem expression
  L_2882: 
  #if finish label = 2873
  L_2873:
  #if finish label = 2849
  L_2849:
  j L_2837
  #inside else
  L_2839:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2889: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_2890: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2888
  j L_2888
  #final label in binaryExp
  L_2888: 
  #jumpToAllOnlyIf
  L_2886:
  move $v0, $s4
  beqz $v0, L_2887
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2895: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2896: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2894: 
  #final label in codeGenAssignmentExpression
  L_2893: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2892: 
  #final label in statem expression
  L_2891: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_8_24
  move $s5, $v0
  L_2901: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2902: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2900
  j L_2900
  #final label in binaryExp
  L_2900: 
  #jumpToAllOnlyIf
  L_2898:
  move $v0, $s4
  beqz $v0, L_2899
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2910: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2911: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2909
  j L_2909
  #final label in binaryExp
  L_2909: 
  #T1Or
  L_2907:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2906
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2913: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2914: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2912
  j L_2912
  #final label in binaryExp
  L_2912: 
  #T2Or
  L_2908:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2906
  j L_2906
  #final label in binaryExp
  L_2906: 
  #jumpToAllOnlyIf
  L_2904:
  move $v0, $s4
  beqz $v0, L_2905
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2917: 
  move $v0, $s5
  sw $v0, T_1_8_125
  move $s4, $v0
  #final label in assignmentStatement
  L_2916: 
  #final label in statem expression
  L_2915: 
  j L_2903
  #inside else
  L_2905:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2920: 
  move $v0, $s5
  sw $v0, T_1_8_125
  move $s4, $v0
  #final label in assignmentStatement
  L_2919: 
  #final label in statem expression
  L_2918: 
  #if finish label = 2903
  L_2903:
  j L_2897
  #inside else
  L_2899:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2925: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2926: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2924
  j L_2924
  #final label in binaryExp
  L_2924: 
  #jumpToAllOnlyIf
  L_2922:
  move $v0, $s4
  beqz $v0, L_2923
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2929: 
  move $v0, $s5
  sw $v0, T_1_8_125
  move $s4, $v0
  #final label in assignmentStatement
  L_2928: 
  #final label in statem expression
  L_2927: 
  j L_2921
  #inside else
  L_2923:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2932: 
  move $v0, $s5
  sw $v0, T_1_8_125
  move $s4, $v0
  #final label in assignmentStatement
  L_2931: 
  #final label in statem expression
  L_2930: 
  #if finish label = 2921
  L_2921:
  #if finish label = 2897
  L_2897:
  j L_2885
  #inside else
  L_2887:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_2936: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_2937: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2935
  j L_2935
  #final label in binaryExp
  L_2935: 
  #jumpToAllOnlyIf
  L_2934:
  move $v0, $s4
  beqz $v0, L_2933
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_2942: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_2943: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_2941: 
  #final label in codeGenAssignmentExpression
  L_2940: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2939: 
  #final label in statem expression
  L_2938: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_1_9_25
  move $s5, $v0
  L_2948: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_2949: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2947
  j L_2947
  #final label in binaryExp
  L_2947: 
  #jumpToAllOnlyIf
  L_2945:
  move $v0, $s4
  beqz $v0, L_2946
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2957: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_2958: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2956
  j L_2956
  #final label in binaryExp
  L_2956: 
  #T1Or
  L_2954:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2953
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_2960: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_2961: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2959
  j L_2959
  #final label in binaryExp
  L_2959: 
  #T2Or
  L_2955:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_2953
  j L_2953
  #final label in binaryExp
  L_2953: 
  #jumpToAllOnlyIf
  L_2951:
  move $v0, $s4
  beqz $v0, L_2952
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2964: 
  move $v0, $s5
  sw $v0, T_1_9_126
  move $s4, $v0
  #final label in assignmentStatement
  L_2963: 
  #final label in statem expression
  L_2962: 
  j L_2950
  #inside else
  L_2952:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2967: 
  move $v0, $s5
  sw $v0, T_1_9_126
  move $s4, $v0
  #final label in assignmentStatement
  L_2966: 
  #final label in statem expression
  L_2965: 
  #if finish label = 2950
  L_2950:
  j L_2944
  #inside else
  L_2946:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_2972: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_2973: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2971
  j L_2971
  #final label in binaryExp
  L_2971: 
  #jumpToAllOnlyIf
  L_2969:
  move $v0, $s4
  beqz $v0, L_2970
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2976: 
  move $v0, $s5
  sw $v0, T_1_9_126
  move $s4, $v0
  #final label in assignmentStatement
  L_2975: 
  #final label in statem expression
  L_2974: 
  j L_2968
  #inside else
  L_2970:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2979: 
  move $v0, $s5
  sw $v0, T_1_9_126
  move $s4, $v0
  #final label in assignmentStatement
  L_2978: 
  #final label in statem expression
  L_2977: 
  #if finish label = 2968
  L_2968:
  #if finish label = 2944
  L_2944:
  #if finish label = 2933
  L_2933:
  #if finish label = 2885
  L_2885:
  #if finish label = 2837
  L_2837:
  #if finish label = 2789
  L_2789:
  #if finish label = 2741
  L_2741:
  #if finish label = 2693
  L_2693:
  #if finish label = 2645
  L_2645:
  #if finish label = 2597
  L_2597:
  #if finish label = 2549
  L_2549:
  #if finish label = 2501
  L_2501:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_2984: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_2985: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_2983
  j L_2983
  #final label in binaryExp
  L_2983: 
  #final label in codeGenAssignmentExpression
  L_2982: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2981: 
  #final label in statem expression
  L_2980: 
  #whileBodyEndJump
  L_2496:
  j  L_2494
  #while finish label = 2493
  L_2493:
  j L_2484
  #inside else
  L_2486:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_2990: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_2991: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2989
  j L_2989
  #final label in binaryExp
  L_2989: 
  #jumpToAllOnlyIf
  L_2987:
  move $v0, $s4
  beqz $v0, L_2988
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_2994: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_2993: 
  #final label in statem expression
  L_2992: 
  #starting while
  #start of while loop
  L_2996:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3000: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_3001: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_2999
  j L_2999
  #final label in binaryExp
  L_2999: 
  #jumpToAllOnlyIf
  L_2997:
  move $v0, $s4
  bnez $v0, L_3002
  j L_2995
  #whileBodyLabel
  L_3002:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3007: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_3008: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3006
  j L_3006
  #final label in binaryExp
  L_3006: 
  #jumpToAllOnlyIf
  L_3004:
  move $v0, $s4
  beqz $v0, L_3005
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3013: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3014: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3012: 
  #final label in codeGenAssignmentExpression
  L_3011: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3010: 
  #final label in statem expression
  L_3009: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_0_26
  move $s5, $v0
  L_3019: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3020: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3018
  j L_3018
  #final label in binaryExp
  L_3018: 
  #jumpToAllOnlyIf
  L_3016:
  move $v0, $s4
  beqz $v0, L_3017
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3028: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3029: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3027
  j L_3027
  #final label in binaryExp
  L_3027: 
  #T1Or
  L_3025:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3024
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3031: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3032: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3030
  j L_3030
  #final label in binaryExp
  L_3030: 
  #T2Or
  L_3026:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3024
  j L_3024
  #final label in binaryExp
  L_3024: 
  #jumpToAllOnlyIf
  L_3022:
  move $v0, $s4
  beqz $v0, L_3023
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3035: 
  move $v0, $s5
  sw $v0, T_2_0_127
  move $s4, $v0
  #final label in assignmentStatement
  L_3034: 
  #final label in statem expression
  L_3033: 
  j L_3021
  #inside else
  L_3023:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3038: 
  move $v0, $s5
  sw $v0, T_2_0_127
  move $s4, $v0
  #final label in assignmentStatement
  L_3037: 
  #final label in statem expression
  L_3036: 
  #if finish label = 3021
  L_3021:
  j L_3015
  #inside else
  L_3017:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3043: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3044: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3042
  j L_3042
  #final label in binaryExp
  L_3042: 
  #jumpToAllOnlyIf
  L_3040:
  move $v0, $s4
  beqz $v0, L_3041
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3047: 
  move $v0, $s5
  sw $v0, T_2_0_127
  move $s4, $v0
  #final label in assignmentStatement
  L_3046: 
  #final label in statem expression
  L_3045: 
  j L_3039
  #inside else
  L_3041:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3050: 
  move $v0, $s5
  sw $v0, T_2_0_127
  move $s4, $v0
  #final label in assignmentStatement
  L_3049: 
  #final label in statem expression
  L_3048: 
  #if finish label = 3039
  L_3039:
  #if finish label = 3015
  L_3015:
  j L_3003
  #inside else
  L_3005:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3055: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3056: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3054
  j L_3054
  #final label in binaryExp
  L_3054: 
  #jumpToAllOnlyIf
  L_3052:
  move $v0, $s4
  beqz $v0, L_3053
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3061: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3062: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3060: 
  #final label in codeGenAssignmentExpression
  L_3059: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3058: 
  #final label in statem expression
  L_3057: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_1_27
  move $s5, $v0
  L_3067: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3068: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3066
  j L_3066
  #final label in binaryExp
  L_3066: 
  #jumpToAllOnlyIf
  L_3064:
  move $v0, $s4
  beqz $v0, L_3065
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3076: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3077: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3075
  j L_3075
  #final label in binaryExp
  L_3075: 
  #T1Or
  L_3073:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3072
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3079: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3080: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3078
  j L_3078
  #final label in binaryExp
  L_3078: 
  #T2Or
  L_3074:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3072
  j L_3072
  #final label in binaryExp
  L_3072: 
  #jumpToAllOnlyIf
  L_3070:
  move $v0, $s4
  beqz $v0, L_3071
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3083: 
  move $v0, $s5
  sw $v0, T_2_1_128
  move $s4, $v0
  #final label in assignmentStatement
  L_3082: 
  #final label in statem expression
  L_3081: 
  j L_3069
  #inside else
  L_3071:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3086: 
  move $v0, $s5
  sw $v0, T_2_1_128
  move $s4, $v0
  #final label in assignmentStatement
  L_3085: 
  #final label in statem expression
  L_3084: 
  #if finish label = 3069
  L_3069:
  j L_3063
  #inside else
  L_3065:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3091: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3092: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3090
  j L_3090
  #final label in binaryExp
  L_3090: 
  #jumpToAllOnlyIf
  L_3088:
  move $v0, $s4
  beqz $v0, L_3089
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3095: 
  move $v0, $s5
  sw $v0, T_2_1_128
  move $s4, $v0
  #final label in assignmentStatement
  L_3094: 
  #final label in statem expression
  L_3093: 
  j L_3087
  #inside else
  L_3089:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3098: 
  move $v0, $s5
  sw $v0, T_2_1_128
  move $s4, $v0
  #final label in assignmentStatement
  L_3097: 
  #final label in statem expression
  L_3096: 
  #if finish label = 3087
  L_3087:
  #if finish label = 3063
  L_3063:
  j L_3051
  #inside else
  L_3053:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3103: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_3104: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3102
  j L_3102
  #final label in binaryExp
  L_3102: 
  #jumpToAllOnlyIf
  L_3100:
  move $v0, $s4
  beqz $v0, L_3101
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3109: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3110: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3108: 
  #final label in codeGenAssignmentExpression
  L_3107: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3106: 
  #final label in statem expression
  L_3105: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_2_28
  move $s5, $v0
  L_3115: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3116: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3114
  j L_3114
  #final label in binaryExp
  L_3114: 
  #jumpToAllOnlyIf
  L_3112:
  move $v0, $s4
  beqz $v0, L_3113
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3124: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3125: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3123
  j L_3123
  #final label in binaryExp
  L_3123: 
  #T1Or
  L_3121:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3120
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3127: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3128: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3126
  j L_3126
  #final label in binaryExp
  L_3126: 
  #T2Or
  L_3122:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3120
  j L_3120
  #final label in binaryExp
  L_3120: 
  #jumpToAllOnlyIf
  L_3118:
  move $v0, $s4
  beqz $v0, L_3119
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3131: 
  move $v0, $s5
  sw $v0, T_2_2_129
  move $s4, $v0
  #final label in assignmentStatement
  L_3130: 
  #final label in statem expression
  L_3129: 
  j L_3117
  #inside else
  L_3119:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3134: 
  move $v0, $s5
  sw $v0, T_2_2_129
  move $s4, $v0
  #final label in assignmentStatement
  L_3133: 
  #final label in statem expression
  L_3132: 
  #if finish label = 3117
  L_3117:
  j L_3111
  #inside else
  L_3113:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3139: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3140: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3138
  j L_3138
  #final label in binaryExp
  L_3138: 
  #jumpToAllOnlyIf
  L_3136:
  move $v0, $s4
  beqz $v0, L_3137
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3143: 
  move $v0, $s5
  sw $v0, T_2_2_129
  move $s4, $v0
  #final label in assignmentStatement
  L_3142: 
  #final label in statem expression
  L_3141: 
  j L_3135
  #inside else
  L_3137:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3146: 
  move $v0, $s5
  sw $v0, T_2_2_129
  move $s4, $v0
  #final label in assignmentStatement
  L_3145: 
  #final label in statem expression
  L_3144: 
  #if finish label = 3135
  L_3135:
  #if finish label = 3111
  L_3111:
  j L_3099
  #inside else
  L_3101:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3151: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3152: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3150
  j L_3150
  #final label in binaryExp
  L_3150: 
  #jumpToAllOnlyIf
  L_3148:
  move $v0, $s4
  beqz $v0, L_3149
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3157: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3158: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3156: 
  #final label in codeGenAssignmentExpression
  L_3155: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3154: 
  #final label in statem expression
  L_3153: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_3_29
  move $s5, $v0
  L_3163: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3164: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3162
  j L_3162
  #final label in binaryExp
  L_3162: 
  #jumpToAllOnlyIf
  L_3160:
  move $v0, $s4
  beqz $v0, L_3161
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3172: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3173: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3171
  j L_3171
  #final label in binaryExp
  L_3171: 
  #T1Or
  L_3169:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3168
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3175: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3176: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3174
  j L_3174
  #final label in binaryExp
  L_3174: 
  #T2Or
  L_3170:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3168
  j L_3168
  #final label in binaryExp
  L_3168: 
  #jumpToAllOnlyIf
  L_3166:
  move $v0, $s4
  beqz $v0, L_3167
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3179: 
  move $v0, $s5
  sw $v0, T_2_3_130
  move $s4, $v0
  #final label in assignmentStatement
  L_3178: 
  #final label in statem expression
  L_3177: 
  j L_3165
  #inside else
  L_3167:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3182: 
  move $v0, $s5
  sw $v0, T_2_3_130
  move $s4, $v0
  #final label in assignmentStatement
  L_3181: 
  #final label in statem expression
  L_3180: 
  #if finish label = 3165
  L_3165:
  j L_3159
  #inside else
  L_3161:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3187: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3188: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3186
  j L_3186
  #final label in binaryExp
  L_3186: 
  #jumpToAllOnlyIf
  L_3184:
  move $v0, $s4
  beqz $v0, L_3185
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3191: 
  move $v0, $s5
  sw $v0, T_2_3_130
  move $s4, $v0
  #final label in assignmentStatement
  L_3190: 
  #final label in statem expression
  L_3189: 
  j L_3183
  #inside else
  L_3185:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3194: 
  move $v0, $s5
  sw $v0, T_2_3_130
  move $s4, $v0
  #final label in assignmentStatement
  L_3193: 
  #final label in statem expression
  L_3192: 
  #if finish label = 3183
  L_3183:
  #if finish label = 3159
  L_3159:
  j L_3147
  #inside else
  L_3149:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3199: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_3200: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3198
  j L_3198
  #final label in binaryExp
  L_3198: 
  #jumpToAllOnlyIf
  L_3196:
  move $v0, $s4
  beqz $v0, L_3197
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3205: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3206: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3204: 
  #final label in codeGenAssignmentExpression
  L_3203: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3202: 
  #final label in statem expression
  L_3201: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_4_30
  move $s5, $v0
  L_3211: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3212: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3210
  j L_3210
  #final label in binaryExp
  L_3210: 
  #jumpToAllOnlyIf
  L_3208:
  move $v0, $s4
  beqz $v0, L_3209
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3220: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3221: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3219
  j L_3219
  #final label in binaryExp
  L_3219: 
  #T1Or
  L_3217:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3216
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3223: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3224: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3222
  j L_3222
  #final label in binaryExp
  L_3222: 
  #T2Or
  L_3218:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3216
  j L_3216
  #final label in binaryExp
  L_3216: 
  #jumpToAllOnlyIf
  L_3214:
  move $v0, $s4
  beqz $v0, L_3215
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3227: 
  move $v0, $s5
  sw $v0, T_2_4_131
  move $s4, $v0
  #final label in assignmentStatement
  L_3226: 
  #final label in statem expression
  L_3225: 
  j L_3213
  #inside else
  L_3215:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3230: 
  move $v0, $s5
  sw $v0, T_2_4_131
  move $s4, $v0
  #final label in assignmentStatement
  L_3229: 
  #final label in statem expression
  L_3228: 
  #if finish label = 3213
  L_3213:
  j L_3207
  #inside else
  L_3209:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3235: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3236: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3234
  j L_3234
  #final label in binaryExp
  L_3234: 
  #jumpToAllOnlyIf
  L_3232:
  move $v0, $s4
  beqz $v0, L_3233
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3239: 
  move $v0, $s5
  sw $v0, T_2_4_131
  move $s4, $v0
  #final label in assignmentStatement
  L_3238: 
  #final label in statem expression
  L_3237: 
  j L_3231
  #inside else
  L_3233:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3242: 
  move $v0, $s5
  sw $v0, T_2_4_131
  move $s4, $v0
  #final label in assignmentStatement
  L_3241: 
  #final label in statem expression
  L_3240: 
  #if finish label = 3231
  L_3231:
  #if finish label = 3207
  L_3207:
  j L_3195
  #inside else
  L_3197:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3247: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_3248: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3246
  j L_3246
  #final label in binaryExp
  L_3246: 
  #jumpToAllOnlyIf
  L_3244:
  move $v0, $s4
  beqz $v0, L_3245
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3253: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3254: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3252: 
  #final label in codeGenAssignmentExpression
  L_3251: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3250: 
  #final label in statem expression
  L_3249: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_5_31
  move $s5, $v0
  L_3259: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3260: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3258
  j L_3258
  #final label in binaryExp
  L_3258: 
  #jumpToAllOnlyIf
  L_3256:
  move $v0, $s4
  beqz $v0, L_3257
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3268: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3269: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3267
  j L_3267
  #final label in binaryExp
  L_3267: 
  #T1Or
  L_3265:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3264
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3271: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3272: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3270
  j L_3270
  #final label in binaryExp
  L_3270: 
  #T2Or
  L_3266:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3264
  j L_3264
  #final label in binaryExp
  L_3264: 
  #jumpToAllOnlyIf
  L_3262:
  move $v0, $s4
  beqz $v0, L_3263
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3275: 
  move $v0, $s5
  sw $v0, T_2_5_132
  move $s4, $v0
  #final label in assignmentStatement
  L_3274: 
  #final label in statem expression
  L_3273: 
  j L_3261
  #inside else
  L_3263:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3278: 
  move $v0, $s5
  sw $v0, T_2_5_132
  move $s4, $v0
  #final label in assignmentStatement
  L_3277: 
  #final label in statem expression
  L_3276: 
  #if finish label = 3261
  L_3261:
  j L_3255
  #inside else
  L_3257:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3283: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3284: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3282
  j L_3282
  #final label in binaryExp
  L_3282: 
  #jumpToAllOnlyIf
  L_3280:
  move $v0, $s4
  beqz $v0, L_3281
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3287: 
  move $v0, $s5
  sw $v0, T_2_5_132
  move $s4, $v0
  #final label in assignmentStatement
  L_3286: 
  #final label in statem expression
  L_3285: 
  j L_3279
  #inside else
  L_3281:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3290: 
  move $v0, $s5
  sw $v0, T_2_5_132
  move $s4, $v0
  #final label in assignmentStatement
  L_3289: 
  #final label in statem expression
  L_3288: 
  #if finish label = 3279
  L_3279:
  #if finish label = 3255
  L_3255:
  j L_3243
  #inside else
  L_3245:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3295: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_3296: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3294
  j L_3294
  #final label in binaryExp
  L_3294: 
  #jumpToAllOnlyIf
  L_3292:
  move $v0, $s4
  beqz $v0, L_3293
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3301: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3302: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3300: 
  #final label in codeGenAssignmentExpression
  L_3299: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3298: 
  #final label in statem expression
  L_3297: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_6_32
  move $s5, $v0
  L_3307: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3308: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3306
  j L_3306
  #final label in binaryExp
  L_3306: 
  #jumpToAllOnlyIf
  L_3304:
  move $v0, $s4
  beqz $v0, L_3305
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3316: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3317: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3315
  j L_3315
  #final label in binaryExp
  L_3315: 
  #T1Or
  L_3313:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3312
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3319: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3320: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3318
  j L_3318
  #final label in binaryExp
  L_3318: 
  #T2Or
  L_3314:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3312
  j L_3312
  #final label in binaryExp
  L_3312: 
  #jumpToAllOnlyIf
  L_3310:
  move $v0, $s4
  beqz $v0, L_3311
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3323: 
  move $v0, $s5
  sw $v0, T_2_6_133
  move $s4, $v0
  #final label in assignmentStatement
  L_3322: 
  #final label in statem expression
  L_3321: 
  j L_3309
  #inside else
  L_3311:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3326: 
  move $v0, $s5
  sw $v0, T_2_6_133
  move $s4, $v0
  #final label in assignmentStatement
  L_3325: 
  #final label in statem expression
  L_3324: 
  #if finish label = 3309
  L_3309:
  j L_3303
  #inside else
  L_3305:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3331: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3332: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3330
  j L_3330
  #final label in binaryExp
  L_3330: 
  #jumpToAllOnlyIf
  L_3328:
  move $v0, $s4
  beqz $v0, L_3329
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3335: 
  move $v0, $s5
  sw $v0, T_2_6_133
  move $s4, $v0
  #final label in assignmentStatement
  L_3334: 
  #final label in statem expression
  L_3333: 
  j L_3327
  #inside else
  L_3329:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3338: 
  move $v0, $s5
  sw $v0, T_2_6_133
  move $s4, $v0
  #final label in assignmentStatement
  L_3337: 
  #final label in statem expression
  L_3336: 
  #if finish label = 3327
  L_3327:
  #if finish label = 3303
  L_3303:
  j L_3291
  #inside else
  L_3293:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3343: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_3344: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3342
  j L_3342
  #final label in binaryExp
  L_3342: 
  #jumpToAllOnlyIf
  L_3340:
  move $v0, $s4
  beqz $v0, L_3341
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3349: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3350: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3348: 
  #final label in codeGenAssignmentExpression
  L_3347: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3346: 
  #final label in statem expression
  L_3345: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_7_33
  move $s5, $v0
  L_3355: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3356: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3354
  j L_3354
  #final label in binaryExp
  L_3354: 
  #jumpToAllOnlyIf
  L_3352:
  move $v0, $s4
  beqz $v0, L_3353
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3364: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3365: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3363
  j L_3363
  #final label in binaryExp
  L_3363: 
  #T1Or
  L_3361:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3360
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3367: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3368: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3366
  j L_3366
  #final label in binaryExp
  L_3366: 
  #T2Or
  L_3362:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3360
  j L_3360
  #final label in binaryExp
  L_3360: 
  #jumpToAllOnlyIf
  L_3358:
  move $v0, $s4
  beqz $v0, L_3359
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3371: 
  move $v0, $s5
  sw $v0, T_2_7_134
  move $s4, $v0
  #final label in assignmentStatement
  L_3370: 
  #final label in statem expression
  L_3369: 
  j L_3357
  #inside else
  L_3359:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3374: 
  move $v0, $s5
  sw $v0, T_2_7_134
  move $s4, $v0
  #final label in assignmentStatement
  L_3373: 
  #final label in statem expression
  L_3372: 
  #if finish label = 3357
  L_3357:
  j L_3351
  #inside else
  L_3353:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3379: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3380: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3378
  j L_3378
  #final label in binaryExp
  L_3378: 
  #jumpToAllOnlyIf
  L_3376:
  move $v0, $s4
  beqz $v0, L_3377
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3383: 
  move $v0, $s5
  sw $v0, T_2_7_134
  move $s4, $v0
  #final label in assignmentStatement
  L_3382: 
  #final label in statem expression
  L_3381: 
  j L_3375
  #inside else
  L_3377:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3386: 
  move $v0, $s5
  sw $v0, T_2_7_134
  move $s4, $v0
  #final label in assignmentStatement
  L_3385: 
  #final label in statem expression
  L_3384: 
  #if finish label = 3375
  L_3375:
  #if finish label = 3351
  L_3351:
  j L_3339
  #inside else
  L_3341:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3391: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_3392: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3390
  j L_3390
  #final label in binaryExp
  L_3390: 
  #jumpToAllOnlyIf
  L_3388:
  move $v0, $s4
  beqz $v0, L_3389
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3397: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3398: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3396: 
  #final label in codeGenAssignmentExpression
  L_3395: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3394: 
  #final label in statem expression
  L_3393: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_8_34
  move $s5, $v0
  L_3403: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3404: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3402
  j L_3402
  #final label in binaryExp
  L_3402: 
  #jumpToAllOnlyIf
  L_3400:
  move $v0, $s4
  beqz $v0, L_3401
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3412: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3413: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3411
  j L_3411
  #final label in binaryExp
  L_3411: 
  #T1Or
  L_3409:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3408
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3415: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3416: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3414
  j L_3414
  #final label in binaryExp
  L_3414: 
  #T2Or
  L_3410:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3408
  j L_3408
  #final label in binaryExp
  L_3408: 
  #jumpToAllOnlyIf
  L_3406:
  move $v0, $s4
  beqz $v0, L_3407
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3419: 
  move $v0, $s5
  sw $v0, T_2_8_135
  move $s4, $v0
  #final label in assignmentStatement
  L_3418: 
  #final label in statem expression
  L_3417: 
  j L_3405
  #inside else
  L_3407:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3422: 
  move $v0, $s5
  sw $v0, T_2_8_135
  move $s4, $v0
  #final label in assignmentStatement
  L_3421: 
  #final label in statem expression
  L_3420: 
  #if finish label = 3405
  L_3405:
  j L_3399
  #inside else
  L_3401:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3427: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3428: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3426
  j L_3426
  #final label in binaryExp
  L_3426: 
  #jumpToAllOnlyIf
  L_3424:
  move $v0, $s4
  beqz $v0, L_3425
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3431: 
  move $v0, $s5
  sw $v0, T_2_8_135
  move $s4, $v0
  #final label in assignmentStatement
  L_3430: 
  #final label in statem expression
  L_3429: 
  j L_3423
  #inside else
  L_3425:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3434: 
  move $v0, $s5
  sw $v0, T_2_8_135
  move $s4, $v0
  #final label in assignmentStatement
  L_3433: 
  #final label in statem expression
  L_3432: 
  #if finish label = 3423
  L_3423:
  #if finish label = 3399
  L_3399:
  j L_3387
  #inside else
  L_3389:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3438: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_3439: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3437
  j L_3437
  #final label in binaryExp
  L_3437: 
  #jumpToAllOnlyIf
  L_3436:
  move $v0, $s4
  beqz $v0, L_3435
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3444: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3445: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3443: 
  #final label in codeGenAssignmentExpression
  L_3442: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3441: 
  #final label in statem expression
  L_3440: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_2_9_35
  move $s5, $v0
  L_3450: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3451: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3449
  j L_3449
  #final label in binaryExp
  L_3449: 
  #jumpToAllOnlyIf
  L_3447:
  move $v0, $s4
  beqz $v0, L_3448
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3459: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3460: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3458
  j L_3458
  #final label in binaryExp
  L_3458: 
  #T1Or
  L_3456:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3455
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3462: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3463: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3461
  j L_3461
  #final label in binaryExp
  L_3461: 
  #T2Or
  L_3457:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3455
  j L_3455
  #final label in binaryExp
  L_3455: 
  #jumpToAllOnlyIf
  L_3453:
  move $v0, $s4
  beqz $v0, L_3454
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3466: 
  move $v0, $s5
  sw $v0, T_2_9_136
  move $s4, $v0
  #final label in assignmentStatement
  L_3465: 
  #final label in statem expression
  L_3464: 
  j L_3452
  #inside else
  L_3454:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3469: 
  move $v0, $s5
  sw $v0, T_2_9_136
  move $s4, $v0
  #final label in assignmentStatement
  L_3468: 
  #final label in statem expression
  L_3467: 
  #if finish label = 3452
  L_3452:
  j L_3446
  #inside else
  L_3448:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3474: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3475: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3473
  j L_3473
  #final label in binaryExp
  L_3473: 
  #jumpToAllOnlyIf
  L_3471:
  move $v0, $s4
  beqz $v0, L_3472
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3478: 
  move $v0, $s5
  sw $v0, T_2_9_136
  move $s4, $v0
  #final label in assignmentStatement
  L_3477: 
  #final label in statem expression
  L_3476: 
  j L_3470
  #inside else
  L_3472:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3481: 
  move $v0, $s5
  sw $v0, T_2_9_136
  move $s4, $v0
  #final label in assignmentStatement
  L_3480: 
  #final label in statem expression
  L_3479: 
  #if finish label = 3470
  L_3470:
  #if finish label = 3446
  L_3446:
  #if finish label = 3435
  L_3435:
  #if finish label = 3387
  L_3387:
  #if finish label = 3339
  L_3339:
  #if finish label = 3291
  L_3291:
  #if finish label = 3243
  L_3243:
  #if finish label = 3195
  L_3195:
  #if finish label = 3147
  L_3147:
  #if finish label = 3099
  L_3099:
  #if finish label = 3051
  L_3051:
  #if finish label = 3003
  L_3003:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_3486: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_3487: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3485
  j L_3485
  #final label in binaryExp
  L_3485: 
  #final label in codeGenAssignmentExpression
  L_3484: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3483: 
  #final label in statem expression
  L_3482: 
  #whileBodyEndJump
  L_2998:
  j  L_2996
  #while finish label = 2995
  L_2995:
  j L_2986
  #inside else
  L_2988:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_3492: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3493: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3491
  j L_3491
  #final label in binaryExp
  L_3491: 
  #jumpToAllOnlyIf
  L_3489:
  move $v0, $s4
  beqz $v0, L_3490
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3496: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3495: 
  #final label in statem expression
  L_3494: 
  #starting while
  #start of while loop
  L_3498:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3502: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_3503: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3501
  j L_3501
  #final label in binaryExp
  L_3501: 
  #jumpToAllOnlyIf
  L_3499:
  move $v0, $s4
  bnez $v0, L_3504
  j L_3497
  #whileBodyLabel
  L_3504:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3509: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_3510: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3508
  j L_3508
  #final label in binaryExp
  L_3508: 
  #jumpToAllOnlyIf
  L_3506:
  move $v0, $s4
  beqz $v0, L_3507
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3515: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3516: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3514: 
  #final label in codeGenAssignmentExpression
  L_3513: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3512: 
  #final label in statem expression
  L_3511: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_0_36
  move $s5, $v0
  L_3521: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3522: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3520
  j L_3520
  #final label in binaryExp
  L_3520: 
  #jumpToAllOnlyIf
  L_3518:
  move $v0, $s4
  beqz $v0, L_3519
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3530: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3531: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3529
  j L_3529
  #final label in binaryExp
  L_3529: 
  #T1Or
  L_3527:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3526
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3533: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3534: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3532
  j L_3532
  #final label in binaryExp
  L_3532: 
  #T2Or
  L_3528:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3526
  j L_3526
  #final label in binaryExp
  L_3526: 
  #jumpToAllOnlyIf
  L_3524:
  move $v0, $s4
  beqz $v0, L_3525
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3537: 
  move $v0, $s5
  sw $v0, T_3_0_137
  move $s4, $v0
  #final label in assignmentStatement
  L_3536: 
  #final label in statem expression
  L_3535: 
  j L_3523
  #inside else
  L_3525:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3540: 
  move $v0, $s5
  sw $v0, T_3_0_137
  move $s4, $v0
  #final label in assignmentStatement
  L_3539: 
  #final label in statem expression
  L_3538: 
  #if finish label = 3523
  L_3523:
  j L_3517
  #inside else
  L_3519:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3545: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3546: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3544
  j L_3544
  #final label in binaryExp
  L_3544: 
  #jumpToAllOnlyIf
  L_3542:
  move $v0, $s4
  beqz $v0, L_3543
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3549: 
  move $v0, $s5
  sw $v0, T_3_0_137
  move $s4, $v0
  #final label in assignmentStatement
  L_3548: 
  #final label in statem expression
  L_3547: 
  j L_3541
  #inside else
  L_3543:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3552: 
  move $v0, $s5
  sw $v0, T_3_0_137
  move $s4, $v0
  #final label in assignmentStatement
  L_3551: 
  #final label in statem expression
  L_3550: 
  #if finish label = 3541
  L_3541:
  #if finish label = 3517
  L_3517:
  j L_3505
  #inside else
  L_3507:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3557: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3558: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3556
  j L_3556
  #final label in binaryExp
  L_3556: 
  #jumpToAllOnlyIf
  L_3554:
  move $v0, $s4
  beqz $v0, L_3555
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3563: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3564: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3562: 
  #final label in codeGenAssignmentExpression
  L_3561: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3560: 
  #final label in statem expression
  L_3559: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_1_37
  move $s5, $v0
  L_3569: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3570: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3568
  j L_3568
  #final label in binaryExp
  L_3568: 
  #jumpToAllOnlyIf
  L_3566:
  move $v0, $s4
  beqz $v0, L_3567
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3578: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3579: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3577
  j L_3577
  #final label in binaryExp
  L_3577: 
  #T1Or
  L_3575:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3574
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3581: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3582: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3580
  j L_3580
  #final label in binaryExp
  L_3580: 
  #T2Or
  L_3576:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3574
  j L_3574
  #final label in binaryExp
  L_3574: 
  #jumpToAllOnlyIf
  L_3572:
  move $v0, $s4
  beqz $v0, L_3573
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3585: 
  move $v0, $s5
  sw $v0, T_3_1_138
  move $s4, $v0
  #final label in assignmentStatement
  L_3584: 
  #final label in statem expression
  L_3583: 
  j L_3571
  #inside else
  L_3573:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3588: 
  move $v0, $s5
  sw $v0, T_3_1_138
  move $s4, $v0
  #final label in assignmentStatement
  L_3587: 
  #final label in statem expression
  L_3586: 
  #if finish label = 3571
  L_3571:
  j L_3565
  #inside else
  L_3567:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3593: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3594: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3592
  j L_3592
  #final label in binaryExp
  L_3592: 
  #jumpToAllOnlyIf
  L_3590:
  move $v0, $s4
  beqz $v0, L_3591
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3597: 
  move $v0, $s5
  sw $v0, T_3_1_138
  move $s4, $v0
  #final label in assignmentStatement
  L_3596: 
  #final label in statem expression
  L_3595: 
  j L_3589
  #inside else
  L_3591:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3600: 
  move $v0, $s5
  sw $v0, T_3_1_138
  move $s4, $v0
  #final label in assignmentStatement
  L_3599: 
  #final label in statem expression
  L_3598: 
  #if finish label = 3589
  L_3589:
  #if finish label = 3565
  L_3565:
  j L_3553
  #inside else
  L_3555:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3605: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_3606: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3604
  j L_3604
  #final label in binaryExp
  L_3604: 
  #jumpToAllOnlyIf
  L_3602:
  move $v0, $s4
  beqz $v0, L_3603
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3611: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3612: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3610: 
  #final label in codeGenAssignmentExpression
  L_3609: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3608: 
  #final label in statem expression
  L_3607: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_2_38
  move $s5, $v0
  L_3617: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3618: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3616
  j L_3616
  #final label in binaryExp
  L_3616: 
  #jumpToAllOnlyIf
  L_3614:
  move $v0, $s4
  beqz $v0, L_3615
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3626: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3627: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3625
  j L_3625
  #final label in binaryExp
  L_3625: 
  #T1Or
  L_3623:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3622
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3629: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3630: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3628
  j L_3628
  #final label in binaryExp
  L_3628: 
  #T2Or
  L_3624:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3622
  j L_3622
  #final label in binaryExp
  L_3622: 
  #jumpToAllOnlyIf
  L_3620:
  move $v0, $s4
  beqz $v0, L_3621
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3633: 
  move $v0, $s5
  sw $v0, T_3_2_139
  move $s4, $v0
  #final label in assignmentStatement
  L_3632: 
  #final label in statem expression
  L_3631: 
  j L_3619
  #inside else
  L_3621:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3636: 
  move $v0, $s5
  sw $v0, T_3_2_139
  move $s4, $v0
  #final label in assignmentStatement
  L_3635: 
  #final label in statem expression
  L_3634: 
  #if finish label = 3619
  L_3619:
  j L_3613
  #inside else
  L_3615:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3641: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3642: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3640
  j L_3640
  #final label in binaryExp
  L_3640: 
  #jumpToAllOnlyIf
  L_3638:
  move $v0, $s4
  beqz $v0, L_3639
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3645: 
  move $v0, $s5
  sw $v0, T_3_2_139
  move $s4, $v0
  #final label in assignmentStatement
  L_3644: 
  #final label in statem expression
  L_3643: 
  j L_3637
  #inside else
  L_3639:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3648: 
  move $v0, $s5
  sw $v0, T_3_2_139
  move $s4, $v0
  #final label in assignmentStatement
  L_3647: 
  #final label in statem expression
  L_3646: 
  #if finish label = 3637
  L_3637:
  #if finish label = 3613
  L_3613:
  j L_3601
  #inside else
  L_3603:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3653: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3654: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3652
  j L_3652
  #final label in binaryExp
  L_3652: 
  #jumpToAllOnlyIf
  L_3650:
  move $v0, $s4
  beqz $v0, L_3651
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3659: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3660: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3658: 
  #final label in codeGenAssignmentExpression
  L_3657: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3656: 
  #final label in statem expression
  L_3655: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_3_39
  move $s5, $v0
  L_3665: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3666: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3664
  j L_3664
  #final label in binaryExp
  L_3664: 
  #jumpToAllOnlyIf
  L_3662:
  move $v0, $s4
  beqz $v0, L_3663
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3674: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3675: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3673
  j L_3673
  #final label in binaryExp
  L_3673: 
  #T1Or
  L_3671:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3670
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3677: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3678: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3676
  j L_3676
  #final label in binaryExp
  L_3676: 
  #T2Or
  L_3672:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3670
  j L_3670
  #final label in binaryExp
  L_3670: 
  #jumpToAllOnlyIf
  L_3668:
  move $v0, $s4
  beqz $v0, L_3669
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3681: 
  move $v0, $s5
  sw $v0, T_3_3_140
  move $s4, $v0
  #final label in assignmentStatement
  L_3680: 
  #final label in statem expression
  L_3679: 
  j L_3667
  #inside else
  L_3669:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3684: 
  move $v0, $s5
  sw $v0, T_3_3_140
  move $s4, $v0
  #final label in assignmentStatement
  L_3683: 
  #final label in statem expression
  L_3682: 
  #if finish label = 3667
  L_3667:
  j L_3661
  #inside else
  L_3663:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3689: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3690: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3688
  j L_3688
  #final label in binaryExp
  L_3688: 
  #jumpToAllOnlyIf
  L_3686:
  move $v0, $s4
  beqz $v0, L_3687
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3693: 
  move $v0, $s5
  sw $v0, T_3_3_140
  move $s4, $v0
  #final label in assignmentStatement
  L_3692: 
  #final label in statem expression
  L_3691: 
  j L_3685
  #inside else
  L_3687:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3696: 
  move $v0, $s5
  sw $v0, T_3_3_140
  move $s4, $v0
  #final label in assignmentStatement
  L_3695: 
  #final label in statem expression
  L_3694: 
  #if finish label = 3685
  L_3685:
  #if finish label = 3661
  L_3661:
  j L_3649
  #inside else
  L_3651:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3701: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_3702: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3700
  j L_3700
  #final label in binaryExp
  L_3700: 
  #jumpToAllOnlyIf
  L_3698:
  move $v0, $s4
  beqz $v0, L_3699
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3707: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3708: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3706: 
  #final label in codeGenAssignmentExpression
  L_3705: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3704: 
  #final label in statem expression
  L_3703: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_4_40
  move $s5, $v0
  L_3713: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3714: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3712
  j L_3712
  #final label in binaryExp
  L_3712: 
  #jumpToAllOnlyIf
  L_3710:
  move $v0, $s4
  beqz $v0, L_3711
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3722: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3723: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3721
  j L_3721
  #final label in binaryExp
  L_3721: 
  #T1Or
  L_3719:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3718
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3725: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3726: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3724
  j L_3724
  #final label in binaryExp
  L_3724: 
  #T2Or
  L_3720:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3718
  j L_3718
  #final label in binaryExp
  L_3718: 
  #jumpToAllOnlyIf
  L_3716:
  move $v0, $s4
  beqz $v0, L_3717
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3729: 
  move $v0, $s5
  sw $v0, T_3_4_141
  move $s4, $v0
  #final label in assignmentStatement
  L_3728: 
  #final label in statem expression
  L_3727: 
  j L_3715
  #inside else
  L_3717:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3732: 
  move $v0, $s5
  sw $v0, T_3_4_141
  move $s4, $v0
  #final label in assignmentStatement
  L_3731: 
  #final label in statem expression
  L_3730: 
  #if finish label = 3715
  L_3715:
  j L_3709
  #inside else
  L_3711:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3737: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3738: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3736
  j L_3736
  #final label in binaryExp
  L_3736: 
  #jumpToAllOnlyIf
  L_3734:
  move $v0, $s4
  beqz $v0, L_3735
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3741: 
  move $v0, $s5
  sw $v0, T_3_4_141
  move $s4, $v0
  #final label in assignmentStatement
  L_3740: 
  #final label in statem expression
  L_3739: 
  j L_3733
  #inside else
  L_3735:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3744: 
  move $v0, $s5
  sw $v0, T_3_4_141
  move $s4, $v0
  #final label in assignmentStatement
  L_3743: 
  #final label in statem expression
  L_3742: 
  #if finish label = 3733
  L_3733:
  #if finish label = 3709
  L_3709:
  j L_3697
  #inside else
  L_3699:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3749: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_3750: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3748
  j L_3748
  #final label in binaryExp
  L_3748: 
  #jumpToAllOnlyIf
  L_3746:
  move $v0, $s4
  beqz $v0, L_3747
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3755: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3756: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3754: 
  #final label in codeGenAssignmentExpression
  L_3753: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3752: 
  #final label in statem expression
  L_3751: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_5_41
  move $s5, $v0
  L_3761: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3762: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3760
  j L_3760
  #final label in binaryExp
  L_3760: 
  #jumpToAllOnlyIf
  L_3758:
  move $v0, $s4
  beqz $v0, L_3759
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3770: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3771: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3769
  j L_3769
  #final label in binaryExp
  L_3769: 
  #T1Or
  L_3767:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3766
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3773: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3774: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3772
  j L_3772
  #final label in binaryExp
  L_3772: 
  #T2Or
  L_3768:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3766
  j L_3766
  #final label in binaryExp
  L_3766: 
  #jumpToAllOnlyIf
  L_3764:
  move $v0, $s4
  beqz $v0, L_3765
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3777: 
  move $v0, $s5
  sw $v0, T_3_5_142
  move $s4, $v0
  #final label in assignmentStatement
  L_3776: 
  #final label in statem expression
  L_3775: 
  j L_3763
  #inside else
  L_3765:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3780: 
  move $v0, $s5
  sw $v0, T_3_5_142
  move $s4, $v0
  #final label in assignmentStatement
  L_3779: 
  #final label in statem expression
  L_3778: 
  #if finish label = 3763
  L_3763:
  j L_3757
  #inside else
  L_3759:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3785: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3786: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3784
  j L_3784
  #final label in binaryExp
  L_3784: 
  #jumpToAllOnlyIf
  L_3782:
  move $v0, $s4
  beqz $v0, L_3783
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3789: 
  move $v0, $s5
  sw $v0, T_3_5_142
  move $s4, $v0
  #final label in assignmentStatement
  L_3788: 
  #final label in statem expression
  L_3787: 
  j L_3781
  #inside else
  L_3783:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3792: 
  move $v0, $s5
  sw $v0, T_3_5_142
  move $s4, $v0
  #final label in assignmentStatement
  L_3791: 
  #final label in statem expression
  L_3790: 
  #if finish label = 3781
  L_3781:
  #if finish label = 3757
  L_3757:
  j L_3745
  #inside else
  L_3747:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3797: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_3798: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3796
  j L_3796
  #final label in binaryExp
  L_3796: 
  #jumpToAllOnlyIf
  L_3794:
  move $v0, $s4
  beqz $v0, L_3795
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3803: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3804: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3802: 
  #final label in codeGenAssignmentExpression
  L_3801: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3800: 
  #final label in statem expression
  L_3799: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_6_42
  move $s5, $v0
  L_3809: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3810: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3808
  j L_3808
  #final label in binaryExp
  L_3808: 
  #jumpToAllOnlyIf
  L_3806:
  move $v0, $s4
  beqz $v0, L_3807
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3818: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3819: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3817
  j L_3817
  #final label in binaryExp
  L_3817: 
  #T1Or
  L_3815:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3814
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3821: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3822: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3820
  j L_3820
  #final label in binaryExp
  L_3820: 
  #T2Or
  L_3816:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3814
  j L_3814
  #final label in binaryExp
  L_3814: 
  #jumpToAllOnlyIf
  L_3812:
  move $v0, $s4
  beqz $v0, L_3813
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3825: 
  move $v0, $s5
  sw $v0, T_3_6_143
  move $s4, $v0
  #final label in assignmentStatement
  L_3824: 
  #final label in statem expression
  L_3823: 
  j L_3811
  #inside else
  L_3813:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3828: 
  move $v0, $s5
  sw $v0, T_3_6_143
  move $s4, $v0
  #final label in assignmentStatement
  L_3827: 
  #final label in statem expression
  L_3826: 
  #if finish label = 3811
  L_3811:
  j L_3805
  #inside else
  L_3807:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3833: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3834: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3832
  j L_3832
  #final label in binaryExp
  L_3832: 
  #jumpToAllOnlyIf
  L_3830:
  move $v0, $s4
  beqz $v0, L_3831
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3837: 
  move $v0, $s5
  sw $v0, T_3_6_143
  move $s4, $v0
  #final label in assignmentStatement
  L_3836: 
  #final label in statem expression
  L_3835: 
  j L_3829
  #inside else
  L_3831:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3840: 
  move $v0, $s5
  sw $v0, T_3_6_143
  move $s4, $v0
  #final label in assignmentStatement
  L_3839: 
  #final label in statem expression
  L_3838: 
  #if finish label = 3829
  L_3829:
  #if finish label = 3805
  L_3805:
  j L_3793
  #inside else
  L_3795:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3845: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_3846: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3844
  j L_3844
  #final label in binaryExp
  L_3844: 
  #jumpToAllOnlyIf
  L_3842:
  move $v0, $s4
  beqz $v0, L_3843
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3851: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3852: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3850: 
  #final label in codeGenAssignmentExpression
  L_3849: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3848: 
  #final label in statem expression
  L_3847: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_7_43
  move $s5, $v0
  L_3857: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3858: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3856
  j L_3856
  #final label in binaryExp
  L_3856: 
  #jumpToAllOnlyIf
  L_3854:
  move $v0, $s4
  beqz $v0, L_3855
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3866: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3867: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3865
  j L_3865
  #final label in binaryExp
  L_3865: 
  #T1Or
  L_3863:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3862
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3869: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3870: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3868
  j L_3868
  #final label in binaryExp
  L_3868: 
  #T2Or
  L_3864:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3862
  j L_3862
  #final label in binaryExp
  L_3862: 
  #jumpToAllOnlyIf
  L_3860:
  move $v0, $s4
  beqz $v0, L_3861
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3873: 
  move $v0, $s5
  sw $v0, T_3_7_144
  move $s4, $v0
  #final label in assignmentStatement
  L_3872: 
  #final label in statem expression
  L_3871: 
  j L_3859
  #inside else
  L_3861:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3876: 
  move $v0, $s5
  sw $v0, T_3_7_144
  move $s4, $v0
  #final label in assignmentStatement
  L_3875: 
  #final label in statem expression
  L_3874: 
  #if finish label = 3859
  L_3859:
  j L_3853
  #inside else
  L_3855:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3881: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3882: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3880
  j L_3880
  #final label in binaryExp
  L_3880: 
  #jumpToAllOnlyIf
  L_3878:
  move $v0, $s4
  beqz $v0, L_3879
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3885: 
  move $v0, $s5
  sw $v0, T_3_7_144
  move $s4, $v0
  #final label in assignmentStatement
  L_3884: 
  #final label in statem expression
  L_3883: 
  j L_3877
  #inside else
  L_3879:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3888: 
  move $v0, $s5
  sw $v0, T_3_7_144
  move $s4, $v0
  #final label in assignmentStatement
  L_3887: 
  #final label in statem expression
  L_3886: 
  #if finish label = 3877
  L_3877:
  #if finish label = 3853
  L_3853:
  j L_3841
  #inside else
  L_3843:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3893: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_3894: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3892
  j L_3892
  #final label in binaryExp
  L_3892: 
  #jumpToAllOnlyIf
  L_3890:
  move $v0, $s4
  beqz $v0, L_3891
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3899: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3900: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3898: 
  #final label in codeGenAssignmentExpression
  L_3897: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3896: 
  #final label in statem expression
  L_3895: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_8_44
  move $s5, $v0
  L_3905: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3906: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3904
  j L_3904
  #final label in binaryExp
  L_3904: 
  #jumpToAllOnlyIf
  L_3902:
  move $v0, $s4
  beqz $v0, L_3903
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3914: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3915: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3913
  j L_3913
  #final label in binaryExp
  L_3913: 
  #T1Or
  L_3911:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3910
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3917: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3918: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3916
  j L_3916
  #final label in binaryExp
  L_3916: 
  #T2Or
  L_3912:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3910
  j L_3910
  #final label in binaryExp
  L_3910: 
  #jumpToAllOnlyIf
  L_3908:
  move $v0, $s4
  beqz $v0, L_3909
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3921: 
  move $v0, $s5
  sw $v0, T_3_8_145
  move $s4, $v0
  #final label in assignmentStatement
  L_3920: 
  #final label in statem expression
  L_3919: 
  j L_3907
  #inside else
  L_3909:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3924: 
  move $v0, $s5
  sw $v0, T_3_8_145
  move $s4, $v0
  #final label in assignmentStatement
  L_3923: 
  #final label in statem expression
  L_3922: 
  #if finish label = 3907
  L_3907:
  j L_3901
  #inside else
  L_3903:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3929: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3930: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3928
  j L_3928
  #final label in binaryExp
  L_3928: 
  #jumpToAllOnlyIf
  L_3926:
  move $v0, $s4
  beqz $v0, L_3927
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3933: 
  move $v0, $s5
  sw $v0, T_3_8_145
  move $s4, $v0
  #final label in assignmentStatement
  L_3932: 
  #final label in statem expression
  L_3931: 
  j L_3925
  #inside else
  L_3927:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3936: 
  move $v0, $s5
  sw $v0, T_3_8_145
  move $s4, $v0
  #final label in assignmentStatement
  L_3935: 
  #final label in statem expression
  L_3934: 
  #if finish label = 3925
  L_3925:
  #if finish label = 3901
  L_3901:
  j L_3889
  #inside else
  L_3891:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_3940: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_3941: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3939
  j L_3939
  #final label in binaryExp
  L_3939: 
  #jumpToAllOnlyIf
  L_3938:
  move $v0, $s4
  beqz $v0, L_3937
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_3946: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_3947: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_3945: 
  #final label in codeGenAssignmentExpression
  L_3944: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3943: 
  #final label in statem expression
  L_3942: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_3_9_45
  move $s5, $v0
  L_3952: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_3953: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3951
  j L_3951
  #final label in binaryExp
  L_3951: 
  #jumpToAllOnlyIf
  L_3949:
  move $v0, $s4
  beqz $v0, L_3950
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3961: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_3962: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3960
  j L_3960
  #final label in binaryExp
  L_3960: 
  #T1Or
  L_3958:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3957
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_3964: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_3965: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3963
  j L_3963
  #final label in binaryExp
  L_3963: 
  #T2Or
  L_3959:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_3957
  j L_3957
  #final label in binaryExp
  L_3957: 
  #jumpToAllOnlyIf
  L_3955:
  move $v0, $s4
  beqz $v0, L_3956
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3968: 
  move $v0, $s5
  sw $v0, T_3_9_146
  move $s4, $v0
  #final label in assignmentStatement
  L_3967: 
  #final label in statem expression
  L_3966: 
  j L_3954
  #inside else
  L_3956:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3971: 
  move $v0, $s5
  sw $v0, T_3_9_146
  move $s4, $v0
  #final label in assignmentStatement
  L_3970: 
  #final label in statem expression
  L_3969: 
  #if finish label = 3954
  L_3954:
  j L_3948
  #inside else
  L_3950:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_3976: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_3977: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3975
  j L_3975
  #final label in binaryExp
  L_3975: 
  #jumpToAllOnlyIf
  L_3973:
  move $v0, $s4
  beqz $v0, L_3974
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3980: 
  move $v0, $s5
  sw $v0, T_3_9_146
  move $s4, $v0
  #final label in assignmentStatement
  L_3979: 
  #final label in statem expression
  L_3978: 
  j L_3972
  #inside else
  L_3974:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3983: 
  move $v0, $s5
  sw $v0, T_3_9_146
  move $s4, $v0
  #final label in assignmentStatement
  L_3982: 
  #final label in statem expression
  L_3981: 
  #if finish label = 3972
  L_3972:
  #if finish label = 3948
  L_3948:
  #if finish label = 3937
  L_3937:
  #if finish label = 3889
  L_3889:
  #if finish label = 3841
  L_3841:
  #if finish label = 3793
  L_3793:
  #if finish label = 3745
  L_3745:
  #if finish label = 3697
  L_3697:
  #if finish label = 3649
  L_3649:
  #if finish label = 3601
  L_3601:
  #if finish label = 3553
  L_3553:
  #if finish label = 3505
  L_3505:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_3988: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_3989: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_3987
  j L_3987
  #final label in binaryExp
  L_3987: 
  #final label in codeGenAssignmentExpression
  L_3986: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3985: 
  #final label in statem expression
  L_3984: 
  #whileBodyEndJump
  L_3500:
  j  L_3498
  #while finish label = 3497
  L_3497:
  j L_3488
  #inside else
  L_3490:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_3994: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_3995: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_3993
  j L_3993
  #final label in binaryExp
  L_3993: 
  #jumpToAllOnlyIf
  L_3991:
  move $v0, $s4
  beqz $v0, L_3992
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_3998: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_3997: 
  #final label in statem expression
  L_3996: 
  #starting while
  #start of while loop
  L_4000:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4004: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_4005: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4003
  j L_4003
  #final label in binaryExp
  L_4003: 
  #jumpToAllOnlyIf
  L_4001:
  move $v0, $s4
  bnez $v0, L_4006
  j L_3999
  #whileBodyLabel
  L_4006:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4011: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_4012: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4010
  j L_4010
  #final label in binaryExp
  L_4010: 
  #jumpToAllOnlyIf
  L_4008:
  move $v0, $s4
  beqz $v0, L_4009
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4017: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4018: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4016: 
  #final label in codeGenAssignmentExpression
  L_4015: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4014: 
  #final label in statem expression
  L_4013: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_0_46
  move $s5, $v0
  L_4023: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4024: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4022
  j L_4022
  #final label in binaryExp
  L_4022: 
  #jumpToAllOnlyIf
  L_4020:
  move $v0, $s4
  beqz $v0, L_4021
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4032: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4033: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4031
  j L_4031
  #final label in binaryExp
  L_4031: 
  #T1Or
  L_4029:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4028
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4035: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4036: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4034
  j L_4034
  #final label in binaryExp
  L_4034: 
  #T2Or
  L_4030:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4028
  j L_4028
  #final label in binaryExp
  L_4028: 
  #jumpToAllOnlyIf
  L_4026:
  move $v0, $s4
  beqz $v0, L_4027
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4039: 
  move $v0, $s5
  sw $v0, T_4_0_147
  move $s4, $v0
  #final label in assignmentStatement
  L_4038: 
  #final label in statem expression
  L_4037: 
  j L_4025
  #inside else
  L_4027:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4042: 
  move $v0, $s5
  sw $v0, T_4_0_147
  move $s4, $v0
  #final label in assignmentStatement
  L_4041: 
  #final label in statem expression
  L_4040: 
  #if finish label = 4025
  L_4025:
  j L_4019
  #inside else
  L_4021:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4047: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4048: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4046
  j L_4046
  #final label in binaryExp
  L_4046: 
  #jumpToAllOnlyIf
  L_4044:
  move $v0, $s4
  beqz $v0, L_4045
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4051: 
  move $v0, $s5
  sw $v0, T_4_0_147
  move $s4, $v0
  #final label in assignmentStatement
  L_4050: 
  #final label in statem expression
  L_4049: 
  j L_4043
  #inside else
  L_4045:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4054: 
  move $v0, $s5
  sw $v0, T_4_0_147
  move $s4, $v0
  #final label in assignmentStatement
  L_4053: 
  #final label in statem expression
  L_4052: 
  #if finish label = 4043
  L_4043:
  #if finish label = 4019
  L_4019:
  j L_4007
  #inside else
  L_4009:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4059: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4060: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4058
  j L_4058
  #final label in binaryExp
  L_4058: 
  #jumpToAllOnlyIf
  L_4056:
  move $v0, $s4
  beqz $v0, L_4057
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4065: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4066: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4064: 
  #final label in codeGenAssignmentExpression
  L_4063: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4062: 
  #final label in statem expression
  L_4061: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_1_47
  move $s5, $v0
  L_4071: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4072: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4070
  j L_4070
  #final label in binaryExp
  L_4070: 
  #jumpToAllOnlyIf
  L_4068:
  move $v0, $s4
  beqz $v0, L_4069
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4080: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4081: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4079
  j L_4079
  #final label in binaryExp
  L_4079: 
  #T1Or
  L_4077:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4076
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4083: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4084: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4082
  j L_4082
  #final label in binaryExp
  L_4082: 
  #T2Or
  L_4078:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4076
  j L_4076
  #final label in binaryExp
  L_4076: 
  #jumpToAllOnlyIf
  L_4074:
  move $v0, $s4
  beqz $v0, L_4075
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4087: 
  move $v0, $s5
  sw $v0, T_4_1_148
  move $s4, $v0
  #final label in assignmentStatement
  L_4086: 
  #final label in statem expression
  L_4085: 
  j L_4073
  #inside else
  L_4075:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4090: 
  move $v0, $s5
  sw $v0, T_4_1_148
  move $s4, $v0
  #final label in assignmentStatement
  L_4089: 
  #final label in statem expression
  L_4088: 
  #if finish label = 4073
  L_4073:
  j L_4067
  #inside else
  L_4069:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4095: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4096: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4094
  j L_4094
  #final label in binaryExp
  L_4094: 
  #jumpToAllOnlyIf
  L_4092:
  move $v0, $s4
  beqz $v0, L_4093
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4099: 
  move $v0, $s5
  sw $v0, T_4_1_148
  move $s4, $v0
  #final label in assignmentStatement
  L_4098: 
  #final label in statem expression
  L_4097: 
  j L_4091
  #inside else
  L_4093:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4102: 
  move $v0, $s5
  sw $v0, T_4_1_148
  move $s4, $v0
  #final label in assignmentStatement
  L_4101: 
  #final label in statem expression
  L_4100: 
  #if finish label = 4091
  L_4091:
  #if finish label = 4067
  L_4067:
  j L_4055
  #inside else
  L_4057:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4107: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_4108: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4106
  j L_4106
  #final label in binaryExp
  L_4106: 
  #jumpToAllOnlyIf
  L_4104:
  move $v0, $s4
  beqz $v0, L_4105
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4113: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4114: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4112: 
  #final label in codeGenAssignmentExpression
  L_4111: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4110: 
  #final label in statem expression
  L_4109: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_2_48
  move $s5, $v0
  L_4119: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4120: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4118
  j L_4118
  #final label in binaryExp
  L_4118: 
  #jumpToAllOnlyIf
  L_4116:
  move $v0, $s4
  beqz $v0, L_4117
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4128: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4129: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4127
  j L_4127
  #final label in binaryExp
  L_4127: 
  #T1Or
  L_4125:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4124
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4131: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4132: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4130
  j L_4130
  #final label in binaryExp
  L_4130: 
  #T2Or
  L_4126:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4124
  j L_4124
  #final label in binaryExp
  L_4124: 
  #jumpToAllOnlyIf
  L_4122:
  move $v0, $s4
  beqz $v0, L_4123
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4135: 
  move $v0, $s5
  sw $v0, T_4_2_149
  move $s4, $v0
  #final label in assignmentStatement
  L_4134: 
  #final label in statem expression
  L_4133: 
  j L_4121
  #inside else
  L_4123:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4138: 
  move $v0, $s5
  sw $v0, T_4_2_149
  move $s4, $v0
  #final label in assignmentStatement
  L_4137: 
  #final label in statem expression
  L_4136: 
  #if finish label = 4121
  L_4121:
  j L_4115
  #inside else
  L_4117:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4143: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4144: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4142
  j L_4142
  #final label in binaryExp
  L_4142: 
  #jumpToAllOnlyIf
  L_4140:
  move $v0, $s4
  beqz $v0, L_4141
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4147: 
  move $v0, $s5
  sw $v0, T_4_2_149
  move $s4, $v0
  #final label in assignmentStatement
  L_4146: 
  #final label in statem expression
  L_4145: 
  j L_4139
  #inside else
  L_4141:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4150: 
  move $v0, $s5
  sw $v0, T_4_2_149
  move $s4, $v0
  #final label in assignmentStatement
  L_4149: 
  #final label in statem expression
  L_4148: 
  #if finish label = 4139
  L_4139:
  #if finish label = 4115
  L_4115:
  j L_4103
  #inside else
  L_4105:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4155: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4156: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4154
  j L_4154
  #final label in binaryExp
  L_4154: 
  #jumpToAllOnlyIf
  L_4152:
  move $v0, $s4
  beqz $v0, L_4153
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4161: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4162: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4160: 
  #final label in codeGenAssignmentExpression
  L_4159: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4158: 
  #final label in statem expression
  L_4157: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_3_49
  move $s5, $v0
  L_4167: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4168: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4166
  j L_4166
  #final label in binaryExp
  L_4166: 
  #jumpToAllOnlyIf
  L_4164:
  move $v0, $s4
  beqz $v0, L_4165
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4176: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4177: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4175
  j L_4175
  #final label in binaryExp
  L_4175: 
  #T1Or
  L_4173:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4172
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4179: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4180: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4178
  j L_4178
  #final label in binaryExp
  L_4178: 
  #T2Or
  L_4174:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4172
  j L_4172
  #final label in binaryExp
  L_4172: 
  #jumpToAllOnlyIf
  L_4170:
  move $v0, $s4
  beqz $v0, L_4171
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4183: 
  move $v0, $s5
  sw $v0, T_4_3_150
  move $s4, $v0
  #final label in assignmentStatement
  L_4182: 
  #final label in statem expression
  L_4181: 
  j L_4169
  #inside else
  L_4171:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4186: 
  move $v0, $s5
  sw $v0, T_4_3_150
  move $s4, $v0
  #final label in assignmentStatement
  L_4185: 
  #final label in statem expression
  L_4184: 
  #if finish label = 4169
  L_4169:
  j L_4163
  #inside else
  L_4165:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4191: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4192: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4190
  j L_4190
  #final label in binaryExp
  L_4190: 
  #jumpToAllOnlyIf
  L_4188:
  move $v0, $s4
  beqz $v0, L_4189
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4195: 
  move $v0, $s5
  sw $v0, T_4_3_150
  move $s4, $v0
  #final label in assignmentStatement
  L_4194: 
  #final label in statem expression
  L_4193: 
  j L_4187
  #inside else
  L_4189:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4198: 
  move $v0, $s5
  sw $v0, T_4_3_150
  move $s4, $v0
  #final label in assignmentStatement
  L_4197: 
  #final label in statem expression
  L_4196: 
  #if finish label = 4187
  L_4187:
  #if finish label = 4163
  L_4163:
  j L_4151
  #inside else
  L_4153:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4203: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_4204: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4202
  j L_4202
  #final label in binaryExp
  L_4202: 
  #jumpToAllOnlyIf
  L_4200:
  move $v0, $s4
  beqz $v0, L_4201
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4209: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4210: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4208: 
  #final label in codeGenAssignmentExpression
  L_4207: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4206: 
  #final label in statem expression
  L_4205: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_4_50
  move $s5, $v0
  L_4215: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4216: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4214
  j L_4214
  #final label in binaryExp
  L_4214: 
  #jumpToAllOnlyIf
  L_4212:
  move $v0, $s4
  beqz $v0, L_4213
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4224: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4225: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4223
  j L_4223
  #final label in binaryExp
  L_4223: 
  #T1Or
  L_4221:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4220
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4227: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4228: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4226
  j L_4226
  #final label in binaryExp
  L_4226: 
  #T2Or
  L_4222:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4220
  j L_4220
  #final label in binaryExp
  L_4220: 
  #jumpToAllOnlyIf
  L_4218:
  move $v0, $s4
  beqz $v0, L_4219
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4231: 
  move $v0, $s5
  sw $v0, T_4_4_151
  move $s4, $v0
  #final label in assignmentStatement
  L_4230: 
  #final label in statem expression
  L_4229: 
  j L_4217
  #inside else
  L_4219:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4234: 
  move $v0, $s5
  sw $v0, T_4_4_151
  move $s4, $v0
  #final label in assignmentStatement
  L_4233: 
  #final label in statem expression
  L_4232: 
  #if finish label = 4217
  L_4217:
  j L_4211
  #inside else
  L_4213:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4239: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4240: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4238
  j L_4238
  #final label in binaryExp
  L_4238: 
  #jumpToAllOnlyIf
  L_4236:
  move $v0, $s4
  beqz $v0, L_4237
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4243: 
  move $v0, $s5
  sw $v0, T_4_4_151
  move $s4, $v0
  #final label in assignmentStatement
  L_4242: 
  #final label in statem expression
  L_4241: 
  j L_4235
  #inside else
  L_4237:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4246: 
  move $v0, $s5
  sw $v0, T_4_4_151
  move $s4, $v0
  #final label in assignmentStatement
  L_4245: 
  #final label in statem expression
  L_4244: 
  #if finish label = 4235
  L_4235:
  #if finish label = 4211
  L_4211:
  j L_4199
  #inside else
  L_4201:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4251: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_4252: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4250
  j L_4250
  #final label in binaryExp
  L_4250: 
  #jumpToAllOnlyIf
  L_4248:
  move $v0, $s4
  beqz $v0, L_4249
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4257: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4258: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4256: 
  #final label in codeGenAssignmentExpression
  L_4255: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4254: 
  #final label in statem expression
  L_4253: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_5_51
  move $s5, $v0
  L_4263: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4264: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4262
  j L_4262
  #final label in binaryExp
  L_4262: 
  #jumpToAllOnlyIf
  L_4260:
  move $v0, $s4
  beqz $v0, L_4261
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4272: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4273: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4271
  j L_4271
  #final label in binaryExp
  L_4271: 
  #T1Or
  L_4269:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4268
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4275: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4276: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4274
  j L_4274
  #final label in binaryExp
  L_4274: 
  #T2Or
  L_4270:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4268
  j L_4268
  #final label in binaryExp
  L_4268: 
  #jumpToAllOnlyIf
  L_4266:
  move $v0, $s4
  beqz $v0, L_4267
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4279: 
  move $v0, $s5
  sw $v0, T_4_5_152
  move $s4, $v0
  #final label in assignmentStatement
  L_4278: 
  #final label in statem expression
  L_4277: 
  j L_4265
  #inside else
  L_4267:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4282: 
  move $v0, $s5
  sw $v0, T_4_5_152
  move $s4, $v0
  #final label in assignmentStatement
  L_4281: 
  #final label in statem expression
  L_4280: 
  #if finish label = 4265
  L_4265:
  j L_4259
  #inside else
  L_4261:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4287: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4288: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4286
  j L_4286
  #final label in binaryExp
  L_4286: 
  #jumpToAllOnlyIf
  L_4284:
  move $v0, $s4
  beqz $v0, L_4285
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4291: 
  move $v0, $s5
  sw $v0, T_4_5_152
  move $s4, $v0
  #final label in assignmentStatement
  L_4290: 
  #final label in statem expression
  L_4289: 
  j L_4283
  #inside else
  L_4285:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4294: 
  move $v0, $s5
  sw $v0, T_4_5_152
  move $s4, $v0
  #final label in assignmentStatement
  L_4293: 
  #final label in statem expression
  L_4292: 
  #if finish label = 4283
  L_4283:
  #if finish label = 4259
  L_4259:
  j L_4247
  #inside else
  L_4249:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4299: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_4300: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4298
  j L_4298
  #final label in binaryExp
  L_4298: 
  #jumpToAllOnlyIf
  L_4296:
  move $v0, $s4
  beqz $v0, L_4297
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4305: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4306: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4304: 
  #final label in codeGenAssignmentExpression
  L_4303: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4302: 
  #final label in statem expression
  L_4301: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_6_52
  move $s5, $v0
  L_4311: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4312: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4310
  j L_4310
  #final label in binaryExp
  L_4310: 
  #jumpToAllOnlyIf
  L_4308:
  move $v0, $s4
  beqz $v0, L_4309
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4320: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4321: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4319
  j L_4319
  #final label in binaryExp
  L_4319: 
  #T1Or
  L_4317:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4316
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4323: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4324: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4322
  j L_4322
  #final label in binaryExp
  L_4322: 
  #T2Or
  L_4318:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4316
  j L_4316
  #final label in binaryExp
  L_4316: 
  #jumpToAllOnlyIf
  L_4314:
  move $v0, $s4
  beqz $v0, L_4315
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4327: 
  move $v0, $s5
  sw $v0, T_4_6_153
  move $s4, $v0
  #final label in assignmentStatement
  L_4326: 
  #final label in statem expression
  L_4325: 
  j L_4313
  #inside else
  L_4315:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4330: 
  move $v0, $s5
  sw $v0, T_4_6_153
  move $s4, $v0
  #final label in assignmentStatement
  L_4329: 
  #final label in statem expression
  L_4328: 
  #if finish label = 4313
  L_4313:
  j L_4307
  #inside else
  L_4309:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4335: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4336: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4334
  j L_4334
  #final label in binaryExp
  L_4334: 
  #jumpToAllOnlyIf
  L_4332:
  move $v0, $s4
  beqz $v0, L_4333
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4339: 
  move $v0, $s5
  sw $v0, T_4_6_153
  move $s4, $v0
  #final label in assignmentStatement
  L_4338: 
  #final label in statem expression
  L_4337: 
  j L_4331
  #inside else
  L_4333:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4342: 
  move $v0, $s5
  sw $v0, T_4_6_153
  move $s4, $v0
  #final label in assignmentStatement
  L_4341: 
  #final label in statem expression
  L_4340: 
  #if finish label = 4331
  L_4331:
  #if finish label = 4307
  L_4307:
  j L_4295
  #inside else
  L_4297:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4347: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_4348: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4346
  j L_4346
  #final label in binaryExp
  L_4346: 
  #jumpToAllOnlyIf
  L_4344:
  move $v0, $s4
  beqz $v0, L_4345
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4353: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4354: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4352: 
  #final label in codeGenAssignmentExpression
  L_4351: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4350: 
  #final label in statem expression
  L_4349: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_7_53
  move $s5, $v0
  L_4359: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4360: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4358
  j L_4358
  #final label in binaryExp
  L_4358: 
  #jumpToAllOnlyIf
  L_4356:
  move $v0, $s4
  beqz $v0, L_4357
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4368: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4369: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4367
  j L_4367
  #final label in binaryExp
  L_4367: 
  #T1Or
  L_4365:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4364
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4371: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4372: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4370
  j L_4370
  #final label in binaryExp
  L_4370: 
  #T2Or
  L_4366:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4364
  j L_4364
  #final label in binaryExp
  L_4364: 
  #jumpToAllOnlyIf
  L_4362:
  move $v0, $s4
  beqz $v0, L_4363
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4375: 
  move $v0, $s5
  sw $v0, T_4_7_154
  move $s4, $v0
  #final label in assignmentStatement
  L_4374: 
  #final label in statem expression
  L_4373: 
  j L_4361
  #inside else
  L_4363:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4378: 
  move $v0, $s5
  sw $v0, T_4_7_154
  move $s4, $v0
  #final label in assignmentStatement
  L_4377: 
  #final label in statem expression
  L_4376: 
  #if finish label = 4361
  L_4361:
  j L_4355
  #inside else
  L_4357:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4383: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4384: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4382
  j L_4382
  #final label in binaryExp
  L_4382: 
  #jumpToAllOnlyIf
  L_4380:
  move $v0, $s4
  beqz $v0, L_4381
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4387: 
  move $v0, $s5
  sw $v0, T_4_7_154
  move $s4, $v0
  #final label in assignmentStatement
  L_4386: 
  #final label in statem expression
  L_4385: 
  j L_4379
  #inside else
  L_4381:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4390: 
  move $v0, $s5
  sw $v0, T_4_7_154
  move $s4, $v0
  #final label in assignmentStatement
  L_4389: 
  #final label in statem expression
  L_4388: 
  #if finish label = 4379
  L_4379:
  #if finish label = 4355
  L_4355:
  j L_4343
  #inside else
  L_4345:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4395: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_4396: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4394
  j L_4394
  #final label in binaryExp
  L_4394: 
  #jumpToAllOnlyIf
  L_4392:
  move $v0, $s4
  beqz $v0, L_4393
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4401: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4402: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4400: 
  #final label in codeGenAssignmentExpression
  L_4399: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4398: 
  #final label in statem expression
  L_4397: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_8_54
  move $s5, $v0
  L_4407: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4408: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4406
  j L_4406
  #final label in binaryExp
  L_4406: 
  #jumpToAllOnlyIf
  L_4404:
  move $v0, $s4
  beqz $v0, L_4405
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4416: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4417: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4415
  j L_4415
  #final label in binaryExp
  L_4415: 
  #T1Or
  L_4413:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4412
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4419: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4420: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4418
  j L_4418
  #final label in binaryExp
  L_4418: 
  #T2Or
  L_4414:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4412
  j L_4412
  #final label in binaryExp
  L_4412: 
  #jumpToAllOnlyIf
  L_4410:
  move $v0, $s4
  beqz $v0, L_4411
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4423: 
  move $v0, $s5
  sw $v0, T_4_8_155
  move $s4, $v0
  #final label in assignmentStatement
  L_4422: 
  #final label in statem expression
  L_4421: 
  j L_4409
  #inside else
  L_4411:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4426: 
  move $v0, $s5
  sw $v0, T_4_8_155
  move $s4, $v0
  #final label in assignmentStatement
  L_4425: 
  #final label in statem expression
  L_4424: 
  #if finish label = 4409
  L_4409:
  j L_4403
  #inside else
  L_4405:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4431: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4432: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4430
  j L_4430
  #final label in binaryExp
  L_4430: 
  #jumpToAllOnlyIf
  L_4428:
  move $v0, $s4
  beqz $v0, L_4429
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4435: 
  move $v0, $s5
  sw $v0, T_4_8_155
  move $s4, $v0
  #final label in assignmentStatement
  L_4434: 
  #final label in statem expression
  L_4433: 
  j L_4427
  #inside else
  L_4429:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4438: 
  move $v0, $s5
  sw $v0, T_4_8_155
  move $s4, $v0
  #final label in assignmentStatement
  L_4437: 
  #final label in statem expression
  L_4436: 
  #if finish label = 4427
  L_4427:
  #if finish label = 4403
  L_4403:
  j L_4391
  #inside else
  L_4393:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4442: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_4443: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4441
  j L_4441
  #final label in binaryExp
  L_4441: 
  #jumpToAllOnlyIf
  L_4440:
  move $v0, $s4
  beqz $v0, L_4439
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4448: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4449: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4447: 
  #final label in codeGenAssignmentExpression
  L_4446: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4445: 
  #final label in statem expression
  L_4444: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_4_9_55
  move $s5, $v0
  L_4454: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4455: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4453
  j L_4453
  #final label in binaryExp
  L_4453: 
  #jumpToAllOnlyIf
  L_4451:
  move $v0, $s4
  beqz $v0, L_4452
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4463: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4464: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4462
  j L_4462
  #final label in binaryExp
  L_4462: 
  #T1Or
  L_4460:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4459
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4466: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4467: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4465
  j L_4465
  #final label in binaryExp
  L_4465: 
  #T2Or
  L_4461:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4459
  j L_4459
  #final label in binaryExp
  L_4459: 
  #jumpToAllOnlyIf
  L_4457:
  move $v0, $s4
  beqz $v0, L_4458
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4470: 
  move $v0, $s5
  sw $v0, T_4_9_156
  move $s4, $v0
  #final label in assignmentStatement
  L_4469: 
  #final label in statem expression
  L_4468: 
  j L_4456
  #inside else
  L_4458:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4473: 
  move $v0, $s5
  sw $v0, T_4_9_156
  move $s4, $v0
  #final label in assignmentStatement
  L_4472: 
  #final label in statem expression
  L_4471: 
  #if finish label = 4456
  L_4456:
  j L_4450
  #inside else
  L_4452:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4478: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4479: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4477
  j L_4477
  #final label in binaryExp
  L_4477: 
  #jumpToAllOnlyIf
  L_4475:
  move $v0, $s4
  beqz $v0, L_4476
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4482: 
  move $v0, $s5
  sw $v0, T_4_9_156
  move $s4, $v0
  #final label in assignmentStatement
  L_4481: 
  #final label in statem expression
  L_4480: 
  j L_4474
  #inside else
  L_4476:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4485: 
  move $v0, $s5
  sw $v0, T_4_9_156
  move $s4, $v0
  #final label in assignmentStatement
  L_4484: 
  #final label in statem expression
  L_4483: 
  #if finish label = 4474
  L_4474:
  #if finish label = 4450
  L_4450:
  #if finish label = 4439
  L_4439:
  #if finish label = 4391
  L_4391:
  #if finish label = 4343
  L_4343:
  #if finish label = 4295
  L_4295:
  #if finish label = 4247
  L_4247:
  #if finish label = 4199
  L_4199:
  #if finish label = 4151
  L_4151:
  #if finish label = 4103
  L_4103:
  #if finish label = 4055
  L_4055:
  #if finish label = 4007
  L_4007:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_4490: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_4491: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4489
  j L_4489
  #final label in binaryExp
  L_4489: 
  #final label in codeGenAssignmentExpression
  L_4488: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4487: 
  #final label in statem expression
  L_4486: 
  #whileBodyEndJump
  L_4002:
  j  L_4000
  #while finish label = 3999
  L_3999:
  j L_3990
  #inside else
  L_3992:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_4496: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_4497: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4495
  j L_4495
  #final label in binaryExp
  L_4495: 
  #jumpToAllOnlyIf
  L_4493:
  move $v0, $s4
  beqz $v0, L_4494
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4500: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4499: 
  #final label in statem expression
  L_4498: 
  #starting while
  #start of while loop
  L_4502:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4506: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_4507: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4505
  j L_4505
  #final label in binaryExp
  L_4505: 
  #jumpToAllOnlyIf
  L_4503:
  move $v0, $s4
  bnez $v0, L_4508
  j L_4501
  #whileBodyLabel
  L_4508:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4513: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_4514: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4512
  j L_4512
  #final label in binaryExp
  L_4512: 
  #jumpToAllOnlyIf
  L_4510:
  move $v0, $s4
  beqz $v0, L_4511
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4519: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4520: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4518: 
  #final label in codeGenAssignmentExpression
  L_4517: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4516: 
  #final label in statem expression
  L_4515: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_0_56
  move $s5, $v0
  L_4525: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4526: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4524
  j L_4524
  #final label in binaryExp
  L_4524: 
  #jumpToAllOnlyIf
  L_4522:
  move $v0, $s4
  beqz $v0, L_4523
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4534: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4535: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4533
  j L_4533
  #final label in binaryExp
  L_4533: 
  #T1Or
  L_4531:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4530
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4537: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4538: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4536
  j L_4536
  #final label in binaryExp
  L_4536: 
  #T2Or
  L_4532:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4530
  j L_4530
  #final label in binaryExp
  L_4530: 
  #jumpToAllOnlyIf
  L_4528:
  move $v0, $s4
  beqz $v0, L_4529
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4541: 
  move $v0, $s5
  sw $v0, T_5_0_157
  move $s4, $v0
  #final label in assignmentStatement
  L_4540: 
  #final label in statem expression
  L_4539: 
  j L_4527
  #inside else
  L_4529:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4544: 
  move $v0, $s5
  sw $v0, T_5_0_157
  move $s4, $v0
  #final label in assignmentStatement
  L_4543: 
  #final label in statem expression
  L_4542: 
  #if finish label = 4527
  L_4527:
  j L_4521
  #inside else
  L_4523:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4549: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4550: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4548
  j L_4548
  #final label in binaryExp
  L_4548: 
  #jumpToAllOnlyIf
  L_4546:
  move $v0, $s4
  beqz $v0, L_4547
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4553: 
  move $v0, $s5
  sw $v0, T_5_0_157
  move $s4, $v0
  #final label in assignmentStatement
  L_4552: 
  #final label in statem expression
  L_4551: 
  j L_4545
  #inside else
  L_4547:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4556: 
  move $v0, $s5
  sw $v0, T_5_0_157
  move $s4, $v0
  #final label in assignmentStatement
  L_4555: 
  #final label in statem expression
  L_4554: 
  #if finish label = 4545
  L_4545:
  #if finish label = 4521
  L_4521:
  j L_4509
  #inside else
  L_4511:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4561: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4562: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4560
  j L_4560
  #final label in binaryExp
  L_4560: 
  #jumpToAllOnlyIf
  L_4558:
  move $v0, $s4
  beqz $v0, L_4559
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4567: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4568: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4566: 
  #final label in codeGenAssignmentExpression
  L_4565: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4564: 
  #final label in statem expression
  L_4563: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_1_57
  move $s5, $v0
  L_4573: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4574: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4572
  j L_4572
  #final label in binaryExp
  L_4572: 
  #jumpToAllOnlyIf
  L_4570:
  move $v0, $s4
  beqz $v0, L_4571
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4582: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4583: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4581
  j L_4581
  #final label in binaryExp
  L_4581: 
  #T1Or
  L_4579:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4578
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4585: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4586: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4584
  j L_4584
  #final label in binaryExp
  L_4584: 
  #T2Or
  L_4580:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4578
  j L_4578
  #final label in binaryExp
  L_4578: 
  #jumpToAllOnlyIf
  L_4576:
  move $v0, $s4
  beqz $v0, L_4577
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4589: 
  move $v0, $s5
  sw $v0, T_5_1_158
  move $s4, $v0
  #final label in assignmentStatement
  L_4588: 
  #final label in statem expression
  L_4587: 
  j L_4575
  #inside else
  L_4577:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4592: 
  move $v0, $s5
  sw $v0, T_5_1_158
  move $s4, $v0
  #final label in assignmentStatement
  L_4591: 
  #final label in statem expression
  L_4590: 
  #if finish label = 4575
  L_4575:
  j L_4569
  #inside else
  L_4571:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4597: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4598: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4596
  j L_4596
  #final label in binaryExp
  L_4596: 
  #jumpToAllOnlyIf
  L_4594:
  move $v0, $s4
  beqz $v0, L_4595
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4601: 
  move $v0, $s5
  sw $v0, T_5_1_158
  move $s4, $v0
  #final label in assignmentStatement
  L_4600: 
  #final label in statem expression
  L_4599: 
  j L_4593
  #inside else
  L_4595:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4604: 
  move $v0, $s5
  sw $v0, T_5_1_158
  move $s4, $v0
  #final label in assignmentStatement
  L_4603: 
  #final label in statem expression
  L_4602: 
  #if finish label = 4593
  L_4593:
  #if finish label = 4569
  L_4569:
  j L_4557
  #inside else
  L_4559:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4609: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_4610: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4608
  j L_4608
  #final label in binaryExp
  L_4608: 
  #jumpToAllOnlyIf
  L_4606:
  move $v0, $s4
  beqz $v0, L_4607
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4615: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4616: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4614: 
  #final label in codeGenAssignmentExpression
  L_4613: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4612: 
  #final label in statem expression
  L_4611: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_2_58
  move $s5, $v0
  L_4621: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4622: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4620
  j L_4620
  #final label in binaryExp
  L_4620: 
  #jumpToAllOnlyIf
  L_4618:
  move $v0, $s4
  beqz $v0, L_4619
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4630: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4631: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4629
  j L_4629
  #final label in binaryExp
  L_4629: 
  #T1Or
  L_4627:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4626
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4633: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4634: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4632
  j L_4632
  #final label in binaryExp
  L_4632: 
  #T2Or
  L_4628:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4626
  j L_4626
  #final label in binaryExp
  L_4626: 
  #jumpToAllOnlyIf
  L_4624:
  move $v0, $s4
  beqz $v0, L_4625
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4637: 
  move $v0, $s5
  sw $v0, T_5_2_159
  move $s4, $v0
  #final label in assignmentStatement
  L_4636: 
  #final label in statem expression
  L_4635: 
  j L_4623
  #inside else
  L_4625:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4640: 
  move $v0, $s5
  sw $v0, T_5_2_159
  move $s4, $v0
  #final label in assignmentStatement
  L_4639: 
  #final label in statem expression
  L_4638: 
  #if finish label = 4623
  L_4623:
  j L_4617
  #inside else
  L_4619:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4645: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4646: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4644
  j L_4644
  #final label in binaryExp
  L_4644: 
  #jumpToAllOnlyIf
  L_4642:
  move $v0, $s4
  beqz $v0, L_4643
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4649: 
  move $v0, $s5
  sw $v0, T_5_2_159
  move $s4, $v0
  #final label in assignmentStatement
  L_4648: 
  #final label in statem expression
  L_4647: 
  j L_4641
  #inside else
  L_4643:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4652: 
  move $v0, $s5
  sw $v0, T_5_2_159
  move $s4, $v0
  #final label in assignmentStatement
  L_4651: 
  #final label in statem expression
  L_4650: 
  #if finish label = 4641
  L_4641:
  #if finish label = 4617
  L_4617:
  j L_4605
  #inside else
  L_4607:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4657: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4658: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4656
  j L_4656
  #final label in binaryExp
  L_4656: 
  #jumpToAllOnlyIf
  L_4654:
  move $v0, $s4
  beqz $v0, L_4655
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4663: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4664: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4662: 
  #final label in codeGenAssignmentExpression
  L_4661: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4660: 
  #final label in statem expression
  L_4659: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_3_59
  move $s5, $v0
  L_4669: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4670: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4668
  j L_4668
  #final label in binaryExp
  L_4668: 
  #jumpToAllOnlyIf
  L_4666:
  move $v0, $s4
  beqz $v0, L_4667
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4678: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4679: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4677
  j L_4677
  #final label in binaryExp
  L_4677: 
  #T1Or
  L_4675:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4674
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4681: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4682: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4680
  j L_4680
  #final label in binaryExp
  L_4680: 
  #T2Or
  L_4676:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4674
  j L_4674
  #final label in binaryExp
  L_4674: 
  #jumpToAllOnlyIf
  L_4672:
  move $v0, $s4
  beqz $v0, L_4673
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4685: 
  move $v0, $s5
  sw $v0, T_5_3_160
  move $s4, $v0
  #final label in assignmentStatement
  L_4684: 
  #final label in statem expression
  L_4683: 
  j L_4671
  #inside else
  L_4673:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4688: 
  move $v0, $s5
  sw $v0, T_5_3_160
  move $s4, $v0
  #final label in assignmentStatement
  L_4687: 
  #final label in statem expression
  L_4686: 
  #if finish label = 4671
  L_4671:
  j L_4665
  #inside else
  L_4667:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4693: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4694: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4692
  j L_4692
  #final label in binaryExp
  L_4692: 
  #jumpToAllOnlyIf
  L_4690:
  move $v0, $s4
  beqz $v0, L_4691
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4697: 
  move $v0, $s5
  sw $v0, T_5_3_160
  move $s4, $v0
  #final label in assignmentStatement
  L_4696: 
  #final label in statem expression
  L_4695: 
  j L_4689
  #inside else
  L_4691:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4700: 
  move $v0, $s5
  sw $v0, T_5_3_160
  move $s4, $v0
  #final label in assignmentStatement
  L_4699: 
  #final label in statem expression
  L_4698: 
  #if finish label = 4689
  L_4689:
  #if finish label = 4665
  L_4665:
  j L_4653
  #inside else
  L_4655:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4705: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_4706: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4704
  j L_4704
  #final label in binaryExp
  L_4704: 
  #jumpToAllOnlyIf
  L_4702:
  move $v0, $s4
  beqz $v0, L_4703
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4711: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4712: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4710: 
  #final label in codeGenAssignmentExpression
  L_4709: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4708: 
  #final label in statem expression
  L_4707: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_4_60
  move $s5, $v0
  L_4717: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4718: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4716
  j L_4716
  #final label in binaryExp
  L_4716: 
  #jumpToAllOnlyIf
  L_4714:
  move $v0, $s4
  beqz $v0, L_4715
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4726: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4727: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4725
  j L_4725
  #final label in binaryExp
  L_4725: 
  #T1Or
  L_4723:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4722
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4729: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4730: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4728
  j L_4728
  #final label in binaryExp
  L_4728: 
  #T2Or
  L_4724:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4722
  j L_4722
  #final label in binaryExp
  L_4722: 
  #jumpToAllOnlyIf
  L_4720:
  move $v0, $s4
  beqz $v0, L_4721
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4733: 
  move $v0, $s5
  sw $v0, T_5_4_161
  move $s4, $v0
  #final label in assignmentStatement
  L_4732: 
  #final label in statem expression
  L_4731: 
  j L_4719
  #inside else
  L_4721:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4736: 
  move $v0, $s5
  sw $v0, T_5_4_161
  move $s4, $v0
  #final label in assignmentStatement
  L_4735: 
  #final label in statem expression
  L_4734: 
  #if finish label = 4719
  L_4719:
  j L_4713
  #inside else
  L_4715:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4741: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4742: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4740
  j L_4740
  #final label in binaryExp
  L_4740: 
  #jumpToAllOnlyIf
  L_4738:
  move $v0, $s4
  beqz $v0, L_4739
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4745: 
  move $v0, $s5
  sw $v0, T_5_4_161
  move $s4, $v0
  #final label in assignmentStatement
  L_4744: 
  #final label in statem expression
  L_4743: 
  j L_4737
  #inside else
  L_4739:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4748: 
  move $v0, $s5
  sw $v0, T_5_4_161
  move $s4, $v0
  #final label in assignmentStatement
  L_4747: 
  #final label in statem expression
  L_4746: 
  #if finish label = 4737
  L_4737:
  #if finish label = 4713
  L_4713:
  j L_4701
  #inside else
  L_4703:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4753: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_4754: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4752
  j L_4752
  #final label in binaryExp
  L_4752: 
  #jumpToAllOnlyIf
  L_4750:
  move $v0, $s4
  beqz $v0, L_4751
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4759: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4760: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4758: 
  #final label in codeGenAssignmentExpression
  L_4757: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4756: 
  #final label in statem expression
  L_4755: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_5_61
  move $s5, $v0
  L_4765: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4766: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4764
  j L_4764
  #final label in binaryExp
  L_4764: 
  #jumpToAllOnlyIf
  L_4762:
  move $v0, $s4
  beqz $v0, L_4763
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4774: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4775: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4773
  j L_4773
  #final label in binaryExp
  L_4773: 
  #T1Or
  L_4771:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4770
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4777: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4778: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4776
  j L_4776
  #final label in binaryExp
  L_4776: 
  #T2Or
  L_4772:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4770
  j L_4770
  #final label in binaryExp
  L_4770: 
  #jumpToAllOnlyIf
  L_4768:
  move $v0, $s4
  beqz $v0, L_4769
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4781: 
  move $v0, $s5
  sw $v0, T_5_5_162
  move $s4, $v0
  #final label in assignmentStatement
  L_4780: 
  #final label in statem expression
  L_4779: 
  j L_4767
  #inside else
  L_4769:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4784: 
  move $v0, $s5
  sw $v0, T_5_5_162
  move $s4, $v0
  #final label in assignmentStatement
  L_4783: 
  #final label in statem expression
  L_4782: 
  #if finish label = 4767
  L_4767:
  j L_4761
  #inside else
  L_4763:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4789: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4790: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4788
  j L_4788
  #final label in binaryExp
  L_4788: 
  #jumpToAllOnlyIf
  L_4786:
  move $v0, $s4
  beqz $v0, L_4787
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4793: 
  move $v0, $s5
  sw $v0, T_5_5_162
  move $s4, $v0
  #final label in assignmentStatement
  L_4792: 
  #final label in statem expression
  L_4791: 
  j L_4785
  #inside else
  L_4787:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4796: 
  move $v0, $s5
  sw $v0, T_5_5_162
  move $s4, $v0
  #final label in assignmentStatement
  L_4795: 
  #final label in statem expression
  L_4794: 
  #if finish label = 4785
  L_4785:
  #if finish label = 4761
  L_4761:
  j L_4749
  #inside else
  L_4751:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4801: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_4802: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4800
  j L_4800
  #final label in binaryExp
  L_4800: 
  #jumpToAllOnlyIf
  L_4798:
  move $v0, $s4
  beqz $v0, L_4799
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4807: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4808: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4806: 
  #final label in codeGenAssignmentExpression
  L_4805: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4804: 
  #final label in statem expression
  L_4803: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_6_62
  move $s5, $v0
  L_4813: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4814: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4812
  j L_4812
  #final label in binaryExp
  L_4812: 
  #jumpToAllOnlyIf
  L_4810:
  move $v0, $s4
  beqz $v0, L_4811
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4822: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4823: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4821
  j L_4821
  #final label in binaryExp
  L_4821: 
  #T1Or
  L_4819:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4818
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4825: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4826: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4824
  j L_4824
  #final label in binaryExp
  L_4824: 
  #T2Or
  L_4820:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4818
  j L_4818
  #final label in binaryExp
  L_4818: 
  #jumpToAllOnlyIf
  L_4816:
  move $v0, $s4
  beqz $v0, L_4817
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4829: 
  move $v0, $s5
  sw $v0, T_5_6_163
  move $s4, $v0
  #final label in assignmentStatement
  L_4828: 
  #final label in statem expression
  L_4827: 
  j L_4815
  #inside else
  L_4817:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4832: 
  move $v0, $s5
  sw $v0, T_5_6_163
  move $s4, $v0
  #final label in assignmentStatement
  L_4831: 
  #final label in statem expression
  L_4830: 
  #if finish label = 4815
  L_4815:
  j L_4809
  #inside else
  L_4811:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4837: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4838: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4836
  j L_4836
  #final label in binaryExp
  L_4836: 
  #jumpToAllOnlyIf
  L_4834:
  move $v0, $s4
  beqz $v0, L_4835
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4841: 
  move $v0, $s5
  sw $v0, T_5_6_163
  move $s4, $v0
  #final label in assignmentStatement
  L_4840: 
  #final label in statem expression
  L_4839: 
  j L_4833
  #inside else
  L_4835:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4844: 
  move $v0, $s5
  sw $v0, T_5_6_163
  move $s4, $v0
  #final label in assignmentStatement
  L_4843: 
  #final label in statem expression
  L_4842: 
  #if finish label = 4833
  L_4833:
  #if finish label = 4809
  L_4809:
  j L_4797
  #inside else
  L_4799:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4849: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_4850: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4848
  j L_4848
  #final label in binaryExp
  L_4848: 
  #jumpToAllOnlyIf
  L_4846:
  move $v0, $s4
  beqz $v0, L_4847
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4855: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4856: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4854: 
  #final label in codeGenAssignmentExpression
  L_4853: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4852: 
  #final label in statem expression
  L_4851: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_7_63
  move $s5, $v0
  L_4861: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4862: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4860
  j L_4860
  #final label in binaryExp
  L_4860: 
  #jumpToAllOnlyIf
  L_4858:
  move $v0, $s4
  beqz $v0, L_4859
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4870: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4871: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4869
  j L_4869
  #final label in binaryExp
  L_4869: 
  #T1Or
  L_4867:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4866
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4873: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4874: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4872
  j L_4872
  #final label in binaryExp
  L_4872: 
  #T2Or
  L_4868:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4866
  j L_4866
  #final label in binaryExp
  L_4866: 
  #jumpToAllOnlyIf
  L_4864:
  move $v0, $s4
  beqz $v0, L_4865
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4877: 
  move $v0, $s5
  sw $v0, T_5_7_164
  move $s4, $v0
  #final label in assignmentStatement
  L_4876: 
  #final label in statem expression
  L_4875: 
  j L_4863
  #inside else
  L_4865:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4880: 
  move $v0, $s5
  sw $v0, T_5_7_164
  move $s4, $v0
  #final label in assignmentStatement
  L_4879: 
  #final label in statem expression
  L_4878: 
  #if finish label = 4863
  L_4863:
  j L_4857
  #inside else
  L_4859:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4885: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4886: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4884
  j L_4884
  #final label in binaryExp
  L_4884: 
  #jumpToAllOnlyIf
  L_4882:
  move $v0, $s4
  beqz $v0, L_4883
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4889: 
  move $v0, $s5
  sw $v0, T_5_7_164
  move $s4, $v0
  #final label in assignmentStatement
  L_4888: 
  #final label in statem expression
  L_4887: 
  j L_4881
  #inside else
  L_4883:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4892: 
  move $v0, $s5
  sw $v0, T_5_7_164
  move $s4, $v0
  #final label in assignmentStatement
  L_4891: 
  #final label in statem expression
  L_4890: 
  #if finish label = 4881
  L_4881:
  #if finish label = 4857
  L_4857:
  j L_4845
  #inside else
  L_4847:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4897: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_4898: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4896
  j L_4896
  #final label in binaryExp
  L_4896: 
  #jumpToAllOnlyIf
  L_4894:
  move $v0, $s4
  beqz $v0, L_4895
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4903: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4904: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4902: 
  #final label in codeGenAssignmentExpression
  L_4901: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4900: 
  #final label in statem expression
  L_4899: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_8_64
  move $s5, $v0
  L_4909: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4910: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4908
  j L_4908
  #final label in binaryExp
  L_4908: 
  #jumpToAllOnlyIf
  L_4906:
  move $v0, $s4
  beqz $v0, L_4907
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4918: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4919: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4917
  j L_4917
  #final label in binaryExp
  L_4917: 
  #T1Or
  L_4915:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4914
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4921: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4922: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4920
  j L_4920
  #final label in binaryExp
  L_4920: 
  #T2Or
  L_4916:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4914
  j L_4914
  #final label in binaryExp
  L_4914: 
  #jumpToAllOnlyIf
  L_4912:
  move $v0, $s4
  beqz $v0, L_4913
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4925: 
  move $v0, $s5
  sw $v0, T_5_8_165
  move $s4, $v0
  #final label in assignmentStatement
  L_4924: 
  #final label in statem expression
  L_4923: 
  j L_4911
  #inside else
  L_4913:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4928: 
  move $v0, $s5
  sw $v0, T_5_8_165
  move $s4, $v0
  #final label in assignmentStatement
  L_4927: 
  #final label in statem expression
  L_4926: 
  #if finish label = 4911
  L_4911:
  j L_4905
  #inside else
  L_4907:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4933: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4934: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4932
  j L_4932
  #final label in binaryExp
  L_4932: 
  #jumpToAllOnlyIf
  L_4930:
  move $v0, $s4
  beqz $v0, L_4931
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4937: 
  move $v0, $s5
  sw $v0, T_5_8_165
  move $s4, $v0
  #final label in assignmentStatement
  L_4936: 
  #final label in statem expression
  L_4935: 
  j L_4929
  #inside else
  L_4931:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4940: 
  move $v0, $s5
  sw $v0, T_5_8_165
  move $s4, $v0
  #final label in assignmentStatement
  L_4939: 
  #final label in statem expression
  L_4938: 
  #if finish label = 4929
  L_4929:
  #if finish label = 4905
  L_4905:
  j L_4893
  #inside else
  L_4895:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_4944: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_4945: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4943
  j L_4943
  #final label in binaryExp
  L_4943: 
  #jumpToAllOnlyIf
  L_4942:
  move $v0, $s4
  beqz $v0, L_4941
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_4950: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_4951: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_4949: 
  #final label in codeGenAssignmentExpression
  L_4948: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4947: 
  #final label in statem expression
  L_4946: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_5_9_65
  move $s5, $v0
  L_4956: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_4957: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4955
  j L_4955
  #final label in binaryExp
  L_4955: 
  #jumpToAllOnlyIf
  L_4953:
  move $v0, $s4
  beqz $v0, L_4954
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4965: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_4966: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4964
  j L_4964
  #final label in binaryExp
  L_4964: 
  #T1Or
  L_4962:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4961
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_4968: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_4969: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4967
  j L_4967
  #final label in binaryExp
  L_4967: 
  #T2Or
  L_4963:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_4961
  j L_4961
  #final label in binaryExp
  L_4961: 
  #jumpToAllOnlyIf
  L_4959:
  move $v0, $s4
  beqz $v0, L_4960
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4972: 
  move $v0, $s5
  sw $v0, T_5_9_166
  move $s4, $v0
  #final label in assignmentStatement
  L_4971: 
  #final label in statem expression
  L_4970: 
  j L_4958
  #inside else
  L_4960:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4975: 
  move $v0, $s5
  sw $v0, T_5_9_166
  move $s4, $v0
  #final label in assignmentStatement
  L_4974: 
  #final label in statem expression
  L_4973: 
  #if finish label = 4958
  L_4958:
  j L_4952
  #inside else
  L_4954:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_4980: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_4981: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4979
  j L_4979
  #final label in binaryExp
  L_4979: 
  #jumpToAllOnlyIf
  L_4977:
  move $v0, $s4
  beqz $v0, L_4978
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4984: 
  move $v0, $s5
  sw $v0, T_5_9_166
  move $s4, $v0
  #final label in assignmentStatement
  L_4983: 
  #final label in statem expression
  L_4982: 
  j L_4976
  #inside else
  L_4978:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_4987: 
  move $v0, $s5
  sw $v0, T_5_9_166
  move $s4, $v0
  #final label in assignmentStatement
  L_4986: 
  #final label in statem expression
  L_4985: 
  #if finish label = 4976
  L_4976:
  #if finish label = 4952
  L_4952:
  #if finish label = 4941
  L_4941:
  #if finish label = 4893
  L_4893:
  #if finish label = 4845
  L_4845:
  #if finish label = 4797
  L_4797:
  #if finish label = 4749
  L_4749:
  #if finish label = 4701
  L_4701:
  #if finish label = 4653
  L_4653:
  #if finish label = 4605
  L_4605:
  #if finish label = 4557
  L_4557:
  #if finish label = 4509
  L_4509:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_4992: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_4993: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_4991
  j L_4991
  #final label in binaryExp
  L_4991: 
  #final label in codeGenAssignmentExpression
  L_4990: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_4989: 
  #final label in statem expression
  L_4988: 
  #whileBodyEndJump
  L_4504:
  j  L_4502
  #while finish label = 4501
  L_4501:
  j L_4492
  #inside else
  L_4494:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_4998: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_4999: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_4997
  j L_4997
  #final label in binaryExp
  L_4997: 
  #jumpToAllOnlyIf
  L_4995:
  move $v0, $s4
  beqz $v0, L_4996
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5002: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5001: 
  #final label in statem expression
  L_5000: 
  #starting while
  #start of while loop
  L_5004:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5008: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_5009: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5007
  j L_5007
  #final label in binaryExp
  L_5007: 
  #jumpToAllOnlyIf
  L_5005:
  move $v0, $s4
  bnez $v0, L_5010
  j L_5003
  #whileBodyLabel
  L_5010:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5015: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_5016: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5014
  j L_5014
  #final label in binaryExp
  L_5014: 
  #jumpToAllOnlyIf
  L_5012:
  move $v0, $s4
  beqz $v0, L_5013
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5021: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5022: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5020: 
  #final label in codeGenAssignmentExpression
  L_5019: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5018: 
  #final label in statem expression
  L_5017: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_0_66
  move $s5, $v0
  L_5027: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5028: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5026
  j L_5026
  #final label in binaryExp
  L_5026: 
  #jumpToAllOnlyIf
  L_5024:
  move $v0, $s4
  beqz $v0, L_5025
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5036: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5037: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5035
  j L_5035
  #final label in binaryExp
  L_5035: 
  #T1Or
  L_5033:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5032
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5039: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5040: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5038
  j L_5038
  #final label in binaryExp
  L_5038: 
  #T2Or
  L_5034:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5032
  j L_5032
  #final label in binaryExp
  L_5032: 
  #jumpToAllOnlyIf
  L_5030:
  move $v0, $s4
  beqz $v0, L_5031
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5043: 
  move $v0, $s5
  sw $v0, T_6_0_167
  move $s4, $v0
  #final label in assignmentStatement
  L_5042: 
  #final label in statem expression
  L_5041: 
  j L_5029
  #inside else
  L_5031:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5046: 
  move $v0, $s5
  sw $v0, T_6_0_167
  move $s4, $v0
  #final label in assignmentStatement
  L_5045: 
  #final label in statem expression
  L_5044: 
  #if finish label = 5029
  L_5029:
  j L_5023
  #inside else
  L_5025:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5051: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5052: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5050
  j L_5050
  #final label in binaryExp
  L_5050: 
  #jumpToAllOnlyIf
  L_5048:
  move $v0, $s4
  beqz $v0, L_5049
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5055: 
  move $v0, $s5
  sw $v0, T_6_0_167
  move $s4, $v0
  #final label in assignmentStatement
  L_5054: 
  #final label in statem expression
  L_5053: 
  j L_5047
  #inside else
  L_5049:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5058: 
  move $v0, $s5
  sw $v0, T_6_0_167
  move $s4, $v0
  #final label in assignmentStatement
  L_5057: 
  #final label in statem expression
  L_5056: 
  #if finish label = 5047
  L_5047:
  #if finish label = 5023
  L_5023:
  j L_5011
  #inside else
  L_5013:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5063: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5064: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5062
  j L_5062
  #final label in binaryExp
  L_5062: 
  #jumpToAllOnlyIf
  L_5060:
  move $v0, $s4
  beqz $v0, L_5061
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5069: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5070: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5068: 
  #final label in codeGenAssignmentExpression
  L_5067: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5066: 
  #final label in statem expression
  L_5065: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_1_67
  move $s5, $v0
  L_5075: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5076: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5074
  j L_5074
  #final label in binaryExp
  L_5074: 
  #jumpToAllOnlyIf
  L_5072:
  move $v0, $s4
  beqz $v0, L_5073
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5084: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5085: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5083
  j L_5083
  #final label in binaryExp
  L_5083: 
  #T1Or
  L_5081:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5080
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5087: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5088: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5086
  j L_5086
  #final label in binaryExp
  L_5086: 
  #T2Or
  L_5082:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5080
  j L_5080
  #final label in binaryExp
  L_5080: 
  #jumpToAllOnlyIf
  L_5078:
  move $v0, $s4
  beqz $v0, L_5079
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5091: 
  move $v0, $s5
  sw $v0, T_6_1_168
  move $s4, $v0
  #final label in assignmentStatement
  L_5090: 
  #final label in statem expression
  L_5089: 
  j L_5077
  #inside else
  L_5079:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5094: 
  move $v0, $s5
  sw $v0, T_6_1_168
  move $s4, $v0
  #final label in assignmentStatement
  L_5093: 
  #final label in statem expression
  L_5092: 
  #if finish label = 5077
  L_5077:
  j L_5071
  #inside else
  L_5073:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5099: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5100: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5098
  j L_5098
  #final label in binaryExp
  L_5098: 
  #jumpToAllOnlyIf
  L_5096:
  move $v0, $s4
  beqz $v0, L_5097
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5103: 
  move $v0, $s5
  sw $v0, T_6_1_168
  move $s4, $v0
  #final label in assignmentStatement
  L_5102: 
  #final label in statem expression
  L_5101: 
  j L_5095
  #inside else
  L_5097:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5106: 
  move $v0, $s5
  sw $v0, T_6_1_168
  move $s4, $v0
  #final label in assignmentStatement
  L_5105: 
  #final label in statem expression
  L_5104: 
  #if finish label = 5095
  L_5095:
  #if finish label = 5071
  L_5071:
  j L_5059
  #inside else
  L_5061:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5111: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_5112: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5110
  j L_5110
  #final label in binaryExp
  L_5110: 
  #jumpToAllOnlyIf
  L_5108:
  move $v0, $s4
  beqz $v0, L_5109
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5117: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5118: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5116: 
  #final label in codeGenAssignmentExpression
  L_5115: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5114: 
  #final label in statem expression
  L_5113: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_2_68
  move $s5, $v0
  L_5123: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5124: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5122
  j L_5122
  #final label in binaryExp
  L_5122: 
  #jumpToAllOnlyIf
  L_5120:
  move $v0, $s4
  beqz $v0, L_5121
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5132: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5133: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5131
  j L_5131
  #final label in binaryExp
  L_5131: 
  #T1Or
  L_5129:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5128
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5135: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5136: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5134
  j L_5134
  #final label in binaryExp
  L_5134: 
  #T2Or
  L_5130:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5128
  j L_5128
  #final label in binaryExp
  L_5128: 
  #jumpToAllOnlyIf
  L_5126:
  move $v0, $s4
  beqz $v0, L_5127
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5139: 
  move $v0, $s5
  sw $v0, T_6_2_169
  move $s4, $v0
  #final label in assignmentStatement
  L_5138: 
  #final label in statem expression
  L_5137: 
  j L_5125
  #inside else
  L_5127:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5142: 
  move $v0, $s5
  sw $v0, T_6_2_169
  move $s4, $v0
  #final label in assignmentStatement
  L_5141: 
  #final label in statem expression
  L_5140: 
  #if finish label = 5125
  L_5125:
  j L_5119
  #inside else
  L_5121:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5147: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5148: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5146
  j L_5146
  #final label in binaryExp
  L_5146: 
  #jumpToAllOnlyIf
  L_5144:
  move $v0, $s4
  beqz $v0, L_5145
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5151: 
  move $v0, $s5
  sw $v0, T_6_2_169
  move $s4, $v0
  #final label in assignmentStatement
  L_5150: 
  #final label in statem expression
  L_5149: 
  j L_5143
  #inside else
  L_5145:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5154: 
  move $v0, $s5
  sw $v0, T_6_2_169
  move $s4, $v0
  #final label in assignmentStatement
  L_5153: 
  #final label in statem expression
  L_5152: 
  #if finish label = 5143
  L_5143:
  #if finish label = 5119
  L_5119:
  j L_5107
  #inside else
  L_5109:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5159: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5160: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5158
  j L_5158
  #final label in binaryExp
  L_5158: 
  #jumpToAllOnlyIf
  L_5156:
  move $v0, $s4
  beqz $v0, L_5157
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5165: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5166: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5164: 
  #final label in codeGenAssignmentExpression
  L_5163: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5162: 
  #final label in statem expression
  L_5161: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_3_69
  move $s5, $v0
  L_5171: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5172: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5170
  j L_5170
  #final label in binaryExp
  L_5170: 
  #jumpToAllOnlyIf
  L_5168:
  move $v0, $s4
  beqz $v0, L_5169
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5180: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5181: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5179
  j L_5179
  #final label in binaryExp
  L_5179: 
  #T1Or
  L_5177:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5176
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5183: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5184: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5182
  j L_5182
  #final label in binaryExp
  L_5182: 
  #T2Or
  L_5178:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5176
  j L_5176
  #final label in binaryExp
  L_5176: 
  #jumpToAllOnlyIf
  L_5174:
  move $v0, $s4
  beqz $v0, L_5175
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5187: 
  move $v0, $s5
  sw $v0, T_6_3_170
  move $s4, $v0
  #final label in assignmentStatement
  L_5186: 
  #final label in statem expression
  L_5185: 
  j L_5173
  #inside else
  L_5175:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5190: 
  move $v0, $s5
  sw $v0, T_6_3_170
  move $s4, $v0
  #final label in assignmentStatement
  L_5189: 
  #final label in statem expression
  L_5188: 
  #if finish label = 5173
  L_5173:
  j L_5167
  #inside else
  L_5169:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5195: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5196: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5194
  j L_5194
  #final label in binaryExp
  L_5194: 
  #jumpToAllOnlyIf
  L_5192:
  move $v0, $s4
  beqz $v0, L_5193
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5199: 
  move $v0, $s5
  sw $v0, T_6_3_170
  move $s4, $v0
  #final label in assignmentStatement
  L_5198: 
  #final label in statem expression
  L_5197: 
  j L_5191
  #inside else
  L_5193:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5202: 
  move $v0, $s5
  sw $v0, T_6_3_170
  move $s4, $v0
  #final label in assignmentStatement
  L_5201: 
  #final label in statem expression
  L_5200: 
  #if finish label = 5191
  L_5191:
  #if finish label = 5167
  L_5167:
  j L_5155
  #inside else
  L_5157:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5207: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_5208: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5206
  j L_5206
  #final label in binaryExp
  L_5206: 
  #jumpToAllOnlyIf
  L_5204:
  move $v0, $s4
  beqz $v0, L_5205
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5213: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5214: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5212: 
  #final label in codeGenAssignmentExpression
  L_5211: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5210: 
  #final label in statem expression
  L_5209: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_4_70
  move $s5, $v0
  L_5219: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5220: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5218
  j L_5218
  #final label in binaryExp
  L_5218: 
  #jumpToAllOnlyIf
  L_5216:
  move $v0, $s4
  beqz $v0, L_5217
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5228: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5229: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5227
  j L_5227
  #final label in binaryExp
  L_5227: 
  #T1Or
  L_5225:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5224
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5231: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5232: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5230
  j L_5230
  #final label in binaryExp
  L_5230: 
  #T2Or
  L_5226:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5224
  j L_5224
  #final label in binaryExp
  L_5224: 
  #jumpToAllOnlyIf
  L_5222:
  move $v0, $s4
  beqz $v0, L_5223
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5235: 
  move $v0, $s5
  sw $v0, T_6_4_171
  move $s4, $v0
  #final label in assignmentStatement
  L_5234: 
  #final label in statem expression
  L_5233: 
  j L_5221
  #inside else
  L_5223:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5238: 
  move $v0, $s5
  sw $v0, T_6_4_171
  move $s4, $v0
  #final label in assignmentStatement
  L_5237: 
  #final label in statem expression
  L_5236: 
  #if finish label = 5221
  L_5221:
  j L_5215
  #inside else
  L_5217:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5243: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5244: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5242
  j L_5242
  #final label in binaryExp
  L_5242: 
  #jumpToAllOnlyIf
  L_5240:
  move $v0, $s4
  beqz $v0, L_5241
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5247: 
  move $v0, $s5
  sw $v0, T_6_4_171
  move $s4, $v0
  #final label in assignmentStatement
  L_5246: 
  #final label in statem expression
  L_5245: 
  j L_5239
  #inside else
  L_5241:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5250: 
  move $v0, $s5
  sw $v0, T_6_4_171
  move $s4, $v0
  #final label in assignmentStatement
  L_5249: 
  #final label in statem expression
  L_5248: 
  #if finish label = 5239
  L_5239:
  #if finish label = 5215
  L_5215:
  j L_5203
  #inside else
  L_5205:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5255: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_5256: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5254
  j L_5254
  #final label in binaryExp
  L_5254: 
  #jumpToAllOnlyIf
  L_5252:
  move $v0, $s4
  beqz $v0, L_5253
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5261: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5262: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5260: 
  #final label in codeGenAssignmentExpression
  L_5259: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5258: 
  #final label in statem expression
  L_5257: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_5_71
  move $s5, $v0
  L_5267: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5268: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5266
  j L_5266
  #final label in binaryExp
  L_5266: 
  #jumpToAllOnlyIf
  L_5264:
  move $v0, $s4
  beqz $v0, L_5265
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5276: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5277: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5275
  j L_5275
  #final label in binaryExp
  L_5275: 
  #T1Or
  L_5273:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5272
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5279: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5280: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5278
  j L_5278
  #final label in binaryExp
  L_5278: 
  #T2Or
  L_5274:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5272
  j L_5272
  #final label in binaryExp
  L_5272: 
  #jumpToAllOnlyIf
  L_5270:
  move $v0, $s4
  beqz $v0, L_5271
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5283: 
  move $v0, $s5
  sw $v0, T_6_5_172
  move $s4, $v0
  #final label in assignmentStatement
  L_5282: 
  #final label in statem expression
  L_5281: 
  j L_5269
  #inside else
  L_5271:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5286: 
  move $v0, $s5
  sw $v0, T_6_5_172
  move $s4, $v0
  #final label in assignmentStatement
  L_5285: 
  #final label in statem expression
  L_5284: 
  #if finish label = 5269
  L_5269:
  j L_5263
  #inside else
  L_5265:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5291: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5292: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5290
  j L_5290
  #final label in binaryExp
  L_5290: 
  #jumpToAllOnlyIf
  L_5288:
  move $v0, $s4
  beqz $v0, L_5289
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5295: 
  move $v0, $s5
  sw $v0, T_6_5_172
  move $s4, $v0
  #final label in assignmentStatement
  L_5294: 
  #final label in statem expression
  L_5293: 
  j L_5287
  #inside else
  L_5289:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5298: 
  move $v0, $s5
  sw $v0, T_6_5_172
  move $s4, $v0
  #final label in assignmentStatement
  L_5297: 
  #final label in statem expression
  L_5296: 
  #if finish label = 5287
  L_5287:
  #if finish label = 5263
  L_5263:
  j L_5251
  #inside else
  L_5253:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5303: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_5304: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5302
  j L_5302
  #final label in binaryExp
  L_5302: 
  #jumpToAllOnlyIf
  L_5300:
  move $v0, $s4
  beqz $v0, L_5301
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5309: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5310: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5308: 
  #final label in codeGenAssignmentExpression
  L_5307: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5306: 
  #final label in statem expression
  L_5305: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_6_72
  move $s5, $v0
  L_5315: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5316: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5314
  j L_5314
  #final label in binaryExp
  L_5314: 
  #jumpToAllOnlyIf
  L_5312:
  move $v0, $s4
  beqz $v0, L_5313
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5324: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5325: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5323
  j L_5323
  #final label in binaryExp
  L_5323: 
  #T1Or
  L_5321:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5320
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5327: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5328: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5326
  j L_5326
  #final label in binaryExp
  L_5326: 
  #T2Or
  L_5322:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5320
  j L_5320
  #final label in binaryExp
  L_5320: 
  #jumpToAllOnlyIf
  L_5318:
  move $v0, $s4
  beqz $v0, L_5319
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5331: 
  move $v0, $s5
  sw $v0, T_6_6_173
  move $s4, $v0
  #final label in assignmentStatement
  L_5330: 
  #final label in statem expression
  L_5329: 
  j L_5317
  #inside else
  L_5319:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5334: 
  move $v0, $s5
  sw $v0, T_6_6_173
  move $s4, $v0
  #final label in assignmentStatement
  L_5333: 
  #final label in statem expression
  L_5332: 
  #if finish label = 5317
  L_5317:
  j L_5311
  #inside else
  L_5313:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5339: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5340: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5338
  j L_5338
  #final label in binaryExp
  L_5338: 
  #jumpToAllOnlyIf
  L_5336:
  move $v0, $s4
  beqz $v0, L_5337
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5343: 
  move $v0, $s5
  sw $v0, T_6_6_173
  move $s4, $v0
  #final label in assignmentStatement
  L_5342: 
  #final label in statem expression
  L_5341: 
  j L_5335
  #inside else
  L_5337:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5346: 
  move $v0, $s5
  sw $v0, T_6_6_173
  move $s4, $v0
  #final label in assignmentStatement
  L_5345: 
  #final label in statem expression
  L_5344: 
  #if finish label = 5335
  L_5335:
  #if finish label = 5311
  L_5311:
  j L_5299
  #inside else
  L_5301:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5351: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_5352: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5350
  j L_5350
  #final label in binaryExp
  L_5350: 
  #jumpToAllOnlyIf
  L_5348:
  move $v0, $s4
  beqz $v0, L_5349
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5357: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5358: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5356: 
  #final label in codeGenAssignmentExpression
  L_5355: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5354: 
  #final label in statem expression
  L_5353: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_7_73
  move $s5, $v0
  L_5363: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5364: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5362
  j L_5362
  #final label in binaryExp
  L_5362: 
  #jumpToAllOnlyIf
  L_5360:
  move $v0, $s4
  beqz $v0, L_5361
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5372: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5373: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5371
  j L_5371
  #final label in binaryExp
  L_5371: 
  #T1Or
  L_5369:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5368
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5375: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5376: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5374
  j L_5374
  #final label in binaryExp
  L_5374: 
  #T2Or
  L_5370:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5368
  j L_5368
  #final label in binaryExp
  L_5368: 
  #jumpToAllOnlyIf
  L_5366:
  move $v0, $s4
  beqz $v0, L_5367
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5379: 
  move $v0, $s5
  sw $v0, T_6_7_174
  move $s4, $v0
  #final label in assignmentStatement
  L_5378: 
  #final label in statem expression
  L_5377: 
  j L_5365
  #inside else
  L_5367:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5382: 
  move $v0, $s5
  sw $v0, T_6_7_174
  move $s4, $v0
  #final label in assignmentStatement
  L_5381: 
  #final label in statem expression
  L_5380: 
  #if finish label = 5365
  L_5365:
  j L_5359
  #inside else
  L_5361:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5387: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5388: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5386
  j L_5386
  #final label in binaryExp
  L_5386: 
  #jumpToAllOnlyIf
  L_5384:
  move $v0, $s4
  beqz $v0, L_5385
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5391: 
  move $v0, $s5
  sw $v0, T_6_7_174
  move $s4, $v0
  #final label in assignmentStatement
  L_5390: 
  #final label in statem expression
  L_5389: 
  j L_5383
  #inside else
  L_5385:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5394: 
  move $v0, $s5
  sw $v0, T_6_7_174
  move $s4, $v0
  #final label in assignmentStatement
  L_5393: 
  #final label in statem expression
  L_5392: 
  #if finish label = 5383
  L_5383:
  #if finish label = 5359
  L_5359:
  j L_5347
  #inside else
  L_5349:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5399: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_5400: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5398
  j L_5398
  #final label in binaryExp
  L_5398: 
  #jumpToAllOnlyIf
  L_5396:
  move $v0, $s4
  beqz $v0, L_5397
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5405: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5406: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5404: 
  #final label in codeGenAssignmentExpression
  L_5403: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5402: 
  #final label in statem expression
  L_5401: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_8_74
  move $s5, $v0
  L_5411: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5412: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5410
  j L_5410
  #final label in binaryExp
  L_5410: 
  #jumpToAllOnlyIf
  L_5408:
  move $v0, $s4
  beqz $v0, L_5409
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5420: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5421: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5419
  j L_5419
  #final label in binaryExp
  L_5419: 
  #T1Or
  L_5417:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5416
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5423: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5424: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5422
  j L_5422
  #final label in binaryExp
  L_5422: 
  #T2Or
  L_5418:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5416
  j L_5416
  #final label in binaryExp
  L_5416: 
  #jumpToAllOnlyIf
  L_5414:
  move $v0, $s4
  beqz $v0, L_5415
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5427: 
  move $v0, $s5
  sw $v0, T_6_8_175
  move $s4, $v0
  #final label in assignmentStatement
  L_5426: 
  #final label in statem expression
  L_5425: 
  j L_5413
  #inside else
  L_5415:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5430: 
  move $v0, $s5
  sw $v0, T_6_8_175
  move $s4, $v0
  #final label in assignmentStatement
  L_5429: 
  #final label in statem expression
  L_5428: 
  #if finish label = 5413
  L_5413:
  j L_5407
  #inside else
  L_5409:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5435: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5436: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5434
  j L_5434
  #final label in binaryExp
  L_5434: 
  #jumpToAllOnlyIf
  L_5432:
  move $v0, $s4
  beqz $v0, L_5433
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5439: 
  move $v0, $s5
  sw $v0, T_6_8_175
  move $s4, $v0
  #final label in assignmentStatement
  L_5438: 
  #final label in statem expression
  L_5437: 
  j L_5431
  #inside else
  L_5433:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5442: 
  move $v0, $s5
  sw $v0, T_6_8_175
  move $s4, $v0
  #final label in assignmentStatement
  L_5441: 
  #final label in statem expression
  L_5440: 
  #if finish label = 5431
  L_5431:
  #if finish label = 5407
  L_5407:
  j L_5395
  #inside else
  L_5397:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5446: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_5447: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5445
  j L_5445
  #final label in binaryExp
  L_5445: 
  #jumpToAllOnlyIf
  L_5444:
  move $v0, $s4
  beqz $v0, L_5443
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5452: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5453: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5451: 
  #final label in codeGenAssignmentExpression
  L_5450: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5449: 
  #final label in statem expression
  L_5448: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_6_9_75
  move $s5, $v0
  L_5458: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5459: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5457
  j L_5457
  #final label in binaryExp
  L_5457: 
  #jumpToAllOnlyIf
  L_5455:
  move $v0, $s4
  beqz $v0, L_5456
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5467: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5468: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5466
  j L_5466
  #final label in binaryExp
  L_5466: 
  #T1Or
  L_5464:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5463
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5470: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5471: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5469
  j L_5469
  #final label in binaryExp
  L_5469: 
  #T2Or
  L_5465:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5463
  j L_5463
  #final label in binaryExp
  L_5463: 
  #jumpToAllOnlyIf
  L_5461:
  move $v0, $s4
  beqz $v0, L_5462
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5474: 
  move $v0, $s5
  sw $v0, T_6_9_176
  move $s4, $v0
  #final label in assignmentStatement
  L_5473: 
  #final label in statem expression
  L_5472: 
  j L_5460
  #inside else
  L_5462:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5477: 
  move $v0, $s5
  sw $v0, T_6_9_176
  move $s4, $v0
  #final label in assignmentStatement
  L_5476: 
  #final label in statem expression
  L_5475: 
  #if finish label = 5460
  L_5460:
  j L_5454
  #inside else
  L_5456:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5482: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5483: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5481
  j L_5481
  #final label in binaryExp
  L_5481: 
  #jumpToAllOnlyIf
  L_5479:
  move $v0, $s4
  beqz $v0, L_5480
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5486: 
  move $v0, $s5
  sw $v0, T_6_9_176
  move $s4, $v0
  #final label in assignmentStatement
  L_5485: 
  #final label in statem expression
  L_5484: 
  j L_5478
  #inside else
  L_5480:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5489: 
  move $v0, $s5
  sw $v0, T_6_9_176
  move $s4, $v0
  #final label in assignmentStatement
  L_5488: 
  #final label in statem expression
  L_5487: 
  #if finish label = 5478
  L_5478:
  #if finish label = 5454
  L_5454:
  #if finish label = 5443
  L_5443:
  #if finish label = 5395
  L_5395:
  #if finish label = 5347
  L_5347:
  #if finish label = 5299
  L_5299:
  #if finish label = 5251
  L_5251:
  #if finish label = 5203
  L_5203:
  #if finish label = 5155
  L_5155:
  #if finish label = 5107
  L_5107:
  #if finish label = 5059
  L_5059:
  #if finish label = 5011
  L_5011:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_5494: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_5495: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5493
  j L_5493
  #final label in binaryExp
  L_5493: 
  #final label in codeGenAssignmentExpression
  L_5492: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5491: 
  #final label in statem expression
  L_5490: 
  #whileBodyEndJump
  L_5006:
  j  L_5004
  #while finish label = 5003
  L_5003:
  j L_4994
  #inside else
  L_4996:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_5500: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_5501: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5499
  j L_5499
  #final label in binaryExp
  L_5499: 
  #jumpToAllOnlyIf
  L_5497:
  move $v0, $s4
  beqz $v0, L_5498
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5504: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5503: 
  #final label in statem expression
  L_5502: 
  #starting while
  #start of while loop
  L_5506:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5510: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_5511: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5509
  j L_5509
  #final label in binaryExp
  L_5509: 
  #jumpToAllOnlyIf
  L_5507:
  move $v0, $s4
  bnez $v0, L_5512
  j L_5505
  #whileBodyLabel
  L_5512:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5517: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_5518: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5516
  j L_5516
  #final label in binaryExp
  L_5516: 
  #jumpToAllOnlyIf
  L_5514:
  move $v0, $s4
  beqz $v0, L_5515
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5523: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5524: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5522: 
  #final label in codeGenAssignmentExpression
  L_5521: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5520: 
  #final label in statem expression
  L_5519: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_0_76
  move $s5, $v0
  L_5529: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5530: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5528
  j L_5528
  #final label in binaryExp
  L_5528: 
  #jumpToAllOnlyIf
  L_5526:
  move $v0, $s4
  beqz $v0, L_5527
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5538: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5539: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5537
  j L_5537
  #final label in binaryExp
  L_5537: 
  #T1Or
  L_5535:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5534
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5541: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5542: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5540
  j L_5540
  #final label in binaryExp
  L_5540: 
  #T2Or
  L_5536:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5534
  j L_5534
  #final label in binaryExp
  L_5534: 
  #jumpToAllOnlyIf
  L_5532:
  move $v0, $s4
  beqz $v0, L_5533
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5545: 
  move $v0, $s5
  sw $v0, T_7_0_177
  move $s4, $v0
  #final label in assignmentStatement
  L_5544: 
  #final label in statem expression
  L_5543: 
  j L_5531
  #inside else
  L_5533:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5548: 
  move $v0, $s5
  sw $v0, T_7_0_177
  move $s4, $v0
  #final label in assignmentStatement
  L_5547: 
  #final label in statem expression
  L_5546: 
  #if finish label = 5531
  L_5531:
  j L_5525
  #inside else
  L_5527:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5553: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5554: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5552
  j L_5552
  #final label in binaryExp
  L_5552: 
  #jumpToAllOnlyIf
  L_5550:
  move $v0, $s4
  beqz $v0, L_5551
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5557: 
  move $v0, $s5
  sw $v0, T_7_0_177
  move $s4, $v0
  #final label in assignmentStatement
  L_5556: 
  #final label in statem expression
  L_5555: 
  j L_5549
  #inside else
  L_5551:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5560: 
  move $v0, $s5
  sw $v0, T_7_0_177
  move $s4, $v0
  #final label in assignmentStatement
  L_5559: 
  #final label in statem expression
  L_5558: 
  #if finish label = 5549
  L_5549:
  #if finish label = 5525
  L_5525:
  j L_5513
  #inside else
  L_5515:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5565: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5566: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5564
  j L_5564
  #final label in binaryExp
  L_5564: 
  #jumpToAllOnlyIf
  L_5562:
  move $v0, $s4
  beqz $v0, L_5563
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5571: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5572: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5570: 
  #final label in codeGenAssignmentExpression
  L_5569: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5568: 
  #final label in statem expression
  L_5567: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_1_77
  move $s5, $v0
  L_5577: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5578: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5576
  j L_5576
  #final label in binaryExp
  L_5576: 
  #jumpToAllOnlyIf
  L_5574:
  move $v0, $s4
  beqz $v0, L_5575
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5586: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5587: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5585
  j L_5585
  #final label in binaryExp
  L_5585: 
  #T1Or
  L_5583:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5582
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5589: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5590: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5588
  j L_5588
  #final label in binaryExp
  L_5588: 
  #T2Or
  L_5584:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5582
  j L_5582
  #final label in binaryExp
  L_5582: 
  #jumpToAllOnlyIf
  L_5580:
  move $v0, $s4
  beqz $v0, L_5581
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5593: 
  move $v0, $s5
  sw $v0, T_7_1_178
  move $s4, $v0
  #final label in assignmentStatement
  L_5592: 
  #final label in statem expression
  L_5591: 
  j L_5579
  #inside else
  L_5581:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5596: 
  move $v0, $s5
  sw $v0, T_7_1_178
  move $s4, $v0
  #final label in assignmentStatement
  L_5595: 
  #final label in statem expression
  L_5594: 
  #if finish label = 5579
  L_5579:
  j L_5573
  #inside else
  L_5575:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5601: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5602: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5600
  j L_5600
  #final label in binaryExp
  L_5600: 
  #jumpToAllOnlyIf
  L_5598:
  move $v0, $s4
  beqz $v0, L_5599
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5605: 
  move $v0, $s5
  sw $v0, T_7_1_178
  move $s4, $v0
  #final label in assignmentStatement
  L_5604: 
  #final label in statem expression
  L_5603: 
  j L_5597
  #inside else
  L_5599:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5608: 
  move $v0, $s5
  sw $v0, T_7_1_178
  move $s4, $v0
  #final label in assignmentStatement
  L_5607: 
  #final label in statem expression
  L_5606: 
  #if finish label = 5597
  L_5597:
  #if finish label = 5573
  L_5573:
  j L_5561
  #inside else
  L_5563:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5613: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_5614: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5612
  j L_5612
  #final label in binaryExp
  L_5612: 
  #jumpToAllOnlyIf
  L_5610:
  move $v0, $s4
  beqz $v0, L_5611
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5619: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5620: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5618: 
  #final label in codeGenAssignmentExpression
  L_5617: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5616: 
  #final label in statem expression
  L_5615: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_2_78
  move $s5, $v0
  L_5625: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5626: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5624
  j L_5624
  #final label in binaryExp
  L_5624: 
  #jumpToAllOnlyIf
  L_5622:
  move $v0, $s4
  beqz $v0, L_5623
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5634: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5635: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5633
  j L_5633
  #final label in binaryExp
  L_5633: 
  #T1Or
  L_5631:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5630
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5637: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5638: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5636
  j L_5636
  #final label in binaryExp
  L_5636: 
  #T2Or
  L_5632:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5630
  j L_5630
  #final label in binaryExp
  L_5630: 
  #jumpToAllOnlyIf
  L_5628:
  move $v0, $s4
  beqz $v0, L_5629
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5641: 
  move $v0, $s5
  sw $v0, T_7_2_179
  move $s4, $v0
  #final label in assignmentStatement
  L_5640: 
  #final label in statem expression
  L_5639: 
  j L_5627
  #inside else
  L_5629:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5644: 
  move $v0, $s5
  sw $v0, T_7_2_179
  move $s4, $v0
  #final label in assignmentStatement
  L_5643: 
  #final label in statem expression
  L_5642: 
  #if finish label = 5627
  L_5627:
  j L_5621
  #inside else
  L_5623:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5649: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5650: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5648
  j L_5648
  #final label in binaryExp
  L_5648: 
  #jumpToAllOnlyIf
  L_5646:
  move $v0, $s4
  beqz $v0, L_5647
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5653: 
  move $v0, $s5
  sw $v0, T_7_2_179
  move $s4, $v0
  #final label in assignmentStatement
  L_5652: 
  #final label in statem expression
  L_5651: 
  j L_5645
  #inside else
  L_5647:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5656: 
  move $v0, $s5
  sw $v0, T_7_2_179
  move $s4, $v0
  #final label in assignmentStatement
  L_5655: 
  #final label in statem expression
  L_5654: 
  #if finish label = 5645
  L_5645:
  #if finish label = 5621
  L_5621:
  j L_5609
  #inside else
  L_5611:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5661: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5662: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5660
  j L_5660
  #final label in binaryExp
  L_5660: 
  #jumpToAllOnlyIf
  L_5658:
  move $v0, $s4
  beqz $v0, L_5659
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5667: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5668: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5666: 
  #final label in codeGenAssignmentExpression
  L_5665: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5664: 
  #final label in statem expression
  L_5663: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_3_79
  move $s5, $v0
  L_5673: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5674: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5672
  j L_5672
  #final label in binaryExp
  L_5672: 
  #jumpToAllOnlyIf
  L_5670:
  move $v0, $s4
  beqz $v0, L_5671
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5682: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5683: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5681
  j L_5681
  #final label in binaryExp
  L_5681: 
  #T1Or
  L_5679:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5678
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5685: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5686: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5684
  j L_5684
  #final label in binaryExp
  L_5684: 
  #T2Or
  L_5680:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5678
  j L_5678
  #final label in binaryExp
  L_5678: 
  #jumpToAllOnlyIf
  L_5676:
  move $v0, $s4
  beqz $v0, L_5677
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5689: 
  move $v0, $s5
  sw $v0, T_7_3_180
  move $s4, $v0
  #final label in assignmentStatement
  L_5688: 
  #final label in statem expression
  L_5687: 
  j L_5675
  #inside else
  L_5677:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5692: 
  move $v0, $s5
  sw $v0, T_7_3_180
  move $s4, $v0
  #final label in assignmentStatement
  L_5691: 
  #final label in statem expression
  L_5690: 
  #if finish label = 5675
  L_5675:
  j L_5669
  #inside else
  L_5671:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5697: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5698: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5696
  j L_5696
  #final label in binaryExp
  L_5696: 
  #jumpToAllOnlyIf
  L_5694:
  move $v0, $s4
  beqz $v0, L_5695
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5701: 
  move $v0, $s5
  sw $v0, T_7_3_180
  move $s4, $v0
  #final label in assignmentStatement
  L_5700: 
  #final label in statem expression
  L_5699: 
  j L_5693
  #inside else
  L_5695:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5704: 
  move $v0, $s5
  sw $v0, T_7_3_180
  move $s4, $v0
  #final label in assignmentStatement
  L_5703: 
  #final label in statem expression
  L_5702: 
  #if finish label = 5693
  L_5693:
  #if finish label = 5669
  L_5669:
  j L_5657
  #inside else
  L_5659:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5709: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_5710: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5708
  j L_5708
  #final label in binaryExp
  L_5708: 
  #jumpToAllOnlyIf
  L_5706:
  move $v0, $s4
  beqz $v0, L_5707
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5715: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5716: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5714: 
  #final label in codeGenAssignmentExpression
  L_5713: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5712: 
  #final label in statem expression
  L_5711: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_4_80
  move $s5, $v0
  L_5721: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5722: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5720
  j L_5720
  #final label in binaryExp
  L_5720: 
  #jumpToAllOnlyIf
  L_5718:
  move $v0, $s4
  beqz $v0, L_5719
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5730: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5731: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5729
  j L_5729
  #final label in binaryExp
  L_5729: 
  #T1Or
  L_5727:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5726
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5733: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5734: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5732
  j L_5732
  #final label in binaryExp
  L_5732: 
  #T2Or
  L_5728:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5726
  j L_5726
  #final label in binaryExp
  L_5726: 
  #jumpToAllOnlyIf
  L_5724:
  move $v0, $s4
  beqz $v0, L_5725
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5737: 
  move $v0, $s5
  sw $v0, T_7_4_181
  move $s4, $v0
  #final label in assignmentStatement
  L_5736: 
  #final label in statem expression
  L_5735: 
  j L_5723
  #inside else
  L_5725:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5740: 
  move $v0, $s5
  sw $v0, T_7_4_181
  move $s4, $v0
  #final label in assignmentStatement
  L_5739: 
  #final label in statem expression
  L_5738: 
  #if finish label = 5723
  L_5723:
  j L_5717
  #inside else
  L_5719:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5745: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5746: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5744
  j L_5744
  #final label in binaryExp
  L_5744: 
  #jumpToAllOnlyIf
  L_5742:
  move $v0, $s4
  beqz $v0, L_5743
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5749: 
  move $v0, $s5
  sw $v0, T_7_4_181
  move $s4, $v0
  #final label in assignmentStatement
  L_5748: 
  #final label in statem expression
  L_5747: 
  j L_5741
  #inside else
  L_5743:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5752: 
  move $v0, $s5
  sw $v0, T_7_4_181
  move $s4, $v0
  #final label in assignmentStatement
  L_5751: 
  #final label in statem expression
  L_5750: 
  #if finish label = 5741
  L_5741:
  #if finish label = 5717
  L_5717:
  j L_5705
  #inside else
  L_5707:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5757: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_5758: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5756
  j L_5756
  #final label in binaryExp
  L_5756: 
  #jumpToAllOnlyIf
  L_5754:
  move $v0, $s4
  beqz $v0, L_5755
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5763: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5764: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5762: 
  #final label in codeGenAssignmentExpression
  L_5761: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5760: 
  #final label in statem expression
  L_5759: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_5_81
  move $s5, $v0
  L_5769: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5770: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5768
  j L_5768
  #final label in binaryExp
  L_5768: 
  #jumpToAllOnlyIf
  L_5766:
  move $v0, $s4
  beqz $v0, L_5767
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5778: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5779: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5777
  j L_5777
  #final label in binaryExp
  L_5777: 
  #T1Or
  L_5775:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5774
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5781: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5782: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5780
  j L_5780
  #final label in binaryExp
  L_5780: 
  #T2Or
  L_5776:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5774
  j L_5774
  #final label in binaryExp
  L_5774: 
  #jumpToAllOnlyIf
  L_5772:
  move $v0, $s4
  beqz $v0, L_5773
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5785: 
  move $v0, $s5
  sw $v0, T_7_5_182
  move $s4, $v0
  #final label in assignmentStatement
  L_5784: 
  #final label in statem expression
  L_5783: 
  j L_5771
  #inside else
  L_5773:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5788: 
  move $v0, $s5
  sw $v0, T_7_5_182
  move $s4, $v0
  #final label in assignmentStatement
  L_5787: 
  #final label in statem expression
  L_5786: 
  #if finish label = 5771
  L_5771:
  j L_5765
  #inside else
  L_5767:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5793: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5794: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5792
  j L_5792
  #final label in binaryExp
  L_5792: 
  #jumpToAllOnlyIf
  L_5790:
  move $v0, $s4
  beqz $v0, L_5791
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5797: 
  move $v0, $s5
  sw $v0, T_7_5_182
  move $s4, $v0
  #final label in assignmentStatement
  L_5796: 
  #final label in statem expression
  L_5795: 
  j L_5789
  #inside else
  L_5791:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5800: 
  move $v0, $s5
  sw $v0, T_7_5_182
  move $s4, $v0
  #final label in assignmentStatement
  L_5799: 
  #final label in statem expression
  L_5798: 
  #if finish label = 5789
  L_5789:
  #if finish label = 5765
  L_5765:
  j L_5753
  #inside else
  L_5755:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5805: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_5806: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5804
  j L_5804
  #final label in binaryExp
  L_5804: 
  #jumpToAllOnlyIf
  L_5802:
  move $v0, $s4
  beqz $v0, L_5803
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5811: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5812: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5810: 
  #final label in codeGenAssignmentExpression
  L_5809: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5808: 
  #final label in statem expression
  L_5807: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_6_82
  move $s5, $v0
  L_5817: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5818: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5816
  j L_5816
  #final label in binaryExp
  L_5816: 
  #jumpToAllOnlyIf
  L_5814:
  move $v0, $s4
  beqz $v0, L_5815
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5826: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5827: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5825
  j L_5825
  #final label in binaryExp
  L_5825: 
  #T1Or
  L_5823:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5822
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5829: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5830: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5828
  j L_5828
  #final label in binaryExp
  L_5828: 
  #T2Or
  L_5824:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5822
  j L_5822
  #final label in binaryExp
  L_5822: 
  #jumpToAllOnlyIf
  L_5820:
  move $v0, $s4
  beqz $v0, L_5821
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5833: 
  move $v0, $s5
  sw $v0, T_7_6_183
  move $s4, $v0
  #final label in assignmentStatement
  L_5832: 
  #final label in statem expression
  L_5831: 
  j L_5819
  #inside else
  L_5821:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5836: 
  move $v0, $s5
  sw $v0, T_7_6_183
  move $s4, $v0
  #final label in assignmentStatement
  L_5835: 
  #final label in statem expression
  L_5834: 
  #if finish label = 5819
  L_5819:
  j L_5813
  #inside else
  L_5815:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5841: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5842: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5840
  j L_5840
  #final label in binaryExp
  L_5840: 
  #jumpToAllOnlyIf
  L_5838:
  move $v0, $s4
  beqz $v0, L_5839
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5845: 
  move $v0, $s5
  sw $v0, T_7_6_183
  move $s4, $v0
  #final label in assignmentStatement
  L_5844: 
  #final label in statem expression
  L_5843: 
  j L_5837
  #inside else
  L_5839:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5848: 
  move $v0, $s5
  sw $v0, T_7_6_183
  move $s4, $v0
  #final label in assignmentStatement
  L_5847: 
  #final label in statem expression
  L_5846: 
  #if finish label = 5837
  L_5837:
  #if finish label = 5813
  L_5813:
  j L_5801
  #inside else
  L_5803:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5853: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_5854: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5852
  j L_5852
  #final label in binaryExp
  L_5852: 
  #jumpToAllOnlyIf
  L_5850:
  move $v0, $s4
  beqz $v0, L_5851
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5859: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5860: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5858: 
  #final label in codeGenAssignmentExpression
  L_5857: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5856: 
  #final label in statem expression
  L_5855: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_7_83
  move $s5, $v0
  L_5865: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5866: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5864
  j L_5864
  #final label in binaryExp
  L_5864: 
  #jumpToAllOnlyIf
  L_5862:
  move $v0, $s4
  beqz $v0, L_5863
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5874: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5875: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5873
  j L_5873
  #final label in binaryExp
  L_5873: 
  #T1Or
  L_5871:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5870
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5877: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5878: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5876
  j L_5876
  #final label in binaryExp
  L_5876: 
  #T2Or
  L_5872:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5870
  j L_5870
  #final label in binaryExp
  L_5870: 
  #jumpToAllOnlyIf
  L_5868:
  move $v0, $s4
  beqz $v0, L_5869
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5881: 
  move $v0, $s5
  sw $v0, T_7_7_184
  move $s4, $v0
  #final label in assignmentStatement
  L_5880: 
  #final label in statem expression
  L_5879: 
  j L_5867
  #inside else
  L_5869:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5884: 
  move $v0, $s5
  sw $v0, T_7_7_184
  move $s4, $v0
  #final label in assignmentStatement
  L_5883: 
  #final label in statem expression
  L_5882: 
  #if finish label = 5867
  L_5867:
  j L_5861
  #inside else
  L_5863:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5889: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5890: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5888
  j L_5888
  #final label in binaryExp
  L_5888: 
  #jumpToAllOnlyIf
  L_5886:
  move $v0, $s4
  beqz $v0, L_5887
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5893: 
  move $v0, $s5
  sw $v0, T_7_7_184
  move $s4, $v0
  #final label in assignmentStatement
  L_5892: 
  #final label in statem expression
  L_5891: 
  j L_5885
  #inside else
  L_5887:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5896: 
  move $v0, $s5
  sw $v0, T_7_7_184
  move $s4, $v0
  #final label in assignmentStatement
  L_5895: 
  #final label in statem expression
  L_5894: 
  #if finish label = 5885
  L_5885:
  #if finish label = 5861
  L_5861:
  j L_5849
  #inside else
  L_5851:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5901: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_5902: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5900
  j L_5900
  #final label in binaryExp
  L_5900: 
  #jumpToAllOnlyIf
  L_5898:
  move $v0, $s4
  beqz $v0, L_5899
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5907: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5908: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5906: 
  #final label in codeGenAssignmentExpression
  L_5905: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5904: 
  #final label in statem expression
  L_5903: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_8_84
  move $s5, $v0
  L_5913: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5914: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5912
  j L_5912
  #final label in binaryExp
  L_5912: 
  #jumpToAllOnlyIf
  L_5910:
  move $v0, $s4
  beqz $v0, L_5911
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5922: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5923: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5921
  j L_5921
  #final label in binaryExp
  L_5921: 
  #T1Or
  L_5919:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5918
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5925: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5926: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5924
  j L_5924
  #final label in binaryExp
  L_5924: 
  #T2Or
  L_5920:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5918
  j L_5918
  #final label in binaryExp
  L_5918: 
  #jumpToAllOnlyIf
  L_5916:
  move $v0, $s4
  beqz $v0, L_5917
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5929: 
  move $v0, $s5
  sw $v0, T_7_8_185
  move $s4, $v0
  #final label in assignmentStatement
  L_5928: 
  #final label in statem expression
  L_5927: 
  j L_5915
  #inside else
  L_5917:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5932: 
  move $v0, $s5
  sw $v0, T_7_8_185
  move $s4, $v0
  #final label in assignmentStatement
  L_5931: 
  #final label in statem expression
  L_5930: 
  #if finish label = 5915
  L_5915:
  j L_5909
  #inside else
  L_5911:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5937: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5938: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5936
  j L_5936
  #final label in binaryExp
  L_5936: 
  #jumpToAllOnlyIf
  L_5934:
  move $v0, $s4
  beqz $v0, L_5935
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5941: 
  move $v0, $s5
  sw $v0, T_7_8_185
  move $s4, $v0
  #final label in assignmentStatement
  L_5940: 
  #final label in statem expression
  L_5939: 
  j L_5933
  #inside else
  L_5935:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5944: 
  move $v0, $s5
  sw $v0, T_7_8_185
  move $s4, $v0
  #final label in assignmentStatement
  L_5943: 
  #final label in statem expression
  L_5942: 
  #if finish label = 5933
  L_5933:
  #if finish label = 5909
  L_5909:
  j L_5897
  #inside else
  L_5899:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_5948: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_5949: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5947
  j L_5947
  #final label in binaryExp
  L_5947: 
  #jumpToAllOnlyIf
  L_5946:
  move $v0, $s4
  beqz $v0, L_5945
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_5954: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_5955: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_5953: 
  #final label in codeGenAssignmentExpression
  L_5952: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5951: 
  #final label in statem expression
  L_5950: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_7_9_85
  move $s5, $v0
  L_5960: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_5961: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5959
  j L_5959
  #final label in binaryExp
  L_5959: 
  #jumpToAllOnlyIf
  L_5957:
  move $v0, $s4
  beqz $v0, L_5958
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5969: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_5970: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5968
  j L_5968
  #final label in binaryExp
  L_5968: 
  #T1Or
  L_5966:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5965
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_5972: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_5973: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5971
  j L_5971
  #final label in binaryExp
  L_5971: 
  #T2Or
  L_5967:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_5965
  j L_5965
  #final label in binaryExp
  L_5965: 
  #jumpToAllOnlyIf
  L_5963:
  move $v0, $s4
  beqz $v0, L_5964
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5976: 
  move $v0, $s5
  sw $v0, T_7_9_186
  move $s4, $v0
  #final label in assignmentStatement
  L_5975: 
  #final label in statem expression
  L_5974: 
  j L_5962
  #inside else
  L_5964:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5979: 
  move $v0, $s5
  sw $v0, T_7_9_186
  move $s4, $v0
  #final label in assignmentStatement
  L_5978: 
  #final label in statem expression
  L_5977: 
  #if finish label = 5962
  L_5962:
  j L_5956
  #inside else
  L_5958:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_5984: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_5985: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_5983
  j L_5983
  #final label in binaryExp
  L_5983: 
  #jumpToAllOnlyIf
  L_5981:
  move $v0, $s4
  beqz $v0, L_5982
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5988: 
  move $v0, $s5
  sw $v0, T_7_9_186
  move $s4, $v0
  #final label in assignmentStatement
  L_5987: 
  #final label in statem expression
  L_5986: 
  j L_5980
  #inside else
  L_5982:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_5991: 
  move $v0, $s5
  sw $v0, T_7_9_186
  move $s4, $v0
  #final label in assignmentStatement
  L_5990: 
  #final label in statem expression
  L_5989: 
  #if finish label = 5980
  L_5980:
  #if finish label = 5956
  L_5956:
  #if finish label = 5945
  L_5945:
  #if finish label = 5897
  L_5897:
  #if finish label = 5849
  L_5849:
  #if finish label = 5801
  L_5801:
  #if finish label = 5753
  L_5753:
  #if finish label = 5705
  L_5705:
  #if finish label = 5657
  L_5657:
  #if finish label = 5609
  L_5609:
  #if finish label = 5561
  L_5561:
  #if finish label = 5513
  L_5513:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_5996: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_5997: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_5995
  j L_5995
  #final label in binaryExp
  L_5995: 
  #final label in codeGenAssignmentExpression
  L_5994: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_5993: 
  #final label in statem expression
  L_5992: 
  #whileBodyEndJump
  L_5508:
  j  L_5506
  #while finish label = 5505
  L_5505:
  j L_5496
  #inside else
  L_5498:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_6002: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_6003: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6001
  j L_6001
  #final label in binaryExp
  L_6001: 
  #jumpToAllOnlyIf
  L_5999:
  move $v0, $s4
  beqz $v0, L_6000
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6006: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6005: 
  #final label in statem expression
  L_6004: 
  #starting while
  #start of while loop
  L_6008:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6012: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_6013: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6011
  j L_6011
  #final label in binaryExp
  L_6011: 
  #jumpToAllOnlyIf
  L_6009:
  move $v0, $s4
  bnez $v0, L_6014
  j L_6007
  #whileBodyLabel
  L_6014:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6019: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_6020: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6018
  j L_6018
  #final label in binaryExp
  L_6018: 
  #jumpToAllOnlyIf
  L_6016:
  move $v0, $s4
  beqz $v0, L_6017
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6025: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6026: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6024: 
  #final label in codeGenAssignmentExpression
  L_6023: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6022: 
  #final label in statem expression
  L_6021: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_0_86
  move $s5, $v0
  L_6031: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6032: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6030
  j L_6030
  #final label in binaryExp
  L_6030: 
  #jumpToAllOnlyIf
  L_6028:
  move $v0, $s4
  beqz $v0, L_6029
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6040: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6041: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6039
  j L_6039
  #final label in binaryExp
  L_6039: 
  #T1Or
  L_6037:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6036
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6043: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6044: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6042
  j L_6042
  #final label in binaryExp
  L_6042: 
  #T2Or
  L_6038:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6036
  j L_6036
  #final label in binaryExp
  L_6036: 
  #jumpToAllOnlyIf
  L_6034:
  move $v0, $s4
  beqz $v0, L_6035
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6047: 
  move $v0, $s5
  sw $v0, T_8_0_187
  move $s4, $v0
  #final label in assignmentStatement
  L_6046: 
  #final label in statem expression
  L_6045: 
  j L_6033
  #inside else
  L_6035:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6050: 
  move $v0, $s5
  sw $v0, T_8_0_187
  move $s4, $v0
  #final label in assignmentStatement
  L_6049: 
  #final label in statem expression
  L_6048: 
  #if finish label = 6033
  L_6033:
  j L_6027
  #inside else
  L_6029:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6055: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6056: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6054
  j L_6054
  #final label in binaryExp
  L_6054: 
  #jumpToAllOnlyIf
  L_6052:
  move $v0, $s4
  beqz $v0, L_6053
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6059: 
  move $v0, $s5
  sw $v0, T_8_0_187
  move $s4, $v0
  #final label in assignmentStatement
  L_6058: 
  #final label in statem expression
  L_6057: 
  j L_6051
  #inside else
  L_6053:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6062: 
  move $v0, $s5
  sw $v0, T_8_0_187
  move $s4, $v0
  #final label in assignmentStatement
  L_6061: 
  #final label in statem expression
  L_6060: 
  #if finish label = 6051
  L_6051:
  #if finish label = 6027
  L_6027:
  j L_6015
  #inside else
  L_6017:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6067: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6068: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6066
  j L_6066
  #final label in binaryExp
  L_6066: 
  #jumpToAllOnlyIf
  L_6064:
  move $v0, $s4
  beqz $v0, L_6065
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6073: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6074: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6072: 
  #final label in codeGenAssignmentExpression
  L_6071: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6070: 
  #final label in statem expression
  L_6069: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_1_87
  move $s5, $v0
  L_6079: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6080: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6078
  j L_6078
  #final label in binaryExp
  L_6078: 
  #jumpToAllOnlyIf
  L_6076:
  move $v0, $s4
  beqz $v0, L_6077
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6088: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6089: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6087
  j L_6087
  #final label in binaryExp
  L_6087: 
  #T1Or
  L_6085:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6084
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6091: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6092: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6090
  j L_6090
  #final label in binaryExp
  L_6090: 
  #T2Or
  L_6086:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6084
  j L_6084
  #final label in binaryExp
  L_6084: 
  #jumpToAllOnlyIf
  L_6082:
  move $v0, $s4
  beqz $v0, L_6083
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6095: 
  move $v0, $s5
  sw $v0, T_8_1_188
  move $s4, $v0
  #final label in assignmentStatement
  L_6094: 
  #final label in statem expression
  L_6093: 
  j L_6081
  #inside else
  L_6083:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6098: 
  move $v0, $s5
  sw $v0, T_8_1_188
  move $s4, $v0
  #final label in assignmentStatement
  L_6097: 
  #final label in statem expression
  L_6096: 
  #if finish label = 6081
  L_6081:
  j L_6075
  #inside else
  L_6077:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6103: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6104: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6102
  j L_6102
  #final label in binaryExp
  L_6102: 
  #jumpToAllOnlyIf
  L_6100:
  move $v0, $s4
  beqz $v0, L_6101
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6107: 
  move $v0, $s5
  sw $v0, T_8_1_188
  move $s4, $v0
  #final label in assignmentStatement
  L_6106: 
  #final label in statem expression
  L_6105: 
  j L_6099
  #inside else
  L_6101:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6110: 
  move $v0, $s5
  sw $v0, T_8_1_188
  move $s4, $v0
  #final label in assignmentStatement
  L_6109: 
  #final label in statem expression
  L_6108: 
  #if finish label = 6099
  L_6099:
  #if finish label = 6075
  L_6075:
  j L_6063
  #inside else
  L_6065:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6115: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_6116: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6114
  j L_6114
  #final label in binaryExp
  L_6114: 
  #jumpToAllOnlyIf
  L_6112:
  move $v0, $s4
  beqz $v0, L_6113
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6121: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6122: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6120: 
  #final label in codeGenAssignmentExpression
  L_6119: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6118: 
  #final label in statem expression
  L_6117: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_2_88
  move $s5, $v0
  L_6127: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6128: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6126
  j L_6126
  #final label in binaryExp
  L_6126: 
  #jumpToAllOnlyIf
  L_6124:
  move $v0, $s4
  beqz $v0, L_6125
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6136: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6137: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6135
  j L_6135
  #final label in binaryExp
  L_6135: 
  #T1Or
  L_6133:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6132
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6139: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6140: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6138
  j L_6138
  #final label in binaryExp
  L_6138: 
  #T2Or
  L_6134:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6132
  j L_6132
  #final label in binaryExp
  L_6132: 
  #jumpToAllOnlyIf
  L_6130:
  move $v0, $s4
  beqz $v0, L_6131
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6143: 
  move $v0, $s5
  sw $v0, T_8_2_189
  move $s4, $v0
  #final label in assignmentStatement
  L_6142: 
  #final label in statem expression
  L_6141: 
  j L_6129
  #inside else
  L_6131:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6146: 
  move $v0, $s5
  sw $v0, T_8_2_189
  move $s4, $v0
  #final label in assignmentStatement
  L_6145: 
  #final label in statem expression
  L_6144: 
  #if finish label = 6129
  L_6129:
  j L_6123
  #inside else
  L_6125:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6151: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6152: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6150
  j L_6150
  #final label in binaryExp
  L_6150: 
  #jumpToAllOnlyIf
  L_6148:
  move $v0, $s4
  beqz $v0, L_6149
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6155: 
  move $v0, $s5
  sw $v0, T_8_2_189
  move $s4, $v0
  #final label in assignmentStatement
  L_6154: 
  #final label in statem expression
  L_6153: 
  j L_6147
  #inside else
  L_6149:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6158: 
  move $v0, $s5
  sw $v0, T_8_2_189
  move $s4, $v0
  #final label in assignmentStatement
  L_6157: 
  #final label in statem expression
  L_6156: 
  #if finish label = 6147
  L_6147:
  #if finish label = 6123
  L_6123:
  j L_6111
  #inside else
  L_6113:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6163: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6164: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6162
  j L_6162
  #final label in binaryExp
  L_6162: 
  #jumpToAllOnlyIf
  L_6160:
  move $v0, $s4
  beqz $v0, L_6161
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6169: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6170: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6168: 
  #final label in codeGenAssignmentExpression
  L_6167: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6166: 
  #final label in statem expression
  L_6165: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_3_89
  move $s5, $v0
  L_6175: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6176: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6174
  j L_6174
  #final label in binaryExp
  L_6174: 
  #jumpToAllOnlyIf
  L_6172:
  move $v0, $s4
  beqz $v0, L_6173
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6184: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6185: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6183
  j L_6183
  #final label in binaryExp
  L_6183: 
  #T1Or
  L_6181:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6180
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6187: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6188: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6186
  j L_6186
  #final label in binaryExp
  L_6186: 
  #T2Or
  L_6182:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6180
  j L_6180
  #final label in binaryExp
  L_6180: 
  #jumpToAllOnlyIf
  L_6178:
  move $v0, $s4
  beqz $v0, L_6179
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6191: 
  move $v0, $s5
  sw $v0, T_8_3_190
  move $s4, $v0
  #final label in assignmentStatement
  L_6190: 
  #final label in statem expression
  L_6189: 
  j L_6177
  #inside else
  L_6179:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6194: 
  move $v0, $s5
  sw $v0, T_8_3_190
  move $s4, $v0
  #final label in assignmentStatement
  L_6193: 
  #final label in statem expression
  L_6192: 
  #if finish label = 6177
  L_6177:
  j L_6171
  #inside else
  L_6173:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6199: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6200: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6198
  j L_6198
  #final label in binaryExp
  L_6198: 
  #jumpToAllOnlyIf
  L_6196:
  move $v0, $s4
  beqz $v0, L_6197
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6203: 
  move $v0, $s5
  sw $v0, T_8_3_190
  move $s4, $v0
  #final label in assignmentStatement
  L_6202: 
  #final label in statem expression
  L_6201: 
  j L_6195
  #inside else
  L_6197:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6206: 
  move $v0, $s5
  sw $v0, T_8_3_190
  move $s4, $v0
  #final label in assignmentStatement
  L_6205: 
  #final label in statem expression
  L_6204: 
  #if finish label = 6195
  L_6195:
  #if finish label = 6171
  L_6171:
  j L_6159
  #inside else
  L_6161:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6211: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_6212: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6210
  j L_6210
  #final label in binaryExp
  L_6210: 
  #jumpToAllOnlyIf
  L_6208:
  move $v0, $s4
  beqz $v0, L_6209
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6217: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6218: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6216: 
  #final label in codeGenAssignmentExpression
  L_6215: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6214: 
  #final label in statem expression
  L_6213: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_4_90
  move $s5, $v0
  L_6223: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6224: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6222
  j L_6222
  #final label in binaryExp
  L_6222: 
  #jumpToAllOnlyIf
  L_6220:
  move $v0, $s4
  beqz $v0, L_6221
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6232: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6233: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6231
  j L_6231
  #final label in binaryExp
  L_6231: 
  #T1Or
  L_6229:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6228
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6235: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6236: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6234
  j L_6234
  #final label in binaryExp
  L_6234: 
  #T2Or
  L_6230:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6228
  j L_6228
  #final label in binaryExp
  L_6228: 
  #jumpToAllOnlyIf
  L_6226:
  move $v0, $s4
  beqz $v0, L_6227
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6239: 
  move $v0, $s5
  sw $v0, T_8_4_191
  move $s4, $v0
  #final label in assignmentStatement
  L_6238: 
  #final label in statem expression
  L_6237: 
  j L_6225
  #inside else
  L_6227:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6242: 
  move $v0, $s5
  sw $v0, T_8_4_191
  move $s4, $v0
  #final label in assignmentStatement
  L_6241: 
  #final label in statem expression
  L_6240: 
  #if finish label = 6225
  L_6225:
  j L_6219
  #inside else
  L_6221:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6247: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6248: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6246
  j L_6246
  #final label in binaryExp
  L_6246: 
  #jumpToAllOnlyIf
  L_6244:
  move $v0, $s4
  beqz $v0, L_6245
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6251: 
  move $v0, $s5
  sw $v0, T_8_4_191
  move $s4, $v0
  #final label in assignmentStatement
  L_6250: 
  #final label in statem expression
  L_6249: 
  j L_6243
  #inside else
  L_6245:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6254: 
  move $v0, $s5
  sw $v0, T_8_4_191
  move $s4, $v0
  #final label in assignmentStatement
  L_6253: 
  #final label in statem expression
  L_6252: 
  #if finish label = 6243
  L_6243:
  #if finish label = 6219
  L_6219:
  j L_6207
  #inside else
  L_6209:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6259: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_6260: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6258
  j L_6258
  #final label in binaryExp
  L_6258: 
  #jumpToAllOnlyIf
  L_6256:
  move $v0, $s4
  beqz $v0, L_6257
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6265: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6266: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6264: 
  #final label in codeGenAssignmentExpression
  L_6263: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6262: 
  #final label in statem expression
  L_6261: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_5_91
  move $s5, $v0
  L_6271: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6272: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6270
  j L_6270
  #final label in binaryExp
  L_6270: 
  #jumpToAllOnlyIf
  L_6268:
  move $v0, $s4
  beqz $v0, L_6269
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6280: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6281: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6279
  j L_6279
  #final label in binaryExp
  L_6279: 
  #T1Or
  L_6277:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6276
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6283: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6284: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6282
  j L_6282
  #final label in binaryExp
  L_6282: 
  #T2Or
  L_6278:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6276
  j L_6276
  #final label in binaryExp
  L_6276: 
  #jumpToAllOnlyIf
  L_6274:
  move $v0, $s4
  beqz $v0, L_6275
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6287: 
  move $v0, $s5
  sw $v0, T_8_5_192
  move $s4, $v0
  #final label in assignmentStatement
  L_6286: 
  #final label in statem expression
  L_6285: 
  j L_6273
  #inside else
  L_6275:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6290: 
  move $v0, $s5
  sw $v0, T_8_5_192
  move $s4, $v0
  #final label in assignmentStatement
  L_6289: 
  #final label in statem expression
  L_6288: 
  #if finish label = 6273
  L_6273:
  j L_6267
  #inside else
  L_6269:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6295: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6296: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6294
  j L_6294
  #final label in binaryExp
  L_6294: 
  #jumpToAllOnlyIf
  L_6292:
  move $v0, $s4
  beqz $v0, L_6293
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6299: 
  move $v0, $s5
  sw $v0, T_8_5_192
  move $s4, $v0
  #final label in assignmentStatement
  L_6298: 
  #final label in statem expression
  L_6297: 
  j L_6291
  #inside else
  L_6293:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6302: 
  move $v0, $s5
  sw $v0, T_8_5_192
  move $s4, $v0
  #final label in assignmentStatement
  L_6301: 
  #final label in statem expression
  L_6300: 
  #if finish label = 6291
  L_6291:
  #if finish label = 6267
  L_6267:
  j L_6255
  #inside else
  L_6257:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6307: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_6308: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6306
  j L_6306
  #final label in binaryExp
  L_6306: 
  #jumpToAllOnlyIf
  L_6304:
  move $v0, $s4
  beqz $v0, L_6305
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6313: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6314: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6312: 
  #final label in codeGenAssignmentExpression
  L_6311: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6310: 
  #final label in statem expression
  L_6309: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_6_92
  move $s5, $v0
  L_6319: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6320: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6318
  j L_6318
  #final label in binaryExp
  L_6318: 
  #jumpToAllOnlyIf
  L_6316:
  move $v0, $s4
  beqz $v0, L_6317
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6328: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6329: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6327
  j L_6327
  #final label in binaryExp
  L_6327: 
  #T1Or
  L_6325:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6324
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6331: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6332: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6330
  j L_6330
  #final label in binaryExp
  L_6330: 
  #T2Or
  L_6326:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6324
  j L_6324
  #final label in binaryExp
  L_6324: 
  #jumpToAllOnlyIf
  L_6322:
  move $v0, $s4
  beqz $v0, L_6323
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6335: 
  move $v0, $s5
  sw $v0, T_8_6_193
  move $s4, $v0
  #final label in assignmentStatement
  L_6334: 
  #final label in statem expression
  L_6333: 
  j L_6321
  #inside else
  L_6323:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6338: 
  move $v0, $s5
  sw $v0, T_8_6_193
  move $s4, $v0
  #final label in assignmentStatement
  L_6337: 
  #final label in statem expression
  L_6336: 
  #if finish label = 6321
  L_6321:
  j L_6315
  #inside else
  L_6317:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6343: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6344: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6342
  j L_6342
  #final label in binaryExp
  L_6342: 
  #jumpToAllOnlyIf
  L_6340:
  move $v0, $s4
  beqz $v0, L_6341
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6347: 
  move $v0, $s5
  sw $v0, T_8_6_193
  move $s4, $v0
  #final label in assignmentStatement
  L_6346: 
  #final label in statem expression
  L_6345: 
  j L_6339
  #inside else
  L_6341:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6350: 
  move $v0, $s5
  sw $v0, T_8_6_193
  move $s4, $v0
  #final label in assignmentStatement
  L_6349: 
  #final label in statem expression
  L_6348: 
  #if finish label = 6339
  L_6339:
  #if finish label = 6315
  L_6315:
  j L_6303
  #inside else
  L_6305:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6355: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_6356: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6354
  j L_6354
  #final label in binaryExp
  L_6354: 
  #jumpToAllOnlyIf
  L_6352:
  move $v0, $s4
  beqz $v0, L_6353
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6361: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6362: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6360: 
  #final label in codeGenAssignmentExpression
  L_6359: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6358: 
  #final label in statem expression
  L_6357: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_7_93
  move $s5, $v0
  L_6367: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6368: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6366
  j L_6366
  #final label in binaryExp
  L_6366: 
  #jumpToAllOnlyIf
  L_6364:
  move $v0, $s4
  beqz $v0, L_6365
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6376: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6377: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6375
  j L_6375
  #final label in binaryExp
  L_6375: 
  #T1Or
  L_6373:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6372
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6379: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6380: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6378
  j L_6378
  #final label in binaryExp
  L_6378: 
  #T2Or
  L_6374:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6372
  j L_6372
  #final label in binaryExp
  L_6372: 
  #jumpToAllOnlyIf
  L_6370:
  move $v0, $s4
  beqz $v0, L_6371
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6383: 
  move $v0, $s5
  sw $v0, T_8_7_194
  move $s4, $v0
  #final label in assignmentStatement
  L_6382: 
  #final label in statem expression
  L_6381: 
  j L_6369
  #inside else
  L_6371:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6386: 
  move $v0, $s5
  sw $v0, T_8_7_194
  move $s4, $v0
  #final label in assignmentStatement
  L_6385: 
  #final label in statem expression
  L_6384: 
  #if finish label = 6369
  L_6369:
  j L_6363
  #inside else
  L_6365:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6391: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6392: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6390
  j L_6390
  #final label in binaryExp
  L_6390: 
  #jumpToAllOnlyIf
  L_6388:
  move $v0, $s4
  beqz $v0, L_6389
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6395: 
  move $v0, $s5
  sw $v0, T_8_7_194
  move $s4, $v0
  #final label in assignmentStatement
  L_6394: 
  #final label in statem expression
  L_6393: 
  j L_6387
  #inside else
  L_6389:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6398: 
  move $v0, $s5
  sw $v0, T_8_7_194
  move $s4, $v0
  #final label in assignmentStatement
  L_6397: 
  #final label in statem expression
  L_6396: 
  #if finish label = 6387
  L_6387:
  #if finish label = 6363
  L_6363:
  j L_6351
  #inside else
  L_6353:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6403: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_6404: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6402
  j L_6402
  #final label in binaryExp
  L_6402: 
  #jumpToAllOnlyIf
  L_6400:
  move $v0, $s4
  beqz $v0, L_6401
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6409: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6410: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6408: 
  #final label in codeGenAssignmentExpression
  L_6407: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6406: 
  #final label in statem expression
  L_6405: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_8_94
  move $s5, $v0
  L_6415: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6416: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6414
  j L_6414
  #final label in binaryExp
  L_6414: 
  #jumpToAllOnlyIf
  L_6412:
  move $v0, $s4
  beqz $v0, L_6413
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6424: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6425: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6423
  j L_6423
  #final label in binaryExp
  L_6423: 
  #T1Or
  L_6421:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6420
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6427: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6428: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6426
  j L_6426
  #final label in binaryExp
  L_6426: 
  #T2Or
  L_6422:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6420
  j L_6420
  #final label in binaryExp
  L_6420: 
  #jumpToAllOnlyIf
  L_6418:
  move $v0, $s4
  beqz $v0, L_6419
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6431: 
  move $v0, $s5
  sw $v0, T_8_8_195
  move $s4, $v0
  #final label in assignmentStatement
  L_6430: 
  #final label in statem expression
  L_6429: 
  j L_6417
  #inside else
  L_6419:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6434: 
  move $v0, $s5
  sw $v0, T_8_8_195
  move $s4, $v0
  #final label in assignmentStatement
  L_6433: 
  #final label in statem expression
  L_6432: 
  #if finish label = 6417
  L_6417:
  j L_6411
  #inside else
  L_6413:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6439: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6440: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6438
  j L_6438
  #final label in binaryExp
  L_6438: 
  #jumpToAllOnlyIf
  L_6436:
  move $v0, $s4
  beqz $v0, L_6437
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6443: 
  move $v0, $s5
  sw $v0, T_8_8_195
  move $s4, $v0
  #final label in assignmentStatement
  L_6442: 
  #final label in statem expression
  L_6441: 
  j L_6435
  #inside else
  L_6437:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6446: 
  move $v0, $s5
  sw $v0, T_8_8_195
  move $s4, $v0
  #final label in assignmentStatement
  L_6445: 
  #final label in statem expression
  L_6444: 
  #if finish label = 6435
  L_6435:
  #if finish label = 6411
  L_6411:
  j L_6399
  #inside else
  L_6401:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6450: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_6451: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6449
  j L_6449
  #final label in binaryExp
  L_6449: 
  #jumpToAllOnlyIf
  L_6448:
  move $v0, $s4
  beqz $v0, L_6447
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6456: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6457: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6455: 
  #final label in codeGenAssignmentExpression
  L_6454: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6453: 
  #final label in statem expression
  L_6452: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_8_9_95
  move $s5, $v0
  L_6462: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6463: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6461
  j L_6461
  #final label in binaryExp
  L_6461: 
  #jumpToAllOnlyIf
  L_6459:
  move $v0, $s4
  beqz $v0, L_6460
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6471: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6472: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6470
  j L_6470
  #final label in binaryExp
  L_6470: 
  #T1Or
  L_6468:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6467
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6474: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6475: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6473
  j L_6473
  #final label in binaryExp
  L_6473: 
  #T2Or
  L_6469:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6467
  j L_6467
  #final label in binaryExp
  L_6467: 
  #jumpToAllOnlyIf
  L_6465:
  move $v0, $s4
  beqz $v0, L_6466
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6478: 
  move $v0, $s5
  sw $v0, T_8_9_196
  move $s4, $v0
  #final label in assignmentStatement
  L_6477: 
  #final label in statem expression
  L_6476: 
  j L_6464
  #inside else
  L_6466:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6481: 
  move $v0, $s5
  sw $v0, T_8_9_196
  move $s4, $v0
  #final label in assignmentStatement
  L_6480: 
  #final label in statem expression
  L_6479: 
  #if finish label = 6464
  L_6464:
  j L_6458
  #inside else
  L_6460:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6486: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6487: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6485
  j L_6485
  #final label in binaryExp
  L_6485: 
  #jumpToAllOnlyIf
  L_6483:
  move $v0, $s4
  beqz $v0, L_6484
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6490: 
  move $v0, $s5
  sw $v0, T_8_9_196
  move $s4, $v0
  #final label in assignmentStatement
  L_6489: 
  #final label in statem expression
  L_6488: 
  j L_6482
  #inside else
  L_6484:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6493: 
  move $v0, $s5
  sw $v0, T_8_9_196
  move $s4, $v0
  #final label in assignmentStatement
  L_6492: 
  #final label in statem expression
  L_6491: 
  #if finish label = 6482
  L_6482:
  #if finish label = 6458
  L_6458:
  #if finish label = 6447
  L_6447:
  #if finish label = 6399
  L_6399:
  #if finish label = 6351
  L_6351:
  #if finish label = 6303
  L_6303:
  #if finish label = 6255
  L_6255:
  #if finish label = 6207
  L_6207:
  #if finish label = 6159
  L_6159:
  #if finish label = 6111
  L_6111:
  #if finish label = 6063
  L_6063:
  #if finish label = 6015
  L_6015:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_6498: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_6499: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6497
  j L_6497
  #final label in binaryExp
  L_6497: 
  #final label in codeGenAssignmentExpression
  L_6496: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6495: 
  #final label in statem expression
  L_6494: 
  #whileBodyEndJump
  L_6010:
  j  L_6008
  #while finish label = 6007
  L_6007:
  j L_5998
  #inside else
  L_6000:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_6503: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_6504: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6502
  j L_6502
  #final label in binaryExp
  L_6502: 
  #jumpToAllOnlyIf
  L_6501:
  move $v0, $s4
  beqz $v0, L_6500
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6507: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6506: 
  #final label in statem expression
  L_6505: 
  #starting while
  #start of while loop
  L_6509:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6513: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_6514: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6512
  j L_6512
  #final label in binaryExp
  L_6512: 
  #jumpToAllOnlyIf
  L_6510:
  move $v0, $s4
  bnez $v0, L_6515
  j L_6508
  #whileBodyLabel
  L_6515:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6520: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_6521: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6519
  j L_6519
  #final label in binaryExp
  L_6519: 
  #jumpToAllOnlyIf
  L_6517:
  move $v0, $s4
  beqz $v0, L_6518
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6526: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6527: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6525: 
  #final label in codeGenAssignmentExpression
  L_6524: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6523: 
  #final label in statem expression
  L_6522: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_0_96
  move $s5, $v0
  L_6532: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6533: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6531
  j L_6531
  #final label in binaryExp
  L_6531: 
  #jumpToAllOnlyIf
  L_6529:
  move $v0, $s4
  beqz $v0, L_6530
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6541: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6542: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6540
  j L_6540
  #final label in binaryExp
  L_6540: 
  #T1Or
  L_6538:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6537
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6544: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6545: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6543
  j L_6543
  #final label in binaryExp
  L_6543: 
  #T2Or
  L_6539:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6537
  j L_6537
  #final label in binaryExp
  L_6537: 
  #jumpToAllOnlyIf
  L_6535:
  move $v0, $s4
  beqz $v0, L_6536
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6548: 
  move $v0, $s5
  sw $v0, T_9_0_197
  move $s4, $v0
  #final label in assignmentStatement
  L_6547: 
  #final label in statem expression
  L_6546: 
  j L_6534
  #inside else
  L_6536:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6551: 
  move $v0, $s5
  sw $v0, T_9_0_197
  move $s4, $v0
  #final label in assignmentStatement
  L_6550: 
  #final label in statem expression
  L_6549: 
  #if finish label = 6534
  L_6534:
  j L_6528
  #inside else
  L_6530:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6556: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6557: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6555
  j L_6555
  #final label in binaryExp
  L_6555: 
  #jumpToAllOnlyIf
  L_6553:
  move $v0, $s4
  beqz $v0, L_6554
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6560: 
  move $v0, $s5
  sw $v0, T_9_0_197
  move $s4, $v0
  #final label in assignmentStatement
  L_6559: 
  #final label in statem expression
  L_6558: 
  j L_6552
  #inside else
  L_6554:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6563: 
  move $v0, $s5
  sw $v0, T_9_0_197
  move $s4, $v0
  #final label in assignmentStatement
  L_6562: 
  #final label in statem expression
  L_6561: 
  #if finish label = 6552
  L_6552:
  #if finish label = 6528
  L_6528:
  j L_6516
  #inside else
  L_6518:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6568: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6569: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6567
  j L_6567
  #final label in binaryExp
  L_6567: 
  #jumpToAllOnlyIf
  L_6565:
  move $v0, $s4
  beqz $v0, L_6566
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6574: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6575: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6573: 
  #final label in codeGenAssignmentExpression
  L_6572: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6571: 
  #final label in statem expression
  L_6570: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_1_97
  move $s5, $v0
  L_6580: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6581: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6579
  j L_6579
  #final label in binaryExp
  L_6579: 
  #jumpToAllOnlyIf
  L_6577:
  move $v0, $s4
  beqz $v0, L_6578
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6589: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6590: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6588
  j L_6588
  #final label in binaryExp
  L_6588: 
  #T1Or
  L_6586:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6585
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6592: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6593: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6591
  j L_6591
  #final label in binaryExp
  L_6591: 
  #T2Or
  L_6587:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6585
  j L_6585
  #final label in binaryExp
  L_6585: 
  #jumpToAllOnlyIf
  L_6583:
  move $v0, $s4
  beqz $v0, L_6584
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6596: 
  move $v0, $s5
  sw $v0, T_9_1_198
  move $s4, $v0
  #final label in assignmentStatement
  L_6595: 
  #final label in statem expression
  L_6594: 
  j L_6582
  #inside else
  L_6584:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6599: 
  move $v0, $s5
  sw $v0, T_9_1_198
  move $s4, $v0
  #final label in assignmentStatement
  L_6598: 
  #final label in statem expression
  L_6597: 
  #if finish label = 6582
  L_6582:
  j L_6576
  #inside else
  L_6578:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6604: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6605: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6603
  j L_6603
  #final label in binaryExp
  L_6603: 
  #jumpToAllOnlyIf
  L_6601:
  move $v0, $s4
  beqz $v0, L_6602
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6608: 
  move $v0, $s5
  sw $v0, T_9_1_198
  move $s4, $v0
  #final label in assignmentStatement
  L_6607: 
  #final label in statem expression
  L_6606: 
  j L_6600
  #inside else
  L_6602:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6611: 
  move $v0, $s5
  sw $v0, T_9_1_198
  move $s4, $v0
  #final label in assignmentStatement
  L_6610: 
  #final label in statem expression
  L_6609: 
  #if finish label = 6600
  L_6600:
  #if finish label = 6576
  L_6576:
  j L_6564
  #inside else
  L_6566:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6616: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_6617: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6615
  j L_6615
  #final label in binaryExp
  L_6615: 
  #jumpToAllOnlyIf
  L_6613:
  move $v0, $s4
  beqz $v0, L_6614
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6622: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 2
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6623: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6621: 
  #final label in codeGenAssignmentExpression
  L_6620: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6619: 
  #final label in statem expression
  L_6618: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_2_98
  move $s5, $v0
  L_6628: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6629: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6627
  j L_6627
  #final label in binaryExp
  L_6627: 
  #jumpToAllOnlyIf
  L_6625:
  move $v0, $s4
  beqz $v0, L_6626
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6637: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6638: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6636
  j L_6636
  #final label in binaryExp
  L_6636: 
  #T1Or
  L_6634:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6633
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6640: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6641: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6639
  j L_6639
  #final label in binaryExp
  L_6639: 
  #T2Or
  L_6635:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6633
  j L_6633
  #final label in binaryExp
  L_6633: 
  #jumpToAllOnlyIf
  L_6631:
  move $v0, $s4
  beqz $v0, L_6632
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6644: 
  move $v0, $s5
  sw $v0, T_9_2_199
  move $s4, $v0
  #final label in assignmentStatement
  L_6643: 
  #final label in statem expression
  L_6642: 
  j L_6630
  #inside else
  L_6632:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6647: 
  move $v0, $s5
  sw $v0, T_9_2_199
  move $s4, $v0
  #final label in assignmentStatement
  L_6646: 
  #final label in statem expression
  L_6645: 
  #if finish label = 6630
  L_6630:
  j L_6624
  #inside else
  L_6626:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6652: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6653: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6651
  j L_6651
  #final label in binaryExp
  L_6651: 
  #jumpToAllOnlyIf
  L_6649:
  move $v0, $s4
  beqz $v0, L_6650
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6656: 
  move $v0, $s5
  sw $v0, T_9_2_199
  move $s4, $v0
  #final label in assignmentStatement
  L_6655: 
  #final label in statem expression
  L_6654: 
  j L_6648
  #inside else
  L_6650:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6659: 
  move $v0, $s5
  sw $v0, T_9_2_199
  move $s4, $v0
  #final label in assignmentStatement
  L_6658: 
  #final label in statem expression
  L_6657: 
  #if finish label = 6648
  L_6648:
  #if finish label = 6624
  L_6624:
  j L_6612
  #inside else
  L_6614:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6664: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6665: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6663
  j L_6663
  #final label in binaryExp
  L_6663: 
  #jumpToAllOnlyIf
  L_6661:
  move $v0, $s4
  beqz $v0, L_6662
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6670: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 3
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6671: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6669: 
  #final label in codeGenAssignmentExpression
  L_6668: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6667: 
  #final label in statem expression
  L_6666: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_3_99
  move $s5, $v0
  L_6676: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6677: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6675
  j L_6675
  #final label in binaryExp
  L_6675: 
  #jumpToAllOnlyIf
  L_6673:
  move $v0, $s4
  beqz $v0, L_6674
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6685: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6686: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6684
  j L_6684
  #final label in binaryExp
  L_6684: 
  #T1Or
  L_6682:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6681
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6688: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6689: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6687
  j L_6687
  #final label in binaryExp
  L_6687: 
  #T2Or
  L_6683:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6681
  j L_6681
  #final label in binaryExp
  L_6681: 
  #jumpToAllOnlyIf
  L_6679:
  move $v0, $s4
  beqz $v0, L_6680
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6692: 
  move $v0, $s5
  sw $v0, T_9_3_200
  move $s4, $v0
  #final label in assignmentStatement
  L_6691: 
  #final label in statem expression
  L_6690: 
  j L_6678
  #inside else
  L_6680:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6695: 
  move $v0, $s5
  sw $v0, T_9_3_200
  move $s4, $v0
  #final label in assignmentStatement
  L_6694: 
  #final label in statem expression
  L_6693: 
  #if finish label = 6678
  L_6678:
  j L_6672
  #inside else
  L_6674:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6700: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6701: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6699
  j L_6699
  #final label in binaryExp
  L_6699: 
  #jumpToAllOnlyIf
  L_6697:
  move $v0, $s4
  beqz $v0, L_6698
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6704: 
  move $v0, $s5
  sw $v0, T_9_3_200
  move $s4, $v0
  #final label in assignmentStatement
  L_6703: 
  #final label in statem expression
  L_6702: 
  j L_6696
  #inside else
  L_6698:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6707: 
  move $v0, $s5
  sw $v0, T_9_3_200
  move $s4, $v0
  #final label in assignmentStatement
  L_6706: 
  #final label in statem expression
  L_6705: 
  #if finish label = 6696
  L_6696:
  #if finish label = 6672
  L_6672:
  j L_6660
  #inside else
  L_6662:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6712: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_6713: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6711
  j L_6711
  #final label in binaryExp
  L_6711: 
  #jumpToAllOnlyIf
  L_6709:
  move $v0, $s4
  beqz $v0, L_6710
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6718: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 4
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6719: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6717: 
  #final label in codeGenAssignmentExpression
  L_6716: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6715: 
  #final label in statem expression
  L_6714: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_4_100
  move $s5, $v0
  L_6724: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6725: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6723
  j L_6723
  #final label in binaryExp
  L_6723: 
  #jumpToAllOnlyIf
  L_6721:
  move $v0, $s4
  beqz $v0, L_6722
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6733: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6734: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6732
  j L_6732
  #final label in binaryExp
  L_6732: 
  #T1Or
  L_6730:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6729
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6736: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6737: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6735
  j L_6735
  #final label in binaryExp
  L_6735: 
  #T2Or
  L_6731:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6729
  j L_6729
  #final label in binaryExp
  L_6729: 
  #jumpToAllOnlyIf
  L_6727:
  move $v0, $s4
  beqz $v0, L_6728
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6740: 
  move $v0, $s5
  sw $v0, T_9_4_201
  move $s4, $v0
  #final label in assignmentStatement
  L_6739: 
  #final label in statem expression
  L_6738: 
  j L_6726
  #inside else
  L_6728:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6743: 
  move $v0, $s5
  sw $v0, T_9_4_201
  move $s4, $v0
  #final label in assignmentStatement
  L_6742: 
  #final label in statem expression
  L_6741: 
  #if finish label = 6726
  L_6726:
  j L_6720
  #inside else
  L_6722:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6748: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6749: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6747
  j L_6747
  #final label in binaryExp
  L_6747: 
  #jumpToAllOnlyIf
  L_6745:
  move $v0, $s4
  beqz $v0, L_6746
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6752: 
  move $v0, $s5
  sw $v0, T_9_4_201
  move $s4, $v0
  #final label in assignmentStatement
  L_6751: 
  #final label in statem expression
  L_6750: 
  j L_6744
  #inside else
  L_6746:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6755: 
  move $v0, $s5
  sw $v0, T_9_4_201
  move $s4, $v0
  #final label in assignmentStatement
  L_6754: 
  #final label in statem expression
  L_6753: 
  #if finish label = 6744
  L_6744:
  #if finish label = 6720
  L_6720:
  j L_6708
  #inside else
  L_6710:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6760: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_6761: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6759
  j L_6759
  #final label in binaryExp
  L_6759: 
  #jumpToAllOnlyIf
  L_6757:
  move $v0, $s4
  beqz $v0, L_6758
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6766: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 5
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6767: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6765: 
  #final label in codeGenAssignmentExpression
  L_6764: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6763: 
  #final label in statem expression
  L_6762: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_5_101
  move $s5, $v0
  L_6772: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6773: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6771
  j L_6771
  #final label in binaryExp
  L_6771: 
  #jumpToAllOnlyIf
  L_6769:
  move $v0, $s4
  beqz $v0, L_6770
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6781: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6782: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6780
  j L_6780
  #final label in binaryExp
  L_6780: 
  #T1Or
  L_6778:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6777
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6784: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6785: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6783
  j L_6783
  #final label in binaryExp
  L_6783: 
  #T2Or
  L_6779:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6777
  j L_6777
  #final label in binaryExp
  L_6777: 
  #jumpToAllOnlyIf
  L_6775:
  move $v0, $s4
  beqz $v0, L_6776
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6788: 
  move $v0, $s5
  sw $v0, T_9_5_202
  move $s4, $v0
  #final label in assignmentStatement
  L_6787: 
  #final label in statem expression
  L_6786: 
  j L_6774
  #inside else
  L_6776:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6791: 
  move $v0, $s5
  sw $v0, T_9_5_202
  move $s4, $v0
  #final label in assignmentStatement
  L_6790: 
  #final label in statem expression
  L_6789: 
  #if finish label = 6774
  L_6774:
  j L_6768
  #inside else
  L_6770:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6796: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6797: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6795
  j L_6795
  #final label in binaryExp
  L_6795: 
  #jumpToAllOnlyIf
  L_6793:
  move $v0, $s4
  beqz $v0, L_6794
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6800: 
  move $v0, $s5
  sw $v0, T_9_5_202
  move $s4, $v0
  #final label in assignmentStatement
  L_6799: 
  #final label in statem expression
  L_6798: 
  j L_6792
  #inside else
  L_6794:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6803: 
  move $v0, $s5
  sw $v0, T_9_5_202
  move $s4, $v0
  #final label in assignmentStatement
  L_6802: 
  #final label in statem expression
  L_6801: 
  #if finish label = 6792
  L_6792:
  #if finish label = 6768
  L_6768:
  j L_6756
  #inside else
  L_6758:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6808: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_6809: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6807
  j L_6807
  #final label in binaryExp
  L_6807: 
  #jumpToAllOnlyIf
  L_6805:
  move $v0, $s4
  beqz $v0, L_6806
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6814: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 6
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6815: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6813: 
  #final label in codeGenAssignmentExpression
  L_6812: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6811: 
  #final label in statem expression
  L_6810: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_6_102
  move $s5, $v0
  L_6820: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6821: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6819
  j L_6819
  #final label in binaryExp
  L_6819: 
  #jumpToAllOnlyIf
  L_6817:
  move $v0, $s4
  beqz $v0, L_6818
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6829: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6830: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6828
  j L_6828
  #final label in binaryExp
  L_6828: 
  #T1Or
  L_6826:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6825
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6832: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6833: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6831
  j L_6831
  #final label in binaryExp
  L_6831: 
  #T2Or
  L_6827:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6825
  j L_6825
  #final label in binaryExp
  L_6825: 
  #jumpToAllOnlyIf
  L_6823:
  move $v0, $s4
  beqz $v0, L_6824
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6836: 
  move $v0, $s5
  sw $v0, T_9_6_203
  move $s4, $v0
  #final label in assignmentStatement
  L_6835: 
  #final label in statem expression
  L_6834: 
  j L_6822
  #inside else
  L_6824:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6839: 
  move $v0, $s5
  sw $v0, T_9_6_203
  move $s4, $v0
  #final label in assignmentStatement
  L_6838: 
  #final label in statem expression
  L_6837: 
  #if finish label = 6822
  L_6822:
  j L_6816
  #inside else
  L_6818:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6844: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6845: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6843
  j L_6843
  #final label in binaryExp
  L_6843: 
  #jumpToAllOnlyIf
  L_6841:
  move $v0, $s4
  beqz $v0, L_6842
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6848: 
  move $v0, $s5
  sw $v0, T_9_6_203
  move $s4, $v0
  #final label in assignmentStatement
  L_6847: 
  #final label in statem expression
  L_6846: 
  j L_6840
  #inside else
  L_6842:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6851: 
  move $v0, $s5
  sw $v0, T_9_6_203
  move $s4, $v0
  #final label in assignmentStatement
  L_6850: 
  #final label in statem expression
  L_6849: 
  #if finish label = 6840
  L_6840:
  #if finish label = 6816
  L_6816:
  j L_6804
  #inside else
  L_6806:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6856: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_6857: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6855
  j L_6855
  #final label in binaryExp
  L_6855: 
  #jumpToAllOnlyIf
  L_6853:
  move $v0, $s4
  beqz $v0, L_6854
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6862: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 7
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6863: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6861: 
  #final label in codeGenAssignmentExpression
  L_6860: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6859: 
  #final label in statem expression
  L_6858: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_7_103
  move $s5, $v0
  L_6868: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6869: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6867
  j L_6867
  #final label in binaryExp
  L_6867: 
  #jumpToAllOnlyIf
  L_6865:
  move $v0, $s4
  beqz $v0, L_6866
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6877: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6878: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6876
  j L_6876
  #final label in binaryExp
  L_6876: 
  #T1Or
  L_6874:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6873
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6880: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6881: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6879
  j L_6879
  #final label in binaryExp
  L_6879: 
  #T2Or
  L_6875:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6873
  j L_6873
  #final label in binaryExp
  L_6873: 
  #jumpToAllOnlyIf
  L_6871:
  move $v0, $s4
  beqz $v0, L_6872
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6884: 
  move $v0, $s5
  sw $v0, T_9_7_204
  move $s4, $v0
  #final label in assignmentStatement
  L_6883: 
  #final label in statem expression
  L_6882: 
  j L_6870
  #inside else
  L_6872:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6887: 
  move $v0, $s5
  sw $v0, T_9_7_204
  move $s4, $v0
  #final label in assignmentStatement
  L_6886: 
  #final label in statem expression
  L_6885: 
  #if finish label = 6870
  L_6870:
  j L_6864
  #inside else
  L_6866:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6892: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6893: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6891
  j L_6891
  #final label in binaryExp
  L_6891: 
  #jumpToAllOnlyIf
  L_6889:
  move $v0, $s4
  beqz $v0, L_6890
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6896: 
  move $v0, $s5
  sw $v0, T_9_7_204
  move $s4, $v0
  #final label in assignmentStatement
  L_6895: 
  #final label in statem expression
  L_6894: 
  j L_6888
  #inside else
  L_6890:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6899: 
  move $v0, $s5
  sw $v0, T_9_7_204
  move $s4, $v0
  #final label in assignmentStatement
  L_6898: 
  #final label in statem expression
  L_6897: 
  #if finish label = 6888
  L_6888:
  #if finish label = 6864
  L_6864:
  j L_6852
  #inside else
  L_6854:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6904: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_6905: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6903
  j L_6903
  #final label in binaryExp
  L_6903: 
  #jumpToAllOnlyIf
  L_6901:
  move $v0, $s4
  beqz $v0, L_6902
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6910: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 8
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6911: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6909: 
  #final label in codeGenAssignmentExpression
  L_6908: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6907: 
  #final label in statem expression
  L_6906: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_8_104
  move $s5, $v0
  L_6916: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6917: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6915
  j L_6915
  #final label in binaryExp
  L_6915: 
  #jumpToAllOnlyIf
  L_6913:
  move $v0, $s4
  beqz $v0, L_6914
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6925: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6926: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6924
  j L_6924
  #final label in binaryExp
  L_6924: 
  #T1Or
  L_6922:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6921
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6928: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6929: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6927
  j L_6927
  #final label in binaryExp
  L_6927: 
  #T2Or
  L_6923:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6921
  j L_6921
  #final label in binaryExp
  L_6921: 
  #jumpToAllOnlyIf
  L_6919:
  move $v0, $s4
  beqz $v0, L_6920
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6932: 
  move $v0, $s5
  sw $v0, T_9_8_205
  move $s4, $v0
  #final label in assignmentStatement
  L_6931: 
  #final label in statem expression
  L_6930: 
  j L_6918
  #inside else
  L_6920:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6935: 
  move $v0, $s5
  sw $v0, T_9_8_205
  move $s4, $v0
  #final label in assignmentStatement
  L_6934: 
  #final label in statem expression
  L_6933: 
  #if finish label = 6918
  L_6918:
  j L_6912
  #inside else
  L_6914:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6940: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6941: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6939
  j L_6939
  #final label in binaryExp
  L_6939: 
  #jumpToAllOnlyIf
  L_6937:
  move $v0, $s4
  beqz $v0, L_6938
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6944: 
  move $v0, $s5
  sw $v0, T_9_8_205
  move $s4, $v0
  #final label in assignmentStatement
  L_6943: 
  #final label in statem expression
  L_6942: 
  j L_6936
  #inside else
  L_6938:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6947: 
  move $v0, $s5
  sw $v0, T_9_8_205
  move $s4, $v0
  #final label in assignmentStatement
  L_6946: 
  #final label in statem expression
  L_6945: 
  #if finish label = 6936
  L_6936:
  #if finish label = 6912
  L_6912:
  j L_6900
  #inside else
  L_6902:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_6951: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_6952: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6950
  j L_6950
  #final label in binaryExp
  L_6950: 
  #jumpToAllOnlyIf
  L_6949:
  move $v0, $s4
  beqz $v0, L_6948
  #inside codeGenAssignmentExpression
  #reg name $s4
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #0 = $s5
  #final label of #0 in funcInvEvalArgs
  L_6957: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #inside funcInvEvalArgs #1
  #storing literal to v0
  #reg name $s5
  li $v0, 9
  move $s5, $v0
#regData in funcInv #1 = $s5
  #final label of #1 in funcInvEvalArgs
  L_6958: 
  move $v0, $s5
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 4($sp)
  lw $a1, 0($sp)
  jal neighbours_208
  #load back saved regs from stack
  addu $sp, $sp, 64
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s5
  move $s5, $v0
  #final label in funcInvStatement
  L_6956: 
  #final label in codeGenAssignmentExpression
  L_6955: 
  move $v0, $s5
  move $s3, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6954: 
  #final label in statem expression
  L_6953: 
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, A_9_9_105
  move $s5, $v0
  L_6963: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_6964: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6962
  j L_6962
  #final label in binaryExp
  L_6962: 
  #jumpToAllOnlyIf
  L_6960:
  move $v0, $s4
  beqz $v0, L_6961
  #starting if
  #In OR
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6972: 
  #storing literal to v0
  #reg name $s7
  li $v0, 2
  move $s7, $v0
  L_6973: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6971
  j L_6971
  #final label in binaryExp
  L_6971: 
  #T1Or
  L_6969:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6968
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s3
  move $s6, $v0
  L_6975: 
  #storing literal to v0
  #reg name $s7
  li $v0, 3
  move $s7, $v0
  L_6976: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  seq $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6974
  j L_6974
  #final label in binaryExp
  L_6974: 
  #T2Or
  L_6970:
  move $v0, $s5
  move $s4, $v0
  bnez $v0, L_6968
  j L_6968
  #final label in binaryExp
  L_6968: 
  #jumpToAllOnlyIf
  L_6966:
  move $v0, $s4
  beqz $v0, L_6967
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6979: 
  move $v0, $s5
  sw $v0, T_9_9_206
  move $s4, $v0
  #final label in assignmentStatement
  L_6978: 
  #final label in statem expression
  L_6977: 
  j L_6965
  #inside else
  L_6967:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6982: 
  move $v0, $s5
  sw $v0, T_9_9_206
  move $s4, $v0
  #final label in assignmentStatement
  L_6981: 
  #final label in statem expression
  L_6980: 
  #if finish label = 6965
  L_6965:
  j L_6959
  #inside else
  L_6961:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s3
  move $s5, $v0
  L_6987: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_6988: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_6986
  j L_6986
  #final label in binaryExp
  L_6986: 
  #jumpToAllOnlyIf
  L_6984:
  move $v0, $s4
  beqz $v0, L_6985
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6991: 
  move $v0, $s5
  sw $v0, T_9_9_206
  move $s4, $v0
  #final label in assignmentStatement
  L_6990: 
  #final label in statem expression
  L_6989: 
  j L_6983
  #inside else
  L_6985:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_6994: 
  move $v0, $s5
  sw $v0, T_9_9_206
  move $s4, $v0
  #final label in assignmentStatement
  L_6993: 
  #final label in statem expression
  L_6992: 
  #if finish label = 6983
  L_6983:
  #if finish label = 6959
  L_6959:
  #if finish label = 6948
  L_6948:
  #if finish label = 6900
  L_6900:
  #if finish label = 6852
  L_6852:
  #if finish label = 6804
  L_6804:
  #if finish label = 6756
  L_6756:
  #if finish label = 6708
  L_6708:
  #if finish label = 6660
  L_6660:
  #if finish label = 6612
  L_6612:
  #if finish label = 6564
  L_6564:
  #if finish label = 6516
  L_6516:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_6999: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7000: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_6998
  j L_6998
  #final label in binaryExp
  L_6998: 
  #final label in codeGenAssignmentExpression
  L_6997: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_6996: 
  #final label in statem expression
  L_6995: 
  #whileBodyEndJump
  L_6511:
  j  L_6509
  #while finish label = 6508
  L_6508:
  #if finish label = 6500
  L_6500:
  #if finish label = 5998
  L_5998:
  #if finish label = 5496
  L_5496:
  #if finish label = 4994
  L_4994:
  #if finish label = 4492
  L_4492:
  #if finish label = 3990
  L_3990:
  #if finish label = 3488
  L_3488:
  #if finish label = 2986
  L_2986:
  #if finish label = 2484
  L_2484:
  #if finish label = 1982
  L_1982:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s0
  move $s6, $v0
  L_7005: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7006: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7004
  j L_7004
  #final label in binaryExp
  L_7004: 
  #final label in codeGenAssignmentExpression
  L_7003: 
  move $v0, $s5
  move $s0, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7002: 
  #final label in statem expression
  L_7001: 
  #whileBodyEndJump
  L_1977:
  j  L_1975
  #while finish label = 1974
  L_1974:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7009: 
  move $v0, $s5
  move $s0, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7008: 
  #final label in statem expression
  L_7007: 
  #starting while
  #start of while loop
  L_7011:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7015: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7016: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7014
  j L_7014
  #final label in binaryExp
  L_7014: 
  #jumpToAllOnlyIf
  L_7012:
  move $v0, $s4
  bnez $v0, L_7017
  j L_7010
  #whileBodyLabel
  L_7017:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7022: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7023: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7021
  j L_7021
  #final label in binaryExp
  L_7021: 
  #jumpToAllOnlyIf
  L_7019:
  move $v0, $s4
  beqz $v0, L_7020
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7026: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7025: 
  #final label in statem expression
  L_7024: 
  #starting while
  #start of while loop
  L_7028:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7032: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7033: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7031
  j L_7031
  #final label in binaryExp
  L_7031: 
  #jumpToAllOnlyIf
  L_7029:
  move $v0, $s4
  bnez $v0, L_7034
  j L_7027
  #whileBodyLabel
  L_7034:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7039: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7040: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7038
  j L_7038
  #final label in binaryExp
  L_7038: 
  #jumpToAllOnlyIf
  L_7036:
  move $v0, $s4
  beqz $v0, L_7037
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_0_107
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7043: 
  move $v0, $s5
  sw $v0, A_0_0_6
  move $s4, $v0
  #final label in assignmentStatement
  L_7042: 
  #final label in statem expression
  L_7041: 
  j L_7035
  #inside else
  L_7037:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7048: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7049: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7047
  j L_7047
  #final label in binaryExp
  L_7047: 
  #jumpToAllOnlyIf
  L_7045:
  move $v0, $s4
  beqz $v0, L_7046
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_1_108
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7052: 
  move $v0, $s5
  sw $v0, A_0_1_7
  move $s4, $v0
  #final label in assignmentStatement
  L_7051: 
  #final label in statem expression
  L_7050: 
  j L_7044
  #inside else
  L_7046:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7057: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7058: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7056
  j L_7056
  #final label in binaryExp
  L_7056: 
  #jumpToAllOnlyIf
  L_7054:
  move $v0, $s4
  beqz $v0, L_7055
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_2_109
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7061: 
  move $v0, $s5
  sw $v0, A_0_2_8
  move $s4, $v0
  #final label in assignmentStatement
  L_7060: 
  #final label in statem expression
  L_7059: 
  j L_7053
  #inside else
  L_7055:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7066: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7067: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7065
  j L_7065
  #final label in binaryExp
  L_7065: 
  #jumpToAllOnlyIf
  L_7063:
  move $v0, $s4
  beqz $v0, L_7064
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_3_110
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7070: 
  move $v0, $s5
  sw $v0, A_0_3_9
  move $s4, $v0
  #final label in assignmentStatement
  L_7069: 
  #final label in statem expression
  L_7068: 
  j L_7062
  #inside else
  L_7064:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7075: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7076: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7074
  j L_7074
  #final label in binaryExp
  L_7074: 
  #jumpToAllOnlyIf
  L_7072:
  move $v0, $s4
  beqz $v0, L_7073
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_4_111
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7079: 
  move $v0, $s5
  sw $v0, A_0_4_10
  move $s4, $v0
  #final label in assignmentStatement
  L_7078: 
  #final label in statem expression
  L_7077: 
  j L_7071
  #inside else
  L_7073:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7084: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7085: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7083
  j L_7083
  #final label in binaryExp
  L_7083: 
  #jumpToAllOnlyIf
  L_7081:
  move $v0, $s4
  beqz $v0, L_7082
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_5_112
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7088: 
  move $v0, $s5
  sw $v0, A_0_5_11
  move $s4, $v0
  #final label in assignmentStatement
  L_7087: 
  #final label in statem expression
  L_7086: 
  j L_7080
  #inside else
  L_7082:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7093: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7094: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7092
  j L_7092
  #final label in binaryExp
  L_7092: 
  #jumpToAllOnlyIf
  L_7090:
  move $v0, $s4
  beqz $v0, L_7091
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_6_113
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7097: 
  move $v0, $s5
  sw $v0, A_0_6_12
  move $s4, $v0
  #final label in assignmentStatement
  L_7096: 
  #final label in statem expression
  L_7095: 
  j L_7089
  #inside else
  L_7091:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7102: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7103: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7101
  j L_7101
  #final label in binaryExp
  L_7101: 
  #jumpToAllOnlyIf
  L_7099:
  move $v0, $s4
  beqz $v0, L_7100
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_7_114
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7106: 
  move $v0, $s5
  sw $v0, A_0_7_13
  move $s4, $v0
  #final label in assignmentStatement
  L_7105: 
  #final label in statem expression
  L_7104: 
  j L_7098
  #inside else
  L_7100:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7111: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7112: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7110
  j L_7110
  #final label in binaryExp
  L_7110: 
  #jumpToAllOnlyIf
  L_7108:
  move $v0, $s4
  beqz $v0, L_7109
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_8_115
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7115: 
  move $v0, $s5
  sw $v0, A_0_8_14
  move $s4, $v0
  #final label in assignmentStatement
  L_7114: 
  #final label in statem expression
  L_7113: 
  j L_7107
  #inside else
  L_7109:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7119: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7120: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7118
  j L_7118
  #final label in binaryExp
  L_7118: 
  #jumpToAllOnlyIf
  L_7117:
  move $v0, $s4
  beqz $v0, L_7116
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_0_9_116
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7123: 
  move $v0, $s5
  sw $v0, A_0_9_15
  move $s4, $v0
  #final label in assignmentStatement
  L_7122: 
  #final label in statem expression
  L_7121: 
  #if finish label = 7116
  L_7116:
  #if finish label = 7107
  L_7107:
  #if finish label = 7098
  L_7098:
  #if finish label = 7089
  L_7089:
  #if finish label = 7080
  L_7080:
  #if finish label = 7071
  L_7071:
  #if finish label = 7062
  L_7062:
  #if finish label = 7053
  L_7053:
  #if finish label = 7044
  L_7044:
  #if finish label = 7035
  L_7035:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_7128: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7129: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7127
  j L_7127
  #final label in binaryExp
  L_7127: 
  #final label in codeGenAssignmentExpression
  L_7126: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7125: 
  #final label in statem expression
  L_7124: 
  #whileBodyEndJump
  L_7030:
  j  L_7028
  #while finish label = 7027
  L_7027:
  j L_7018
  #inside else
  L_7020:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7134: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7135: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7133
  j L_7133
  #final label in binaryExp
  L_7133: 
  #jumpToAllOnlyIf
  L_7131:
  move $v0, $s4
  beqz $v0, L_7132
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7138: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7137: 
  #final label in statem expression
  L_7136: 
  #starting while
  #start of while loop
  L_7140:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7144: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7145: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7143
  j L_7143
  #final label in binaryExp
  L_7143: 
  #jumpToAllOnlyIf
  L_7141:
  move $v0, $s4
  bnez $v0, L_7146
  j L_7139
  #whileBodyLabel
  L_7146:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7151: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7152: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7150
  j L_7150
  #final label in binaryExp
  L_7150: 
  #jumpToAllOnlyIf
  L_7148:
  move $v0, $s4
  beqz $v0, L_7149
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_0_117
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7155: 
  move $v0, $s5
  sw $v0, A_1_0_16
  move $s4, $v0
  #final label in assignmentStatement
  L_7154: 
  #final label in statem expression
  L_7153: 
  j L_7147
  #inside else
  L_7149:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7160: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7161: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7159
  j L_7159
  #final label in binaryExp
  L_7159: 
  #jumpToAllOnlyIf
  L_7157:
  move $v0, $s4
  beqz $v0, L_7158
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_1_118
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7164: 
  move $v0, $s5
  sw $v0, A_1_1_17
  move $s4, $v0
  #final label in assignmentStatement
  L_7163: 
  #final label in statem expression
  L_7162: 
  j L_7156
  #inside else
  L_7158:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7169: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7170: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7168
  j L_7168
  #final label in binaryExp
  L_7168: 
  #jumpToAllOnlyIf
  L_7166:
  move $v0, $s4
  beqz $v0, L_7167
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_2_119
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7173: 
  move $v0, $s5
  sw $v0, A_1_2_18
  move $s4, $v0
  #final label in assignmentStatement
  L_7172: 
  #final label in statem expression
  L_7171: 
  j L_7165
  #inside else
  L_7167:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7178: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7179: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7177
  j L_7177
  #final label in binaryExp
  L_7177: 
  #jumpToAllOnlyIf
  L_7175:
  move $v0, $s4
  beqz $v0, L_7176
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_3_120
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7182: 
  move $v0, $s5
  sw $v0, A_1_3_19
  move $s4, $v0
  #final label in assignmentStatement
  L_7181: 
  #final label in statem expression
  L_7180: 
  j L_7174
  #inside else
  L_7176:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7187: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7188: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7186
  j L_7186
  #final label in binaryExp
  L_7186: 
  #jumpToAllOnlyIf
  L_7184:
  move $v0, $s4
  beqz $v0, L_7185
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_4_121
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7191: 
  move $v0, $s5
  sw $v0, A_1_4_20
  move $s4, $v0
  #final label in assignmentStatement
  L_7190: 
  #final label in statem expression
  L_7189: 
  j L_7183
  #inside else
  L_7185:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7196: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7197: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7195
  j L_7195
  #final label in binaryExp
  L_7195: 
  #jumpToAllOnlyIf
  L_7193:
  move $v0, $s4
  beqz $v0, L_7194
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_5_122
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7200: 
  move $v0, $s5
  sw $v0, A_1_5_21
  move $s4, $v0
  #final label in assignmentStatement
  L_7199: 
  #final label in statem expression
  L_7198: 
  j L_7192
  #inside else
  L_7194:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7205: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7206: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7204
  j L_7204
  #final label in binaryExp
  L_7204: 
  #jumpToAllOnlyIf
  L_7202:
  move $v0, $s4
  beqz $v0, L_7203
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_6_123
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7209: 
  move $v0, $s5
  sw $v0, A_1_6_22
  move $s4, $v0
  #final label in assignmentStatement
  L_7208: 
  #final label in statem expression
  L_7207: 
  j L_7201
  #inside else
  L_7203:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7214: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7215: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7213
  j L_7213
  #final label in binaryExp
  L_7213: 
  #jumpToAllOnlyIf
  L_7211:
  move $v0, $s4
  beqz $v0, L_7212
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_7_124
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7218: 
  move $v0, $s5
  sw $v0, A_1_7_23
  move $s4, $v0
  #final label in assignmentStatement
  L_7217: 
  #final label in statem expression
  L_7216: 
  j L_7210
  #inside else
  L_7212:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7223: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7224: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7222
  j L_7222
  #final label in binaryExp
  L_7222: 
  #jumpToAllOnlyIf
  L_7220:
  move $v0, $s4
  beqz $v0, L_7221
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_8_125
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7227: 
  move $v0, $s5
  sw $v0, A_1_8_24
  move $s4, $v0
  #final label in assignmentStatement
  L_7226: 
  #final label in statem expression
  L_7225: 
  j L_7219
  #inside else
  L_7221:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7231: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7232: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7230
  j L_7230
  #final label in binaryExp
  L_7230: 
  #jumpToAllOnlyIf
  L_7229:
  move $v0, $s4
  beqz $v0, L_7228
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_1_9_126
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7235: 
  move $v0, $s5
  sw $v0, A_1_9_25
  move $s4, $v0
  #final label in assignmentStatement
  L_7234: 
  #final label in statem expression
  L_7233: 
  #if finish label = 7228
  L_7228:
  #if finish label = 7219
  L_7219:
  #if finish label = 7210
  L_7210:
  #if finish label = 7201
  L_7201:
  #if finish label = 7192
  L_7192:
  #if finish label = 7183
  L_7183:
  #if finish label = 7174
  L_7174:
  #if finish label = 7165
  L_7165:
  #if finish label = 7156
  L_7156:
  #if finish label = 7147
  L_7147:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_7240: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7241: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7239
  j L_7239
  #final label in binaryExp
  L_7239: 
  #final label in codeGenAssignmentExpression
  L_7238: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7237: 
  #final label in statem expression
  L_7236: 
  #whileBodyEndJump
  L_7142:
  j  L_7140
  #while finish label = 7139
  L_7139:
  j L_7130
  #inside else
  L_7132:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7246: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7247: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7245
  j L_7245
  #final label in binaryExp
  L_7245: 
  #jumpToAllOnlyIf
  L_7243:
  move $v0, $s4
  beqz $v0, L_7244
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7250: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7249: 
  #final label in statem expression
  L_7248: 
  #starting while
  #start of while loop
  L_7252:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7256: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7257: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7255
  j L_7255
  #final label in binaryExp
  L_7255: 
  #jumpToAllOnlyIf
  L_7253:
  move $v0, $s4
  bnez $v0, L_7258
  j L_7251
  #whileBodyLabel
  L_7258:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7263: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7264: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7262
  j L_7262
  #final label in binaryExp
  L_7262: 
  #jumpToAllOnlyIf
  L_7260:
  move $v0, $s4
  beqz $v0, L_7261
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_0_127
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7267: 
  move $v0, $s5
  sw $v0, A_2_0_26
  move $s4, $v0
  #final label in assignmentStatement
  L_7266: 
  #final label in statem expression
  L_7265: 
  j L_7259
  #inside else
  L_7261:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7272: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7273: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7271
  j L_7271
  #final label in binaryExp
  L_7271: 
  #jumpToAllOnlyIf
  L_7269:
  move $v0, $s4
  beqz $v0, L_7270
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_1_128
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7276: 
  move $v0, $s5
  sw $v0, A_2_1_27
  move $s4, $v0
  #final label in assignmentStatement
  L_7275: 
  #final label in statem expression
  L_7274: 
  j L_7268
  #inside else
  L_7270:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7281: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7282: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7280
  j L_7280
  #final label in binaryExp
  L_7280: 
  #jumpToAllOnlyIf
  L_7278:
  move $v0, $s4
  beqz $v0, L_7279
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_2_129
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7285: 
  move $v0, $s5
  sw $v0, A_2_2_28
  move $s4, $v0
  #final label in assignmentStatement
  L_7284: 
  #final label in statem expression
  L_7283: 
  j L_7277
  #inside else
  L_7279:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7290: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7291: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7289
  j L_7289
  #final label in binaryExp
  L_7289: 
  #jumpToAllOnlyIf
  L_7287:
  move $v0, $s4
  beqz $v0, L_7288
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_3_130
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7294: 
  move $v0, $s5
  sw $v0, A_2_3_29
  move $s4, $v0
  #final label in assignmentStatement
  L_7293: 
  #final label in statem expression
  L_7292: 
  j L_7286
  #inside else
  L_7288:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7299: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7300: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7298
  j L_7298
  #final label in binaryExp
  L_7298: 
  #jumpToAllOnlyIf
  L_7296:
  move $v0, $s4
  beqz $v0, L_7297
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_4_131
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7303: 
  move $v0, $s5
  sw $v0, A_2_4_30
  move $s4, $v0
  #final label in assignmentStatement
  L_7302: 
  #final label in statem expression
  L_7301: 
  j L_7295
  #inside else
  L_7297:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7308: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7309: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7307
  j L_7307
  #final label in binaryExp
  L_7307: 
  #jumpToAllOnlyIf
  L_7305:
  move $v0, $s4
  beqz $v0, L_7306
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_5_132
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7312: 
  move $v0, $s5
  sw $v0, A_2_5_31
  move $s4, $v0
  #final label in assignmentStatement
  L_7311: 
  #final label in statem expression
  L_7310: 
  j L_7304
  #inside else
  L_7306:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7317: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7318: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7316
  j L_7316
  #final label in binaryExp
  L_7316: 
  #jumpToAllOnlyIf
  L_7314:
  move $v0, $s4
  beqz $v0, L_7315
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_6_133
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7321: 
  move $v0, $s5
  sw $v0, A_2_6_32
  move $s4, $v0
  #final label in assignmentStatement
  L_7320: 
  #final label in statem expression
  L_7319: 
  j L_7313
  #inside else
  L_7315:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7326: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7327: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7325
  j L_7325
  #final label in binaryExp
  L_7325: 
  #jumpToAllOnlyIf
  L_7323:
  move $v0, $s4
  beqz $v0, L_7324
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_7_134
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7330: 
  move $v0, $s5
  sw $v0, A_2_7_33
  move $s4, $v0
  #final label in assignmentStatement
  L_7329: 
  #final label in statem expression
  L_7328: 
  j L_7322
  #inside else
  L_7324:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7335: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7336: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7334
  j L_7334
  #final label in binaryExp
  L_7334: 
  #jumpToAllOnlyIf
  L_7332:
  move $v0, $s4
  beqz $v0, L_7333
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_8_135
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7339: 
  move $v0, $s5
  sw $v0, A_2_8_34
  move $s4, $v0
  #final label in assignmentStatement
  L_7338: 
  #final label in statem expression
  L_7337: 
  j L_7331
  #inside else
  L_7333:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7343: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7344: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7342
  j L_7342
  #final label in binaryExp
  L_7342: 
  #jumpToAllOnlyIf
  L_7341:
  move $v0, $s4
  beqz $v0, L_7340
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_2_9_136
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7347: 
  move $v0, $s5
  sw $v0, A_2_9_35
  move $s4, $v0
  #final label in assignmentStatement
  L_7346: 
  #final label in statem expression
  L_7345: 
  #if finish label = 7340
  L_7340:
  #if finish label = 7331
  L_7331:
  #if finish label = 7322
  L_7322:
  #if finish label = 7313
  L_7313:
  #if finish label = 7304
  L_7304:
  #if finish label = 7295
  L_7295:
  #if finish label = 7286
  L_7286:
  #if finish label = 7277
  L_7277:
  #if finish label = 7268
  L_7268:
  #if finish label = 7259
  L_7259:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_7352: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7353: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7351
  j L_7351
  #final label in binaryExp
  L_7351: 
  #final label in codeGenAssignmentExpression
  L_7350: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7349: 
  #final label in statem expression
  L_7348: 
  #whileBodyEndJump
  L_7254:
  j  L_7252
  #while finish label = 7251
  L_7251:
  j L_7242
  #inside else
  L_7244:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7358: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7359: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7357
  j L_7357
  #final label in binaryExp
  L_7357: 
  #jumpToAllOnlyIf
  L_7355:
  move $v0, $s4
  beqz $v0, L_7356
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7362: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7361: 
  #final label in statem expression
  L_7360: 
  #starting while
  #start of while loop
  L_7364:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7368: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7369: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7367
  j L_7367
  #final label in binaryExp
  L_7367: 
  #jumpToAllOnlyIf
  L_7365:
  move $v0, $s4
  bnez $v0, L_7370
  j L_7363
  #whileBodyLabel
  L_7370:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7375: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7376: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7374
  j L_7374
  #final label in binaryExp
  L_7374: 
  #jumpToAllOnlyIf
  L_7372:
  move $v0, $s4
  beqz $v0, L_7373
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_0_137
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7379: 
  move $v0, $s5
  sw $v0, A_3_0_36
  move $s4, $v0
  #final label in assignmentStatement
  L_7378: 
  #final label in statem expression
  L_7377: 
  j L_7371
  #inside else
  L_7373:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7384: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7385: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7383
  j L_7383
  #final label in binaryExp
  L_7383: 
  #jumpToAllOnlyIf
  L_7381:
  move $v0, $s4
  beqz $v0, L_7382
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_1_138
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7388: 
  move $v0, $s5
  sw $v0, A_3_1_37
  move $s4, $v0
  #final label in assignmentStatement
  L_7387: 
  #final label in statem expression
  L_7386: 
  j L_7380
  #inside else
  L_7382:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7393: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7394: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7392
  j L_7392
  #final label in binaryExp
  L_7392: 
  #jumpToAllOnlyIf
  L_7390:
  move $v0, $s4
  beqz $v0, L_7391
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_2_139
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7397: 
  move $v0, $s5
  sw $v0, A_3_2_38
  move $s4, $v0
  #final label in assignmentStatement
  L_7396: 
  #final label in statem expression
  L_7395: 
  j L_7389
  #inside else
  L_7391:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7402: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7403: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7401
  j L_7401
  #final label in binaryExp
  L_7401: 
  #jumpToAllOnlyIf
  L_7399:
  move $v0, $s4
  beqz $v0, L_7400
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_3_140
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7406: 
  move $v0, $s5
  sw $v0, A_3_3_39
  move $s4, $v0
  #final label in assignmentStatement
  L_7405: 
  #final label in statem expression
  L_7404: 
  j L_7398
  #inside else
  L_7400:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7411: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7412: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7410
  j L_7410
  #final label in binaryExp
  L_7410: 
  #jumpToAllOnlyIf
  L_7408:
  move $v0, $s4
  beqz $v0, L_7409
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_4_141
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7415: 
  move $v0, $s5
  sw $v0, A_3_4_40
  move $s4, $v0
  #final label in assignmentStatement
  L_7414: 
  #final label in statem expression
  L_7413: 
  j L_7407
  #inside else
  L_7409:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7420: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7421: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7419
  j L_7419
  #final label in binaryExp
  L_7419: 
  #jumpToAllOnlyIf
  L_7417:
  move $v0, $s4
  beqz $v0, L_7418
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_5_142
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7424: 
  move $v0, $s5
  sw $v0, A_3_5_41
  move $s4, $v0
  #final label in assignmentStatement
  L_7423: 
  #final label in statem expression
  L_7422: 
  j L_7416
  #inside else
  L_7418:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7429: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7430: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7428
  j L_7428
  #final label in binaryExp
  L_7428: 
  #jumpToAllOnlyIf
  L_7426:
  move $v0, $s4
  beqz $v0, L_7427
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_6_143
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7433: 
  move $v0, $s5
  sw $v0, A_3_6_42
  move $s4, $v0
  #final label in assignmentStatement
  L_7432: 
  #final label in statem expression
  L_7431: 
  j L_7425
  #inside else
  L_7427:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7438: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7439: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7437
  j L_7437
  #final label in binaryExp
  L_7437: 
  #jumpToAllOnlyIf
  L_7435:
  move $v0, $s4
  beqz $v0, L_7436
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_7_144
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7442: 
  move $v0, $s5
  sw $v0, A_3_7_43
  move $s4, $v0
  #final label in assignmentStatement
  L_7441: 
  #final label in statem expression
  L_7440: 
  j L_7434
  #inside else
  L_7436:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7447: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7448: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7446
  j L_7446
  #final label in binaryExp
  L_7446: 
  #jumpToAllOnlyIf
  L_7444:
  move $v0, $s4
  beqz $v0, L_7445
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_8_145
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7451: 
  move $v0, $s5
  sw $v0, A_3_8_44
  move $s4, $v0
  #final label in assignmentStatement
  L_7450: 
  #final label in statem expression
  L_7449: 
  j L_7443
  #inside else
  L_7445:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7455: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7456: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7454
  j L_7454
  #final label in binaryExp
  L_7454: 
  #jumpToAllOnlyIf
  L_7453:
  move $v0, $s4
  beqz $v0, L_7452
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_3_9_146
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7459: 
  move $v0, $s5
  sw $v0, A_3_9_45
  move $s4, $v0
  #final label in assignmentStatement
  L_7458: 
  #final label in statem expression
  L_7457: 
  #if finish label = 7452
  L_7452:
  #if finish label = 7443
  L_7443:
  #if finish label = 7434
  L_7434:
  #if finish label = 7425
  L_7425:
  #if finish label = 7416
  L_7416:
  #if finish label = 7407
  L_7407:
  #if finish label = 7398
  L_7398:
  #if finish label = 7389
  L_7389:
  #if finish label = 7380
  L_7380:
  #if finish label = 7371
  L_7371:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_7464: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7465: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7463
  j L_7463
  #final label in binaryExp
  L_7463: 
  #final label in codeGenAssignmentExpression
  L_7462: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7461: 
  #final label in statem expression
  L_7460: 
  #whileBodyEndJump
  L_7366:
  j  L_7364
  #while finish label = 7363
  L_7363:
  j L_7354
  #inside else
  L_7356:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7470: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7471: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7469
  j L_7469
  #final label in binaryExp
  L_7469: 
  #jumpToAllOnlyIf
  L_7467:
  move $v0, $s4
  beqz $v0, L_7468
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7474: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7473: 
  #final label in statem expression
  L_7472: 
  #starting while
  #start of while loop
  L_7476:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7480: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7481: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7479
  j L_7479
  #final label in binaryExp
  L_7479: 
  #jumpToAllOnlyIf
  L_7477:
  move $v0, $s4
  bnez $v0, L_7482
  j L_7475
  #whileBodyLabel
  L_7482:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7487: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7488: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7486
  j L_7486
  #final label in binaryExp
  L_7486: 
  #jumpToAllOnlyIf
  L_7484:
  move $v0, $s4
  beqz $v0, L_7485
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_0_147
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7491: 
  move $v0, $s5
  sw $v0, A_4_0_46
  move $s4, $v0
  #final label in assignmentStatement
  L_7490: 
  #final label in statem expression
  L_7489: 
  j L_7483
  #inside else
  L_7485:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7496: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7497: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7495
  j L_7495
  #final label in binaryExp
  L_7495: 
  #jumpToAllOnlyIf
  L_7493:
  move $v0, $s4
  beqz $v0, L_7494
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_1_148
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7500: 
  move $v0, $s5
  sw $v0, A_4_1_47
  move $s4, $v0
  #final label in assignmentStatement
  L_7499: 
  #final label in statem expression
  L_7498: 
  j L_7492
  #inside else
  L_7494:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7505: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7506: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7504
  j L_7504
  #final label in binaryExp
  L_7504: 
  #jumpToAllOnlyIf
  L_7502:
  move $v0, $s4
  beqz $v0, L_7503
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_2_149
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7509: 
  move $v0, $s5
  sw $v0, A_4_2_48
  move $s4, $v0
  #final label in assignmentStatement
  L_7508: 
  #final label in statem expression
  L_7507: 
  j L_7501
  #inside else
  L_7503:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7514: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7515: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7513
  j L_7513
  #final label in binaryExp
  L_7513: 
  #jumpToAllOnlyIf
  L_7511:
  move $v0, $s4
  beqz $v0, L_7512
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_3_150
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7518: 
  move $v0, $s5
  sw $v0, A_4_3_49
  move $s4, $v0
  #final label in assignmentStatement
  L_7517: 
  #final label in statem expression
  L_7516: 
  j L_7510
  #inside else
  L_7512:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7523: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7524: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7522
  j L_7522
  #final label in binaryExp
  L_7522: 
  #jumpToAllOnlyIf
  L_7520:
  move $v0, $s4
  beqz $v0, L_7521
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_4_151
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7527: 
  move $v0, $s5
  sw $v0, A_4_4_50
  move $s4, $v0
  #final label in assignmentStatement
  L_7526: 
  #final label in statem expression
  L_7525: 
  j L_7519
  #inside else
  L_7521:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7532: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7533: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7531
  j L_7531
  #final label in binaryExp
  L_7531: 
  #jumpToAllOnlyIf
  L_7529:
  move $v0, $s4
  beqz $v0, L_7530
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_5_152
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7536: 
  move $v0, $s5
  sw $v0, A_4_5_51
  move $s4, $v0
  #final label in assignmentStatement
  L_7535: 
  #final label in statem expression
  L_7534: 
  j L_7528
  #inside else
  L_7530:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7541: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7542: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7540
  j L_7540
  #final label in binaryExp
  L_7540: 
  #jumpToAllOnlyIf
  L_7538:
  move $v0, $s4
  beqz $v0, L_7539
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_6_153
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7545: 
  move $v0, $s5
  sw $v0, A_4_6_52
  move $s4, $v0
  #final label in assignmentStatement
  L_7544: 
  #final label in statem expression
  L_7543: 
  j L_7537
  #inside else
  L_7539:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7550: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7551: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7549
  j L_7549
  #final label in binaryExp
  L_7549: 
  #jumpToAllOnlyIf
  L_7547:
  move $v0, $s4
  beqz $v0, L_7548
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_7_154
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7554: 
  move $v0, $s5
  sw $v0, A_4_7_53
  move $s4, $v0
  #final label in assignmentStatement
  L_7553: 
  #final label in statem expression
  L_7552: 
  j L_7546
  #inside else
  L_7548:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7559: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7560: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7558
  j L_7558
  #final label in binaryExp
  L_7558: 
  #jumpToAllOnlyIf
  L_7556:
  move $v0, $s4
  beqz $v0, L_7557
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_8_155
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7563: 
  move $v0, $s5
  sw $v0, A_4_8_54
  move $s4, $v0
  #final label in assignmentStatement
  L_7562: 
  #final label in statem expression
  L_7561: 
  j L_7555
  #inside else
  L_7557:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7567: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7568: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7566
  j L_7566
  #final label in binaryExp
  L_7566: 
  #jumpToAllOnlyIf
  L_7565:
  move $v0, $s4
  beqz $v0, L_7564
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_4_9_156
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7571: 
  move $v0, $s5
  sw $v0, A_4_9_55
  move $s4, $v0
  #final label in assignmentStatement
  L_7570: 
  #final label in statem expression
  L_7569: 
  #if finish label = 7564
  L_7564:
  #if finish label = 7555
  L_7555:
  #if finish label = 7546
  L_7546:
  #if finish label = 7537
  L_7537:
  #if finish label = 7528
  L_7528:
  #if finish label = 7519
  L_7519:
  #if finish label = 7510
  L_7510:
  #if finish label = 7501
  L_7501:
  #if finish label = 7492
  L_7492:
  #if finish label = 7483
  L_7483:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_7576: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7577: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7575
  j L_7575
  #final label in binaryExp
  L_7575: 
  #final label in codeGenAssignmentExpression
  L_7574: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7573: 
  #final label in statem expression
  L_7572: 
  #whileBodyEndJump
  L_7478:
  j  L_7476
  #while finish label = 7475
  L_7475:
  j L_7466
  #inside else
  L_7468:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7582: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7583: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7581
  j L_7581
  #final label in binaryExp
  L_7581: 
  #jumpToAllOnlyIf
  L_7579:
  move $v0, $s4
  beqz $v0, L_7580
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7586: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7585: 
  #final label in statem expression
  L_7584: 
  #starting while
  #start of while loop
  L_7588:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7592: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7593: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7591
  j L_7591
  #final label in binaryExp
  L_7591: 
  #jumpToAllOnlyIf
  L_7589:
  move $v0, $s4
  bnez $v0, L_7594
  j L_7587
  #whileBodyLabel
  L_7594:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7599: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7600: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7598
  j L_7598
  #final label in binaryExp
  L_7598: 
  #jumpToAllOnlyIf
  L_7596:
  move $v0, $s4
  beqz $v0, L_7597
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_0_157
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7603: 
  move $v0, $s5
  sw $v0, A_5_0_56
  move $s4, $v0
  #final label in assignmentStatement
  L_7602: 
  #final label in statem expression
  L_7601: 
  j L_7595
  #inside else
  L_7597:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7608: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7609: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7607
  j L_7607
  #final label in binaryExp
  L_7607: 
  #jumpToAllOnlyIf
  L_7605:
  move $v0, $s4
  beqz $v0, L_7606
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_1_158
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7612: 
  move $v0, $s5
  sw $v0, A_5_1_57
  move $s4, $v0
  #final label in assignmentStatement
  L_7611: 
  #final label in statem expression
  L_7610: 
  j L_7604
  #inside else
  L_7606:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7617: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7618: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7616
  j L_7616
  #final label in binaryExp
  L_7616: 
  #jumpToAllOnlyIf
  L_7614:
  move $v0, $s4
  beqz $v0, L_7615
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_2_159
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7621: 
  move $v0, $s5
  sw $v0, A_5_2_58
  move $s4, $v0
  #final label in assignmentStatement
  L_7620: 
  #final label in statem expression
  L_7619: 
  j L_7613
  #inside else
  L_7615:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7626: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7627: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7625
  j L_7625
  #final label in binaryExp
  L_7625: 
  #jumpToAllOnlyIf
  L_7623:
  move $v0, $s4
  beqz $v0, L_7624
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_3_160
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7630: 
  move $v0, $s5
  sw $v0, A_5_3_59
  move $s4, $v0
  #final label in assignmentStatement
  L_7629: 
  #final label in statem expression
  L_7628: 
  j L_7622
  #inside else
  L_7624:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7635: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7636: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7634
  j L_7634
  #final label in binaryExp
  L_7634: 
  #jumpToAllOnlyIf
  L_7632:
  move $v0, $s4
  beqz $v0, L_7633
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_4_161
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7639: 
  move $v0, $s5
  sw $v0, A_5_4_60
  move $s4, $v0
  #final label in assignmentStatement
  L_7638: 
  #final label in statem expression
  L_7637: 
  j L_7631
  #inside else
  L_7633:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7644: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7645: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7643
  j L_7643
  #final label in binaryExp
  L_7643: 
  #jumpToAllOnlyIf
  L_7641:
  move $v0, $s4
  beqz $v0, L_7642
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_5_162
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7648: 
  move $v0, $s5
  sw $v0, A_5_5_61
  move $s4, $v0
  #final label in assignmentStatement
  L_7647: 
  #final label in statem expression
  L_7646: 
  j L_7640
  #inside else
  L_7642:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7653: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7654: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7652
  j L_7652
  #final label in binaryExp
  L_7652: 
  #jumpToAllOnlyIf
  L_7650:
  move $v0, $s4
  beqz $v0, L_7651
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_6_163
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7657: 
  move $v0, $s5
  sw $v0, A_5_6_62
  move $s4, $v0
  #final label in assignmentStatement
  L_7656: 
  #final label in statem expression
  L_7655: 
  j L_7649
  #inside else
  L_7651:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7662: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7663: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7661
  j L_7661
  #final label in binaryExp
  L_7661: 
  #jumpToAllOnlyIf
  L_7659:
  move $v0, $s4
  beqz $v0, L_7660
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_7_164
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7666: 
  move $v0, $s5
  sw $v0, A_5_7_63
  move $s4, $v0
  #final label in assignmentStatement
  L_7665: 
  #final label in statem expression
  L_7664: 
  j L_7658
  #inside else
  L_7660:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7671: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7672: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7670
  j L_7670
  #final label in binaryExp
  L_7670: 
  #jumpToAllOnlyIf
  L_7668:
  move $v0, $s4
  beqz $v0, L_7669
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_8_165
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7675: 
  move $v0, $s5
  sw $v0, A_5_8_64
  move $s4, $v0
  #final label in assignmentStatement
  L_7674: 
  #final label in statem expression
  L_7673: 
  j L_7667
  #inside else
  L_7669:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7679: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7680: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7678
  j L_7678
  #final label in binaryExp
  L_7678: 
  #jumpToAllOnlyIf
  L_7677:
  move $v0, $s4
  beqz $v0, L_7676
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_5_9_166
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7683: 
  move $v0, $s5
  sw $v0, A_5_9_65
  move $s4, $v0
  #final label in assignmentStatement
  L_7682: 
  #final label in statem expression
  L_7681: 
  #if finish label = 7676
  L_7676:
  #if finish label = 7667
  L_7667:
  #if finish label = 7658
  L_7658:
  #if finish label = 7649
  L_7649:
  #if finish label = 7640
  L_7640:
  #if finish label = 7631
  L_7631:
  #if finish label = 7622
  L_7622:
  #if finish label = 7613
  L_7613:
  #if finish label = 7604
  L_7604:
  #if finish label = 7595
  L_7595:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_7688: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7689: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7687
  j L_7687
  #final label in binaryExp
  L_7687: 
  #final label in codeGenAssignmentExpression
  L_7686: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7685: 
  #final label in statem expression
  L_7684: 
  #whileBodyEndJump
  L_7590:
  j  L_7588
  #while finish label = 7587
  L_7587:
  j L_7578
  #inside else
  L_7580:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7694: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7695: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7693
  j L_7693
  #final label in binaryExp
  L_7693: 
  #jumpToAllOnlyIf
  L_7691:
  move $v0, $s4
  beqz $v0, L_7692
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7698: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7697: 
  #final label in statem expression
  L_7696: 
  #starting while
  #start of while loop
  L_7700:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7704: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7705: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7703
  j L_7703
  #final label in binaryExp
  L_7703: 
  #jumpToAllOnlyIf
  L_7701:
  move $v0, $s4
  bnez $v0, L_7706
  j L_7699
  #whileBodyLabel
  L_7706:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7711: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7712: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7710
  j L_7710
  #final label in binaryExp
  L_7710: 
  #jumpToAllOnlyIf
  L_7708:
  move $v0, $s4
  beqz $v0, L_7709
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_0_167
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7715: 
  move $v0, $s5
  sw $v0, A_6_0_66
  move $s4, $v0
  #final label in assignmentStatement
  L_7714: 
  #final label in statem expression
  L_7713: 
  j L_7707
  #inside else
  L_7709:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7720: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7721: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7719
  j L_7719
  #final label in binaryExp
  L_7719: 
  #jumpToAllOnlyIf
  L_7717:
  move $v0, $s4
  beqz $v0, L_7718
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_1_168
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7724: 
  move $v0, $s5
  sw $v0, A_6_1_67
  move $s4, $v0
  #final label in assignmentStatement
  L_7723: 
  #final label in statem expression
  L_7722: 
  j L_7716
  #inside else
  L_7718:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7729: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7730: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7728
  j L_7728
  #final label in binaryExp
  L_7728: 
  #jumpToAllOnlyIf
  L_7726:
  move $v0, $s4
  beqz $v0, L_7727
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_2_169
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7733: 
  move $v0, $s5
  sw $v0, A_6_2_68
  move $s4, $v0
  #final label in assignmentStatement
  L_7732: 
  #final label in statem expression
  L_7731: 
  j L_7725
  #inside else
  L_7727:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7738: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7739: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7737
  j L_7737
  #final label in binaryExp
  L_7737: 
  #jumpToAllOnlyIf
  L_7735:
  move $v0, $s4
  beqz $v0, L_7736
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_3_170
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7742: 
  move $v0, $s5
  sw $v0, A_6_3_69
  move $s4, $v0
  #final label in assignmentStatement
  L_7741: 
  #final label in statem expression
  L_7740: 
  j L_7734
  #inside else
  L_7736:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7747: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7748: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7746
  j L_7746
  #final label in binaryExp
  L_7746: 
  #jumpToAllOnlyIf
  L_7744:
  move $v0, $s4
  beqz $v0, L_7745
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_4_171
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7751: 
  move $v0, $s5
  sw $v0, A_6_4_70
  move $s4, $v0
  #final label in assignmentStatement
  L_7750: 
  #final label in statem expression
  L_7749: 
  j L_7743
  #inside else
  L_7745:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7756: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7757: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7755
  j L_7755
  #final label in binaryExp
  L_7755: 
  #jumpToAllOnlyIf
  L_7753:
  move $v0, $s4
  beqz $v0, L_7754
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_5_172
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7760: 
  move $v0, $s5
  sw $v0, A_6_5_71
  move $s4, $v0
  #final label in assignmentStatement
  L_7759: 
  #final label in statem expression
  L_7758: 
  j L_7752
  #inside else
  L_7754:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7765: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7766: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7764
  j L_7764
  #final label in binaryExp
  L_7764: 
  #jumpToAllOnlyIf
  L_7762:
  move $v0, $s4
  beqz $v0, L_7763
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_6_173
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7769: 
  move $v0, $s5
  sw $v0, A_6_6_72
  move $s4, $v0
  #final label in assignmentStatement
  L_7768: 
  #final label in statem expression
  L_7767: 
  j L_7761
  #inside else
  L_7763:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7774: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7775: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7773
  j L_7773
  #final label in binaryExp
  L_7773: 
  #jumpToAllOnlyIf
  L_7771:
  move $v0, $s4
  beqz $v0, L_7772
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_7_174
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7778: 
  move $v0, $s5
  sw $v0, A_6_7_73
  move $s4, $v0
  #final label in assignmentStatement
  L_7777: 
  #final label in statem expression
  L_7776: 
  j L_7770
  #inside else
  L_7772:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7783: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7784: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7782
  j L_7782
  #final label in binaryExp
  L_7782: 
  #jumpToAllOnlyIf
  L_7780:
  move $v0, $s4
  beqz $v0, L_7781
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_8_175
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7787: 
  move $v0, $s5
  sw $v0, A_6_8_74
  move $s4, $v0
  #final label in assignmentStatement
  L_7786: 
  #final label in statem expression
  L_7785: 
  j L_7779
  #inside else
  L_7781:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7791: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7792: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7790
  j L_7790
  #final label in binaryExp
  L_7790: 
  #jumpToAllOnlyIf
  L_7789:
  move $v0, $s4
  beqz $v0, L_7788
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_6_9_176
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7795: 
  move $v0, $s5
  sw $v0, A_6_9_75
  move $s4, $v0
  #final label in assignmentStatement
  L_7794: 
  #final label in statem expression
  L_7793: 
  #if finish label = 7788
  L_7788:
  #if finish label = 7779
  L_7779:
  #if finish label = 7770
  L_7770:
  #if finish label = 7761
  L_7761:
  #if finish label = 7752
  L_7752:
  #if finish label = 7743
  L_7743:
  #if finish label = 7734
  L_7734:
  #if finish label = 7725
  L_7725:
  #if finish label = 7716
  L_7716:
  #if finish label = 7707
  L_7707:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_7800: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7801: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7799
  j L_7799
  #final label in binaryExp
  L_7799: 
  #final label in codeGenAssignmentExpression
  L_7798: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7797: 
  #final label in statem expression
  L_7796: 
  #whileBodyEndJump
  L_7702:
  j  L_7700
  #while finish label = 7699
  L_7699:
  j L_7690
  #inside else
  L_7692:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7806: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7807: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7805
  j L_7805
  #final label in binaryExp
  L_7805: 
  #jumpToAllOnlyIf
  L_7803:
  move $v0, $s4
  beqz $v0, L_7804
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7810: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7809: 
  #final label in statem expression
  L_7808: 
  #starting while
  #start of while loop
  L_7812:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7816: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7817: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7815
  j L_7815
  #final label in binaryExp
  L_7815: 
  #jumpToAllOnlyIf
  L_7813:
  move $v0, $s4
  bnez $v0, L_7818
  j L_7811
  #whileBodyLabel
  L_7818:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7823: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7824: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7822
  j L_7822
  #final label in binaryExp
  L_7822: 
  #jumpToAllOnlyIf
  L_7820:
  move $v0, $s4
  beqz $v0, L_7821
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_0_177
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7827: 
  move $v0, $s5
  sw $v0, A_7_0_76
  move $s4, $v0
  #final label in assignmentStatement
  L_7826: 
  #final label in statem expression
  L_7825: 
  j L_7819
  #inside else
  L_7821:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7832: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7833: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7831
  j L_7831
  #final label in binaryExp
  L_7831: 
  #jumpToAllOnlyIf
  L_7829:
  move $v0, $s4
  beqz $v0, L_7830
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_1_178
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7836: 
  move $v0, $s5
  sw $v0, A_7_1_77
  move $s4, $v0
  #final label in assignmentStatement
  L_7835: 
  #final label in statem expression
  L_7834: 
  j L_7828
  #inside else
  L_7830:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7841: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7842: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7840
  j L_7840
  #final label in binaryExp
  L_7840: 
  #jumpToAllOnlyIf
  L_7838:
  move $v0, $s4
  beqz $v0, L_7839
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_2_179
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7845: 
  move $v0, $s5
  sw $v0, A_7_2_78
  move $s4, $v0
  #final label in assignmentStatement
  L_7844: 
  #final label in statem expression
  L_7843: 
  j L_7837
  #inside else
  L_7839:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7850: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7851: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7849
  j L_7849
  #final label in binaryExp
  L_7849: 
  #jumpToAllOnlyIf
  L_7847:
  move $v0, $s4
  beqz $v0, L_7848
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_3_180
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7854: 
  move $v0, $s5
  sw $v0, A_7_3_79
  move $s4, $v0
  #final label in assignmentStatement
  L_7853: 
  #final label in statem expression
  L_7852: 
  j L_7846
  #inside else
  L_7848:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7859: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7860: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7858
  j L_7858
  #final label in binaryExp
  L_7858: 
  #jumpToAllOnlyIf
  L_7856:
  move $v0, $s4
  beqz $v0, L_7857
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_4_181
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7863: 
  move $v0, $s5
  sw $v0, A_7_4_80
  move $s4, $v0
  #final label in assignmentStatement
  L_7862: 
  #final label in statem expression
  L_7861: 
  j L_7855
  #inside else
  L_7857:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7868: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7869: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7867
  j L_7867
  #final label in binaryExp
  L_7867: 
  #jumpToAllOnlyIf
  L_7865:
  move $v0, $s4
  beqz $v0, L_7866
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_5_182
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7872: 
  move $v0, $s5
  sw $v0, A_7_5_81
  move $s4, $v0
  #final label in assignmentStatement
  L_7871: 
  #final label in statem expression
  L_7870: 
  j L_7864
  #inside else
  L_7866:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7877: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7878: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7876
  j L_7876
  #final label in binaryExp
  L_7876: 
  #jumpToAllOnlyIf
  L_7874:
  move $v0, $s4
  beqz $v0, L_7875
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_6_183
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7881: 
  move $v0, $s5
  sw $v0, A_7_6_82
  move $s4, $v0
  #final label in assignmentStatement
  L_7880: 
  #final label in statem expression
  L_7879: 
  j L_7873
  #inside else
  L_7875:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7886: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7887: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7885
  j L_7885
  #final label in binaryExp
  L_7885: 
  #jumpToAllOnlyIf
  L_7883:
  move $v0, $s4
  beqz $v0, L_7884
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_7_184
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7890: 
  move $v0, $s5
  sw $v0, A_7_7_83
  move $s4, $v0
  #final label in assignmentStatement
  L_7889: 
  #final label in statem expression
  L_7888: 
  j L_7882
  #inside else
  L_7884:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7895: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7896: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7894
  j L_7894
  #final label in binaryExp
  L_7894: 
  #jumpToAllOnlyIf
  L_7892:
  move $v0, $s4
  beqz $v0, L_7893
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_8_185
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7899: 
  move $v0, $s5
  sw $v0, A_7_8_84
  move $s4, $v0
  #final label in assignmentStatement
  L_7898: 
  #final label in statem expression
  L_7897: 
  j L_7891
  #inside else
  L_7893:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7903: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7904: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7902
  j L_7902
  #final label in binaryExp
  L_7902: 
  #jumpToAllOnlyIf
  L_7901:
  move $v0, $s4
  beqz $v0, L_7900
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_7_9_186
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7907: 
  move $v0, $s5
  sw $v0, A_7_9_85
  move $s4, $v0
  #final label in assignmentStatement
  L_7906: 
  #final label in statem expression
  L_7905: 
  #if finish label = 7900
  L_7900:
  #if finish label = 7891
  L_7891:
  #if finish label = 7882
  L_7882:
  #if finish label = 7873
  L_7873:
  #if finish label = 7864
  L_7864:
  #if finish label = 7855
  L_7855:
  #if finish label = 7846
  L_7846:
  #if finish label = 7837
  L_7837:
  #if finish label = 7828
  L_7828:
  #if finish label = 7819
  L_7819:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_7912: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_7913: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_7911
  j L_7911
  #final label in binaryExp
  L_7911: 
  #final label in codeGenAssignmentExpression
  L_7910: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7909: 
  #final label in statem expression
  L_7908: 
  #whileBodyEndJump
  L_7814:
  j  L_7812
  #while finish label = 7811
  L_7811:
  j L_7802
  #inside else
  L_7804:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_7918: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_7919: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7917
  j L_7917
  #final label in binaryExp
  L_7917: 
  #jumpToAllOnlyIf
  L_7915:
  move $v0, $s4
  beqz $v0, L_7916
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7922: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_7921: 
  #final label in statem expression
  L_7920: 
  #starting while
  #start of while loop
  L_7924:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7928: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_7929: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7927
  j L_7927
  #final label in binaryExp
  L_7927: 
  #jumpToAllOnlyIf
  L_7925:
  move $v0, $s4
  bnez $v0, L_7930
  j L_7923
  #whileBodyLabel
  L_7930:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7935: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_7936: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7934
  j L_7934
  #final label in binaryExp
  L_7934: 
  #jumpToAllOnlyIf
  L_7932:
  move $v0, $s4
  beqz $v0, L_7933
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_0_187
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7939: 
  move $v0, $s5
  sw $v0, A_8_0_86
  move $s4, $v0
  #final label in assignmentStatement
  L_7938: 
  #final label in statem expression
  L_7937: 
  j L_7931
  #inside else
  L_7933:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7944: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_7945: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7943
  j L_7943
  #final label in binaryExp
  L_7943: 
  #jumpToAllOnlyIf
  L_7941:
  move $v0, $s4
  beqz $v0, L_7942
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_1_188
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7948: 
  move $v0, $s5
  sw $v0, A_8_1_87
  move $s4, $v0
  #final label in assignmentStatement
  L_7947: 
  #final label in statem expression
  L_7946: 
  j L_7940
  #inside else
  L_7942:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7953: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_7954: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7952
  j L_7952
  #final label in binaryExp
  L_7952: 
  #jumpToAllOnlyIf
  L_7950:
  move $v0, $s4
  beqz $v0, L_7951
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_2_189
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7957: 
  move $v0, $s5
  sw $v0, A_8_2_88
  move $s4, $v0
  #final label in assignmentStatement
  L_7956: 
  #final label in statem expression
  L_7955: 
  j L_7949
  #inside else
  L_7951:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7962: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_7963: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7961
  j L_7961
  #final label in binaryExp
  L_7961: 
  #jumpToAllOnlyIf
  L_7959:
  move $v0, $s4
  beqz $v0, L_7960
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_3_190
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7966: 
  move $v0, $s5
  sw $v0, A_8_3_89
  move $s4, $v0
  #final label in assignmentStatement
  L_7965: 
  #final label in statem expression
  L_7964: 
  j L_7958
  #inside else
  L_7960:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7971: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_7972: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7970
  j L_7970
  #final label in binaryExp
  L_7970: 
  #jumpToAllOnlyIf
  L_7968:
  move $v0, $s4
  beqz $v0, L_7969
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_4_191
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7975: 
  move $v0, $s5
  sw $v0, A_8_4_90
  move $s4, $v0
  #final label in assignmentStatement
  L_7974: 
  #final label in statem expression
  L_7973: 
  j L_7967
  #inside else
  L_7969:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7980: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_7981: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7979
  j L_7979
  #final label in binaryExp
  L_7979: 
  #jumpToAllOnlyIf
  L_7977:
  move $v0, $s4
  beqz $v0, L_7978
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_5_192
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7984: 
  move $v0, $s5
  sw $v0, A_8_5_91
  move $s4, $v0
  #final label in assignmentStatement
  L_7983: 
  #final label in statem expression
  L_7982: 
  j L_7976
  #inside else
  L_7978:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7989: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_7990: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7988
  j L_7988
  #final label in binaryExp
  L_7988: 
  #jumpToAllOnlyIf
  L_7986:
  move $v0, $s4
  beqz $v0, L_7987
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_6_193
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_7993: 
  move $v0, $s5
  sw $v0, A_8_6_92
  move $s4, $v0
  #final label in assignmentStatement
  L_7992: 
  #final label in statem expression
  L_7991: 
  j L_7985
  #inside else
  L_7987:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_7998: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_7999: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_7997
  j L_7997
  #final label in binaryExp
  L_7997: 
  #jumpToAllOnlyIf
  L_7995:
  move $v0, $s4
  beqz $v0, L_7996
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_7_194
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8002: 
  move $v0, $s5
  sw $v0, A_8_7_93
  move $s4, $v0
  #final label in assignmentStatement
  L_8001: 
  #final label in statem expression
  L_8000: 
  j L_7994
  #inside else
  L_7996:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8007: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_8008: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8006
  j L_8006
  #final label in binaryExp
  L_8006: 
  #jumpToAllOnlyIf
  L_8004:
  move $v0, $s4
  beqz $v0, L_8005
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_8_195
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8011: 
  move $v0, $s5
  sw $v0, A_8_8_94
  move $s4, $v0
  #final label in assignmentStatement
  L_8010: 
  #final label in statem expression
  L_8009: 
  j L_8003
  #inside else
  L_8005:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8015: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_8016: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8014
  j L_8014
  #final label in binaryExp
  L_8014: 
  #jumpToAllOnlyIf
  L_8013:
  move $v0, $s4
  beqz $v0, L_8012
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_8_9_196
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8019: 
  move $v0, $s5
  sw $v0, A_8_9_95
  move $s4, $v0
  #final label in assignmentStatement
  L_8018: 
  #final label in statem expression
  L_8017: 
  #if finish label = 8012
  L_8012:
  #if finish label = 8003
  L_8003:
  #if finish label = 7994
  L_7994:
  #if finish label = 7985
  L_7985:
  #if finish label = 7976
  L_7976:
  #if finish label = 7967
  L_7967:
  #if finish label = 7958
  L_7958:
  #if finish label = 7949
  L_7949:
  #if finish label = 7940
  L_7940:
  #if finish label = 7931
  L_7931:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_8024: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_8025: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_8023
  j L_8023
  #final label in binaryExp
  L_8023: 
  #final label in codeGenAssignmentExpression
  L_8022: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_8021: 
  #final label in statem expression
  L_8020: 
  #whileBodyEndJump
  L_7926:
  j  L_7924
  #while finish label = 7923
  L_7923:
  j L_7914
  #inside else
  L_7916:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s0
  move $s5, $v0
  L_8029: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_8030: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8028
  j L_8028
  #final label in binaryExp
  L_8028: 
  #jumpToAllOnlyIf
  L_8027:
  move $v0, $s4
  beqz $v0, L_8026
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing literal to v0
  #reg name $s5
  li $v0, 0
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8033: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_8032: 
  #final label in statem expression
  L_8031: 
  #starting while
  #start of while loop
  L_8035:
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8039: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_8040: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  sle $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8038
  j L_8038
  #final label in binaryExp
  L_8038: 
  #jumpToAllOnlyIf
  L_8036:
  move $v0, $s4
  bnez $v0, L_8041
  j L_8034
  #whileBodyLabel
  L_8041:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8046: 
  #storing literal to v0
  #reg name $s6
  li $v0, 0
  move $s6, $v0
  L_8047: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8045
  j L_8045
  #final label in binaryExp
  L_8045: 
  #jumpToAllOnlyIf
  L_8043:
  move $v0, $s4
  beqz $v0, L_8044
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_0_197
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8050: 
  move $v0, $s5
  sw $v0, A_9_0_96
  move $s4, $v0
  #final label in assignmentStatement
  L_8049: 
  #final label in statem expression
  L_8048: 
  j L_8042
  #inside else
  L_8044:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8055: 
  #storing literal to v0
  #reg name $s6
  li $v0, 1
  move $s6, $v0
  L_8056: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8054
  j L_8054
  #final label in binaryExp
  L_8054: 
  #jumpToAllOnlyIf
  L_8052:
  move $v0, $s4
  beqz $v0, L_8053
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_1_198
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8059: 
  move $v0, $s5
  sw $v0, A_9_1_97
  move $s4, $v0
  #final label in assignmentStatement
  L_8058: 
  #final label in statem expression
  L_8057: 
  j L_8051
  #inside else
  L_8053:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8064: 
  #storing literal to v0
  #reg name $s6
  li $v0, 2
  move $s6, $v0
  L_8065: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8063
  j L_8063
  #final label in binaryExp
  L_8063: 
  #jumpToAllOnlyIf
  L_8061:
  move $v0, $s4
  beqz $v0, L_8062
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_2_199
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8068: 
  move $v0, $s5
  sw $v0, A_9_2_98
  move $s4, $v0
  #final label in assignmentStatement
  L_8067: 
  #final label in statem expression
  L_8066: 
  j L_8060
  #inside else
  L_8062:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8073: 
  #storing literal to v0
  #reg name $s6
  li $v0, 3
  move $s6, $v0
  L_8074: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8072
  j L_8072
  #final label in binaryExp
  L_8072: 
  #jumpToAllOnlyIf
  L_8070:
  move $v0, $s4
  beqz $v0, L_8071
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_3_200
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8077: 
  move $v0, $s5
  sw $v0, A_9_3_99
  move $s4, $v0
  #final label in assignmentStatement
  L_8076: 
  #final label in statem expression
  L_8075: 
  j L_8069
  #inside else
  L_8071:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8082: 
  #storing literal to v0
  #reg name $s6
  li $v0, 4
  move $s6, $v0
  L_8083: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8081
  j L_8081
  #final label in binaryExp
  L_8081: 
  #jumpToAllOnlyIf
  L_8079:
  move $v0, $s4
  beqz $v0, L_8080
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_4_201
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8086: 
  move $v0, $s5
  sw $v0, A_9_4_100
  move $s4, $v0
  #final label in assignmentStatement
  L_8085: 
  #final label in statem expression
  L_8084: 
  j L_8078
  #inside else
  L_8080:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8091: 
  #storing literal to v0
  #reg name $s6
  li $v0, 5
  move $s6, $v0
  L_8092: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8090
  j L_8090
  #final label in binaryExp
  L_8090: 
  #jumpToAllOnlyIf
  L_8088:
  move $v0, $s4
  beqz $v0, L_8089
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_5_202
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8095: 
  move $v0, $s5
  sw $v0, A_9_5_101
  move $s4, $v0
  #final label in assignmentStatement
  L_8094: 
  #final label in statem expression
  L_8093: 
  j L_8087
  #inside else
  L_8089:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8100: 
  #storing literal to v0
  #reg name $s6
  li $v0, 6
  move $s6, $v0
  L_8101: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8099
  j L_8099
  #final label in binaryExp
  L_8099: 
  #jumpToAllOnlyIf
  L_8097:
  move $v0, $s4
  beqz $v0, L_8098
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_6_203
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8104: 
  move $v0, $s5
  sw $v0, A_9_6_102
  move $s4, $v0
  #final label in assignmentStatement
  L_8103: 
  #final label in statem expression
  L_8102: 
  j L_8096
  #inside else
  L_8098:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8109: 
  #storing literal to v0
  #reg name $s6
  li $v0, 7
  move $s6, $v0
  L_8110: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8108
  j L_8108
  #final label in binaryExp
  L_8108: 
  #jumpToAllOnlyIf
  L_8106:
  move $v0, $s4
  beqz $v0, L_8107
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_7_204
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8113: 
  move $v0, $s5
  sw $v0, A_9_7_103
  move $s4, $v0
  #final label in assignmentStatement
  L_8112: 
  #final label in statem expression
  L_8111: 
  j L_8105
  #inside else
  L_8107:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8118: 
  #storing literal to v0
  #reg name $s6
  li $v0, 8
  move $s6, $v0
  L_8119: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8117
  j L_8117
  #final label in binaryExp
  L_8117: 
  #jumpToAllOnlyIf
  L_8115:
  move $v0, $s4
  beqz $v0, L_8116
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_8_205
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8122: 
  move $v0, $s5
  sw $v0, A_9_8_104
  move $s4, $v0
  #final label in assignmentStatement
  L_8121: 
  #final label in statem expression
  L_8120: 
  j L_8114
  #inside else
  L_8116:
  #starting if
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  move $v0, $s1
  move $s5, $v0
  L_8126: 
  #storing literal to v0
  #reg name $s6
  li $v0, 9
  move $s6, $v0
  L_8127: 
  #setting left reg return val to $v0
  move $v0, $s5
  #setting right reg return val to $v1
  move $v1, $s6
  seq $v0, $v0, $v1
  move $s4, $v0
  bnez $v0, L_8125
  j L_8125
  #final label in binaryExp
  L_8125: 
  #jumpToAllOnlyIf
  L_8124:
  move $v0, $s4
  beqz $v0, L_8123
  #inside codeGenAssignmentExpression
  #reg name $s4
  #storing identifier to v0
  #reg name $s5
  lw $v0, T_9_9_206
  move $s5, $v0
  #final label in codeGenAssignmentExpression
  L_8130: 
  move $v0, $s5
  sw $v0, A_9_9_105
  move $s4, $v0
  #final label in assignmentStatement
  L_8129: 
  #final label in statem expression
  L_8128: 
  #if finish label = 8123
  L_8123:
  #if finish label = 8114
  L_8114:
  #if finish label = 8105
  L_8105:
  #if finish label = 8096
  L_8096:
  #if finish label = 8087
  L_8087:
  #if finish label = 8078
  L_8078:
  #if finish label = 8069
  L_8069:
  #if finish label = 8060
  L_8060:
  #if finish label = 8051
  L_8051:
  #if finish label = 8042
  L_8042:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s1
  move $s6, $v0
  L_8135: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_8136: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_8134
  j L_8134
  #final label in binaryExp
  L_8134: 
  #final label in codeGenAssignmentExpression
  L_8133: 
  move $v0, $s5
  move $s1, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_8132: 
  #final label in statem expression
  L_8131: 
  #whileBodyEndJump
  L_8037:
  j  L_8035
  #while finish label = 8034
  L_8034:
  #if finish label = 8026
  L_8026:
  #if finish label = 7914
  L_7914:
  #if finish label = 7802
  L_7802:
  #if finish label = 7690
  L_7690:
  #if finish label = 7578
  L_7578:
  #if finish label = 7466
  L_7466:
  #if finish label = 7354
  L_7354:
  #if finish label = 7242
  L_7242:
  #if finish label = 7130
  L_7130:
  #if finish label = 7018
  L_7018:
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s0
  move $s6, $v0
  L_8141: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_8142: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_8140
  j L_8140
  #final label in binaryExp
  L_8140: 
  #final label in codeGenAssignmentExpression
  L_8139: 
  move $v0, $s5
  move $s0, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_8138: 
  #final label in statem expression
  L_8137: 
  #whileBodyEndJump
  L_7013:
  j  L_7011
  #while finish label = 7010
  L_7010:
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s4
  move $v0, $s2
  move $s4, $v0
#regData in funcInv #0 = $s4
  #final label of #0 in funcInvEvalArgs
  L_8145: 
  move $v0, $s4
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printboard_209
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s4
  move $s4, $v0
  #final label in funcInvStatement
  L_8144: 
  #final label in statem expression
  L_8143: 
  #inside codeGenAssignmentExpression
  #reg name $s4
  #reg name $s5
  #storing identifier to v0
  #reg name $s6
  move $v0, $s2
  move $s6, $v0
  L_8150: 
  #storing literal to v0
  #reg name $s7
  li $v0, 1
  move $s7, $v0
  L_8151: 
  #setting left reg return val to $v0
  move $v0, $s6
  #setting right reg return val to $v1
  move $v1, $s7
  addu $v0, $v0, $v1
  move $s5, $v0
  bnez $v0, L_8149
  j L_8149
  #final label in binaryExp
  L_8149: 
  #final label in codeGenAssignmentExpression
  L_8148: 
  move $v0, $s5
  move $s2, $v0
  move $s4, $v0
  #final label in assignmentStatement
  L_8147: 
  #final label in statem expression
  L_8146: 
  #whileBodyEndJump
  L_1966:
  j  L_1964
  #while finish label = 1963
  L_1963:
EPILOG_220: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
.text
  #START PROLOG
neighbours_208: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  #variable n is declared to be
  #reg name $s0
  #inside codeGenAssignmentExpression
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  #final label in codeGenAssignmentExpression
  L_8155: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8154: 
  #final label in statem expression
  L_8153: 
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_8160: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8161: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8159
  j L_8159
  #final label in binaryExp
  L_8159: 
  #jumpToAllOnlyIf
  L_8157:
  move $v0, $s1
  beqz $v0, L_8158
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8166: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8167: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8165
  j L_8165
  #final label in binaryExp
  L_8165: 
  #jumpToAllOnlyIf
  L_8163:
  move $v0, $s1
  beqz $v0, L_8164
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8171: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8172: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8170
  j L_8170
  #final label in binaryExp
  L_8170: 
  #jumpToAllOnlyIf
  L_8169:
  move $v0, $s1
  beqz $v0, L_8168
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8176: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8177: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8175
  j L_8175
  #final label in binaryExp
  L_8175: 
  #jumpToAllOnlyIf
  L_8174:
  move $v0, $s1
  beqz $v0, L_8173
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8182: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8183: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8181
  j L_8181
  #final label in binaryExp
  L_8181: 
  #final label in codeGenAssignmentExpression
  L_8180: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8179: 
  #final label in statem expression
  L_8178: 
  #if finish label = 8173
  L_8173:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8188: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8189: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8187
  j L_8187
  #final label in binaryExp
  L_8187: 
  #final label in codeGenAssignmentExpression
  L_8186: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8185: 
  #final label in statem expression
  L_8184: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8193: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8194: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8192
  j L_8192
  #final label in binaryExp
  L_8192: 
  #jumpToAllOnlyIf
  L_8191:
  move $v0, $s1
  beqz $v0, L_8190
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8199: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8200: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8198
  j L_8198
  #final label in binaryExp
  L_8198: 
  #final label in codeGenAssignmentExpression
  L_8197: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8196: 
  #final label in statem expression
  L_8195: 
  #if finish label = 8190
  L_8190:
  #if finish label = 8168
  L_8168:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8204: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8205: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8203
  j L_8203
  #final label in binaryExp
  L_8203: 
  #jumpToAllOnlyIf
  L_8202:
  move $v0, $s1
  beqz $v0, L_8201
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8210: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8211: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8209
  j L_8209
  #final label in binaryExp
  L_8209: 
  #final label in codeGenAssignmentExpression
  L_8208: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8207: 
  #final label in statem expression
  L_8206: 
  #if finish label = 8201
  L_8201:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8215: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8216: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8214
  j L_8214
  #final label in binaryExp
  L_8214: 
  #jumpToAllOnlyIf
  L_8213:
  move $v0, $s1
  beqz $v0, L_8212
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8221: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_1_7
  move $s4, $v0
  L_8222: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8220
  j L_8220
  #final label in binaryExp
  L_8220: 
  #final label in codeGenAssignmentExpression
  L_8219: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8218: 
  #final label in statem expression
  L_8217: 
  #if finish label = 8212
  L_8212:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8226: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8227: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8225
  j L_8225
  #final label in binaryExp
  L_8225: 
  #jumpToAllOnlyIf
  L_8224:
  move $v0, $s1
  beqz $v0, L_8223
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8231: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8232: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8230
  j L_8230
  #final label in binaryExp
  L_8230: 
  #jumpToAllOnlyIf
  L_8229:
  move $v0, $s1
  beqz $v0, L_8228
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8237: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8238: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8236
  j L_8236
  #final label in binaryExp
  L_8236: 
  #final label in codeGenAssignmentExpression
  L_8235: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8234: 
  #final label in statem expression
  L_8233: 
  #if finish label = 8228
  L_8228:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8243: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_0_16
  move $s4, $v0
  L_8244: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8242
  j L_8242
  #final label in binaryExp
  L_8242: 
  #final label in codeGenAssignmentExpression
  L_8241: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8240: 
  #final label in statem expression
  L_8239: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8248: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8249: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8247
  j L_8247
  #final label in binaryExp
  L_8247: 
  #jumpToAllOnlyIf
  L_8246:
  move $v0, $s1
  beqz $v0, L_8245
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8254: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_1_17
  move $s4, $v0
  L_8255: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8253
  j L_8253
  #final label in binaryExp
  L_8253: 
  #final label in codeGenAssignmentExpression
  L_8252: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8251: 
  #final label in statem expression
  L_8250: 
  #if finish label = 8245
  L_8245:
  #if finish label = 8223
  L_8223:
  j L_8162
  #inside else
  L_8164:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8260: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_8261: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8259
  j L_8259
  #final label in binaryExp
  L_8259: 
  #jumpToAllOnlyIf
  L_8257:
  move $v0, $s1
  beqz $v0, L_8258
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8265: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8266: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8264
  j L_8264
  #final label in binaryExp
  L_8264: 
  #jumpToAllOnlyIf
  L_8263:
  move $v0, $s1
  beqz $v0, L_8262
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_8270: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8271: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8269
  j L_8269
  #final label in binaryExp
  L_8269: 
  #jumpToAllOnlyIf
  L_8268:
  move $v0, $s1
  beqz $v0, L_8267
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8276: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8277: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8275
  j L_8275
  #final label in binaryExp
  L_8275: 
  #final label in codeGenAssignmentExpression
  L_8274: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8273: 
  #final label in statem expression
  L_8272: 
  #if finish label = 8267
  L_8267:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8282: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8283: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8281
  j L_8281
  #final label in binaryExp
  L_8281: 
  #final label in codeGenAssignmentExpression
  L_8280: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8279: 
  #final label in statem expression
  L_8278: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_8287: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8288: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8286
  j L_8286
  #final label in binaryExp
  L_8286: 
  #jumpToAllOnlyIf
  L_8285:
  move $v0, $s1
  beqz $v0, L_8284
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8293: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8294: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8292
  j L_8292
  #final label in binaryExp
  L_8292: 
  #final label in codeGenAssignmentExpression
  L_8291: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8290: 
  #final label in statem expression
  L_8289: 
  #if finish label = 8284
  L_8284:
  #if finish label = 8262
  L_8262:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_8298: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8299: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8297
  j L_8297
  #final label in binaryExp
  L_8297: 
  #jumpToAllOnlyIf
  L_8296:
  move $v0, $s1
  beqz $v0, L_8295
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8304: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_0_6
  move $s4, $v0
  L_8305: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8303
  j L_8303
  #final label in binaryExp
  L_8303: 
  #final label in codeGenAssignmentExpression
  L_8302: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8301: 
  #final label in statem expression
  L_8300: 
  #if finish label = 8295
  L_8295:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_8309: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8310: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8308
  j L_8308
  #final label in binaryExp
  L_8308: 
  #jumpToAllOnlyIf
  L_8307:
  move $v0, $s1
  beqz $v0, L_8306
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8315: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_2_8
  move $s4, $v0
  L_8316: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8314
  j L_8314
  #final label in binaryExp
  L_8314: 
  #final label in codeGenAssignmentExpression
  L_8313: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8312: 
  #final label in statem expression
  L_8311: 
  #if finish label = 8306
  L_8306:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8320: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8321: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8319
  j L_8319
  #final label in binaryExp
  L_8319: 
  #jumpToAllOnlyIf
  L_8318:
  move $v0, $s1
  beqz $v0, L_8317
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_8325: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8326: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8324
  j L_8324
  #final label in binaryExp
  L_8324: 
  #jumpToAllOnlyIf
  L_8323:
  move $v0, $s1
  beqz $v0, L_8322
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8331: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_0_16
  move $s4, $v0
  L_8332: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8330
  j L_8330
  #final label in binaryExp
  L_8330: 
  #final label in codeGenAssignmentExpression
  L_8329: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8328: 
  #final label in statem expression
  L_8327: 
  #if finish label = 8322
  L_8322:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8337: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_1_17
  move $s4, $v0
  L_8338: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8336
  j L_8336
  #final label in binaryExp
  L_8336: 
  #final label in codeGenAssignmentExpression
  L_8335: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8334: 
  #final label in statem expression
  L_8333: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_8342: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8343: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8341
  j L_8341
  #final label in binaryExp
  L_8341: 
  #jumpToAllOnlyIf
  L_8340:
  move $v0, $s1
  beqz $v0, L_8339
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8348: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_2_18
  move $s4, $v0
  L_8349: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8347
  j L_8347
  #final label in binaryExp
  L_8347: 
  #final label in codeGenAssignmentExpression
  L_8346: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8345: 
  #final label in statem expression
  L_8344: 
  #if finish label = 8339
  L_8339:
  #if finish label = 8317
  L_8317:
  j L_8256
  #inside else
  L_8258:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8354: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_8355: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8353
  j L_8353
  #final label in binaryExp
  L_8353: 
  #jumpToAllOnlyIf
  L_8351:
  move $v0, $s1
  beqz $v0, L_8352
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8359: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8360: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8358
  j L_8358
  #final label in binaryExp
  L_8358: 
  #jumpToAllOnlyIf
  L_8357:
  move $v0, $s1
  beqz $v0, L_8356
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_8364: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8365: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8363
  j L_8363
  #final label in binaryExp
  L_8363: 
  #jumpToAllOnlyIf
  L_8362:
  move $v0, $s1
  beqz $v0, L_8361
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8370: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8371: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8369
  j L_8369
  #final label in binaryExp
  L_8369: 
  #final label in codeGenAssignmentExpression
  L_8368: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8367: 
  #final label in statem expression
  L_8366: 
  #if finish label = 8361
  L_8361:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8376: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8377: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8375
  j L_8375
  #final label in binaryExp
  L_8375: 
  #final label in codeGenAssignmentExpression
  L_8374: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8373: 
  #final label in statem expression
  L_8372: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_8381: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8382: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8380
  j L_8380
  #final label in binaryExp
  L_8380: 
  #jumpToAllOnlyIf
  L_8379:
  move $v0, $s1
  beqz $v0, L_8378
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8387: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8388: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8386
  j L_8386
  #final label in binaryExp
  L_8386: 
  #final label in codeGenAssignmentExpression
  L_8385: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8384: 
  #final label in statem expression
  L_8383: 
  #if finish label = 8378
  L_8378:
  #if finish label = 8356
  L_8356:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_8392: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8393: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8391
  j L_8391
  #final label in binaryExp
  L_8391: 
  #jumpToAllOnlyIf
  L_8390:
  move $v0, $s1
  beqz $v0, L_8389
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8398: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_1_7
  move $s4, $v0
  L_8399: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8397
  j L_8397
  #final label in binaryExp
  L_8397: 
  #final label in codeGenAssignmentExpression
  L_8396: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8395: 
  #final label in statem expression
  L_8394: 
  #if finish label = 8389
  L_8389:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_8403: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8404: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8402
  j L_8402
  #final label in binaryExp
  L_8402: 
  #jumpToAllOnlyIf
  L_8401:
  move $v0, $s1
  beqz $v0, L_8400
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8409: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_3_9
  move $s4, $v0
  L_8410: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8408
  j L_8408
  #final label in binaryExp
  L_8408: 
  #final label in codeGenAssignmentExpression
  L_8407: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8406: 
  #final label in statem expression
  L_8405: 
  #if finish label = 8400
  L_8400:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8414: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8415: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8413
  j L_8413
  #final label in binaryExp
  L_8413: 
  #jumpToAllOnlyIf
  L_8412:
  move $v0, $s1
  beqz $v0, L_8411
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_8419: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8420: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8418
  j L_8418
  #final label in binaryExp
  L_8418: 
  #jumpToAllOnlyIf
  L_8417:
  move $v0, $s1
  beqz $v0, L_8416
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8425: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_1_17
  move $s4, $v0
  L_8426: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8424
  j L_8424
  #final label in binaryExp
  L_8424: 
  #final label in codeGenAssignmentExpression
  L_8423: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8422: 
  #final label in statem expression
  L_8421: 
  #if finish label = 8416
  L_8416:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8431: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_2_18
  move $s4, $v0
  L_8432: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8430
  j L_8430
  #final label in binaryExp
  L_8430: 
  #final label in codeGenAssignmentExpression
  L_8429: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8428: 
  #final label in statem expression
  L_8427: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_8436: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8437: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8435
  j L_8435
  #final label in binaryExp
  L_8435: 
  #jumpToAllOnlyIf
  L_8434:
  move $v0, $s1
  beqz $v0, L_8433
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8442: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_3_19
  move $s4, $v0
  L_8443: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8441
  j L_8441
  #final label in binaryExp
  L_8441: 
  #final label in codeGenAssignmentExpression
  L_8440: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8439: 
  #final label in statem expression
  L_8438: 
  #if finish label = 8433
  L_8433:
  #if finish label = 8411
  L_8411:
  j L_8350
  #inside else
  L_8352:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8448: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_8449: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8447
  j L_8447
  #final label in binaryExp
  L_8447: 
  #jumpToAllOnlyIf
  L_8445:
  move $v0, $s1
  beqz $v0, L_8446
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8453: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8454: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8452
  j L_8452
  #final label in binaryExp
  L_8452: 
  #jumpToAllOnlyIf
  L_8451:
  move $v0, $s1
  beqz $v0, L_8450
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_8458: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8459: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8457
  j L_8457
  #final label in binaryExp
  L_8457: 
  #jumpToAllOnlyIf
  L_8456:
  move $v0, $s1
  beqz $v0, L_8455
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8464: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8465: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8463
  j L_8463
  #final label in binaryExp
  L_8463: 
  #final label in codeGenAssignmentExpression
  L_8462: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8461: 
  #final label in statem expression
  L_8460: 
  #if finish label = 8455
  L_8455:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8470: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8471: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8469
  j L_8469
  #final label in binaryExp
  L_8469: 
  #final label in codeGenAssignmentExpression
  L_8468: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8467: 
  #final label in statem expression
  L_8466: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_8475: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8476: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8474
  j L_8474
  #final label in binaryExp
  L_8474: 
  #jumpToAllOnlyIf
  L_8473:
  move $v0, $s1
  beqz $v0, L_8472
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8481: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8482: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8480
  j L_8480
  #final label in binaryExp
  L_8480: 
  #final label in codeGenAssignmentExpression
  L_8479: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8478: 
  #final label in statem expression
  L_8477: 
  #if finish label = 8472
  L_8472:
  #if finish label = 8450
  L_8450:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_8486: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8487: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8485
  j L_8485
  #final label in binaryExp
  L_8485: 
  #jumpToAllOnlyIf
  L_8484:
  move $v0, $s1
  beqz $v0, L_8483
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8492: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_2_8
  move $s4, $v0
  L_8493: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8491
  j L_8491
  #final label in binaryExp
  L_8491: 
  #final label in codeGenAssignmentExpression
  L_8490: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8489: 
  #final label in statem expression
  L_8488: 
  #if finish label = 8483
  L_8483:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_8497: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8498: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8496
  j L_8496
  #final label in binaryExp
  L_8496: 
  #jumpToAllOnlyIf
  L_8495:
  move $v0, $s1
  beqz $v0, L_8494
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8503: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_4_10
  move $s4, $v0
  L_8504: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8502
  j L_8502
  #final label in binaryExp
  L_8502: 
  #final label in codeGenAssignmentExpression
  L_8501: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8500: 
  #final label in statem expression
  L_8499: 
  #if finish label = 8494
  L_8494:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8508: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8509: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8507
  j L_8507
  #final label in binaryExp
  L_8507: 
  #jumpToAllOnlyIf
  L_8506:
  move $v0, $s1
  beqz $v0, L_8505
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_8513: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8514: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8512
  j L_8512
  #final label in binaryExp
  L_8512: 
  #jumpToAllOnlyIf
  L_8511:
  move $v0, $s1
  beqz $v0, L_8510
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8519: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_2_18
  move $s4, $v0
  L_8520: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8518
  j L_8518
  #final label in binaryExp
  L_8518: 
  #final label in codeGenAssignmentExpression
  L_8517: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8516: 
  #final label in statem expression
  L_8515: 
  #if finish label = 8510
  L_8510:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8525: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_3_19
  move $s4, $v0
  L_8526: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8524
  j L_8524
  #final label in binaryExp
  L_8524: 
  #final label in codeGenAssignmentExpression
  L_8523: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8522: 
  #final label in statem expression
  L_8521: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_8530: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8531: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8529
  j L_8529
  #final label in binaryExp
  L_8529: 
  #jumpToAllOnlyIf
  L_8528:
  move $v0, $s1
  beqz $v0, L_8527
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8536: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_4_20
  move $s4, $v0
  L_8537: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8535
  j L_8535
  #final label in binaryExp
  L_8535: 
  #final label in codeGenAssignmentExpression
  L_8534: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8533: 
  #final label in statem expression
  L_8532: 
  #if finish label = 8527
  L_8527:
  #if finish label = 8505
  L_8505:
  j L_8444
  #inside else
  L_8446:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8542: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_8543: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8541
  j L_8541
  #final label in binaryExp
  L_8541: 
  #jumpToAllOnlyIf
  L_8539:
  move $v0, $s1
  beqz $v0, L_8540
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8547: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8548: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8546
  j L_8546
  #final label in binaryExp
  L_8546: 
  #jumpToAllOnlyIf
  L_8545:
  move $v0, $s1
  beqz $v0, L_8544
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_8552: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8553: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8551
  j L_8551
  #final label in binaryExp
  L_8551: 
  #jumpToAllOnlyIf
  L_8550:
  move $v0, $s1
  beqz $v0, L_8549
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8558: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8559: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8557
  j L_8557
  #final label in binaryExp
  L_8557: 
  #final label in codeGenAssignmentExpression
  L_8556: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8555: 
  #final label in statem expression
  L_8554: 
  #if finish label = 8549
  L_8549:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8564: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8565: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8563
  j L_8563
  #final label in binaryExp
  L_8563: 
  #final label in codeGenAssignmentExpression
  L_8562: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8561: 
  #final label in statem expression
  L_8560: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_8569: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8570: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8568
  j L_8568
  #final label in binaryExp
  L_8568: 
  #jumpToAllOnlyIf
  L_8567:
  move $v0, $s1
  beqz $v0, L_8566
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8575: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8576: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8574
  j L_8574
  #final label in binaryExp
  L_8574: 
  #final label in codeGenAssignmentExpression
  L_8573: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8572: 
  #final label in statem expression
  L_8571: 
  #if finish label = 8566
  L_8566:
  #if finish label = 8544
  L_8544:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_8580: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8581: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8579
  j L_8579
  #final label in binaryExp
  L_8579: 
  #jumpToAllOnlyIf
  L_8578:
  move $v0, $s1
  beqz $v0, L_8577
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8586: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_3_9
  move $s4, $v0
  L_8587: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8585
  j L_8585
  #final label in binaryExp
  L_8585: 
  #final label in codeGenAssignmentExpression
  L_8584: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8583: 
  #final label in statem expression
  L_8582: 
  #if finish label = 8577
  L_8577:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_8591: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8592: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8590
  j L_8590
  #final label in binaryExp
  L_8590: 
  #jumpToAllOnlyIf
  L_8589:
  move $v0, $s1
  beqz $v0, L_8588
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8597: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_5_11
  move $s4, $v0
  L_8598: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8596
  j L_8596
  #final label in binaryExp
  L_8596: 
  #final label in codeGenAssignmentExpression
  L_8595: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8594: 
  #final label in statem expression
  L_8593: 
  #if finish label = 8588
  L_8588:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8602: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8603: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8601
  j L_8601
  #final label in binaryExp
  L_8601: 
  #jumpToAllOnlyIf
  L_8600:
  move $v0, $s1
  beqz $v0, L_8599
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_8607: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8608: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8606
  j L_8606
  #final label in binaryExp
  L_8606: 
  #jumpToAllOnlyIf
  L_8605:
  move $v0, $s1
  beqz $v0, L_8604
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8613: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_3_19
  move $s4, $v0
  L_8614: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8612
  j L_8612
  #final label in binaryExp
  L_8612: 
  #final label in codeGenAssignmentExpression
  L_8611: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8610: 
  #final label in statem expression
  L_8609: 
  #if finish label = 8604
  L_8604:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8619: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_4_20
  move $s4, $v0
  L_8620: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8618
  j L_8618
  #final label in binaryExp
  L_8618: 
  #final label in codeGenAssignmentExpression
  L_8617: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8616: 
  #final label in statem expression
  L_8615: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_8624: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8625: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8623
  j L_8623
  #final label in binaryExp
  L_8623: 
  #jumpToAllOnlyIf
  L_8622:
  move $v0, $s1
  beqz $v0, L_8621
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8630: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_5_21
  move $s4, $v0
  L_8631: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8629
  j L_8629
  #final label in binaryExp
  L_8629: 
  #final label in codeGenAssignmentExpression
  L_8628: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8627: 
  #final label in statem expression
  L_8626: 
  #if finish label = 8621
  L_8621:
  #if finish label = 8599
  L_8599:
  j L_8538
  #inside else
  L_8540:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8636: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_8637: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8635
  j L_8635
  #final label in binaryExp
  L_8635: 
  #jumpToAllOnlyIf
  L_8633:
  move $v0, $s1
  beqz $v0, L_8634
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8641: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8642: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8640
  j L_8640
  #final label in binaryExp
  L_8640: 
  #jumpToAllOnlyIf
  L_8639:
  move $v0, $s1
  beqz $v0, L_8638
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_8646: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8647: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8645
  j L_8645
  #final label in binaryExp
  L_8645: 
  #jumpToAllOnlyIf
  L_8644:
  move $v0, $s1
  beqz $v0, L_8643
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8652: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8653: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8651
  j L_8651
  #final label in binaryExp
  L_8651: 
  #final label in codeGenAssignmentExpression
  L_8650: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8649: 
  #final label in statem expression
  L_8648: 
  #if finish label = 8643
  L_8643:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8658: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8659: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8657
  j L_8657
  #final label in binaryExp
  L_8657: 
  #final label in codeGenAssignmentExpression
  L_8656: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8655: 
  #final label in statem expression
  L_8654: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_8663: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8664: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8662
  j L_8662
  #final label in binaryExp
  L_8662: 
  #jumpToAllOnlyIf
  L_8661:
  move $v0, $s1
  beqz $v0, L_8660
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8669: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8670: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8668
  j L_8668
  #final label in binaryExp
  L_8668: 
  #final label in codeGenAssignmentExpression
  L_8667: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8666: 
  #final label in statem expression
  L_8665: 
  #if finish label = 8660
  L_8660:
  #if finish label = 8638
  L_8638:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_8674: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8675: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8673
  j L_8673
  #final label in binaryExp
  L_8673: 
  #jumpToAllOnlyIf
  L_8672:
  move $v0, $s1
  beqz $v0, L_8671
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8680: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_4_10
  move $s4, $v0
  L_8681: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8679
  j L_8679
  #final label in binaryExp
  L_8679: 
  #final label in codeGenAssignmentExpression
  L_8678: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8677: 
  #final label in statem expression
  L_8676: 
  #if finish label = 8671
  L_8671:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_8685: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8686: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8684
  j L_8684
  #final label in binaryExp
  L_8684: 
  #jumpToAllOnlyIf
  L_8683:
  move $v0, $s1
  beqz $v0, L_8682
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8691: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_6_12
  move $s4, $v0
  L_8692: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8690
  j L_8690
  #final label in binaryExp
  L_8690: 
  #final label in codeGenAssignmentExpression
  L_8689: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8688: 
  #final label in statem expression
  L_8687: 
  #if finish label = 8682
  L_8682:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8696: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8697: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8695
  j L_8695
  #final label in binaryExp
  L_8695: 
  #jumpToAllOnlyIf
  L_8694:
  move $v0, $s1
  beqz $v0, L_8693
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_8701: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8702: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8700
  j L_8700
  #final label in binaryExp
  L_8700: 
  #jumpToAllOnlyIf
  L_8699:
  move $v0, $s1
  beqz $v0, L_8698
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8707: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_4_20
  move $s4, $v0
  L_8708: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8706
  j L_8706
  #final label in binaryExp
  L_8706: 
  #final label in codeGenAssignmentExpression
  L_8705: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8704: 
  #final label in statem expression
  L_8703: 
  #if finish label = 8698
  L_8698:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8713: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_5_21
  move $s4, $v0
  L_8714: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8712
  j L_8712
  #final label in binaryExp
  L_8712: 
  #final label in codeGenAssignmentExpression
  L_8711: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8710: 
  #final label in statem expression
  L_8709: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_8718: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8719: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8717
  j L_8717
  #final label in binaryExp
  L_8717: 
  #jumpToAllOnlyIf
  L_8716:
  move $v0, $s1
  beqz $v0, L_8715
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8724: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_6_22
  move $s4, $v0
  L_8725: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8723
  j L_8723
  #final label in binaryExp
  L_8723: 
  #final label in codeGenAssignmentExpression
  L_8722: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8721: 
  #final label in statem expression
  L_8720: 
  #if finish label = 8715
  L_8715:
  #if finish label = 8693
  L_8693:
  j L_8632
  #inside else
  L_8634:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8730: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_8731: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8729
  j L_8729
  #final label in binaryExp
  L_8729: 
  #jumpToAllOnlyIf
  L_8727:
  move $v0, $s1
  beqz $v0, L_8728
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8735: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8736: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8734
  j L_8734
  #final label in binaryExp
  L_8734: 
  #jumpToAllOnlyIf
  L_8733:
  move $v0, $s1
  beqz $v0, L_8732
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_8740: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8741: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8739
  j L_8739
  #final label in binaryExp
  L_8739: 
  #jumpToAllOnlyIf
  L_8738:
  move $v0, $s1
  beqz $v0, L_8737
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8746: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8747: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8745
  j L_8745
  #final label in binaryExp
  L_8745: 
  #final label in codeGenAssignmentExpression
  L_8744: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8743: 
  #final label in statem expression
  L_8742: 
  #if finish label = 8737
  L_8737:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8752: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8753: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8751
  j L_8751
  #final label in binaryExp
  L_8751: 
  #final label in codeGenAssignmentExpression
  L_8750: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8749: 
  #final label in statem expression
  L_8748: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_8757: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8758: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8756
  j L_8756
  #final label in binaryExp
  L_8756: 
  #jumpToAllOnlyIf
  L_8755:
  move $v0, $s1
  beqz $v0, L_8754
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8763: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8764: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8762
  j L_8762
  #final label in binaryExp
  L_8762: 
  #final label in codeGenAssignmentExpression
  L_8761: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8760: 
  #final label in statem expression
  L_8759: 
  #if finish label = 8754
  L_8754:
  #if finish label = 8732
  L_8732:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_8768: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8769: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8767
  j L_8767
  #final label in binaryExp
  L_8767: 
  #jumpToAllOnlyIf
  L_8766:
  move $v0, $s1
  beqz $v0, L_8765
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8774: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_5_11
  move $s4, $v0
  L_8775: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8773
  j L_8773
  #final label in binaryExp
  L_8773: 
  #final label in codeGenAssignmentExpression
  L_8772: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8771: 
  #final label in statem expression
  L_8770: 
  #if finish label = 8765
  L_8765:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_8779: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8780: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8778
  j L_8778
  #final label in binaryExp
  L_8778: 
  #jumpToAllOnlyIf
  L_8777:
  move $v0, $s1
  beqz $v0, L_8776
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8785: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_7_13
  move $s4, $v0
  L_8786: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8784
  j L_8784
  #final label in binaryExp
  L_8784: 
  #final label in codeGenAssignmentExpression
  L_8783: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8782: 
  #final label in statem expression
  L_8781: 
  #if finish label = 8776
  L_8776:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8790: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8791: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8789
  j L_8789
  #final label in binaryExp
  L_8789: 
  #jumpToAllOnlyIf
  L_8788:
  move $v0, $s1
  beqz $v0, L_8787
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_8795: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8796: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8794
  j L_8794
  #final label in binaryExp
  L_8794: 
  #jumpToAllOnlyIf
  L_8793:
  move $v0, $s1
  beqz $v0, L_8792
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8801: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_5_21
  move $s4, $v0
  L_8802: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8800
  j L_8800
  #final label in binaryExp
  L_8800: 
  #final label in codeGenAssignmentExpression
  L_8799: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8798: 
  #final label in statem expression
  L_8797: 
  #if finish label = 8792
  L_8792:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8807: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_6_22
  move $s4, $v0
  L_8808: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8806
  j L_8806
  #final label in binaryExp
  L_8806: 
  #final label in codeGenAssignmentExpression
  L_8805: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8804: 
  #final label in statem expression
  L_8803: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_8812: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8813: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8811
  j L_8811
  #final label in binaryExp
  L_8811: 
  #jumpToAllOnlyIf
  L_8810:
  move $v0, $s1
  beqz $v0, L_8809
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8818: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_7_23
  move $s4, $v0
  L_8819: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8817
  j L_8817
  #final label in binaryExp
  L_8817: 
  #final label in codeGenAssignmentExpression
  L_8816: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8815: 
  #final label in statem expression
  L_8814: 
  #if finish label = 8809
  L_8809:
  #if finish label = 8787
  L_8787:
  j L_8726
  #inside else
  L_8728:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8824: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_8825: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8823
  j L_8823
  #final label in binaryExp
  L_8823: 
  #jumpToAllOnlyIf
  L_8821:
  move $v0, $s1
  beqz $v0, L_8822
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8829: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8830: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8828
  j L_8828
  #final label in binaryExp
  L_8828: 
  #jumpToAllOnlyIf
  L_8827:
  move $v0, $s1
  beqz $v0, L_8826
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_8834: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8835: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8833
  j L_8833
  #final label in binaryExp
  L_8833: 
  #jumpToAllOnlyIf
  L_8832:
  move $v0, $s1
  beqz $v0, L_8831
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8840: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8841: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8839
  j L_8839
  #final label in binaryExp
  L_8839: 
  #final label in codeGenAssignmentExpression
  L_8838: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8837: 
  #final label in statem expression
  L_8836: 
  #if finish label = 8831
  L_8831:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8846: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8847: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8845
  j L_8845
  #final label in binaryExp
  L_8845: 
  #final label in codeGenAssignmentExpression
  L_8844: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8843: 
  #final label in statem expression
  L_8842: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_8851: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8852: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8850
  j L_8850
  #final label in binaryExp
  L_8850: 
  #jumpToAllOnlyIf
  L_8849:
  move $v0, $s1
  beqz $v0, L_8848
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8857: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8858: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8856
  j L_8856
  #final label in binaryExp
  L_8856: 
  #final label in codeGenAssignmentExpression
  L_8855: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8854: 
  #final label in statem expression
  L_8853: 
  #if finish label = 8848
  L_8848:
  #if finish label = 8826
  L_8826:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_8862: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8863: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8861
  j L_8861
  #final label in binaryExp
  L_8861: 
  #jumpToAllOnlyIf
  L_8860:
  move $v0, $s1
  beqz $v0, L_8859
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8868: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_6_12
  move $s4, $v0
  L_8869: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8867
  j L_8867
  #final label in binaryExp
  L_8867: 
  #final label in codeGenAssignmentExpression
  L_8866: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8865: 
  #final label in statem expression
  L_8864: 
  #if finish label = 8859
  L_8859:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_8873: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8874: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8872
  j L_8872
  #final label in binaryExp
  L_8872: 
  #jumpToAllOnlyIf
  L_8871:
  move $v0, $s1
  beqz $v0, L_8870
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8879: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_8_14
  move $s4, $v0
  L_8880: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8878
  j L_8878
  #final label in binaryExp
  L_8878: 
  #final label in codeGenAssignmentExpression
  L_8877: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8876: 
  #final label in statem expression
  L_8875: 
  #if finish label = 8870
  L_8870:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8884: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8885: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8883
  j L_8883
  #final label in binaryExp
  L_8883: 
  #jumpToAllOnlyIf
  L_8882:
  move $v0, $s1
  beqz $v0, L_8881
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_8889: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8890: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8888
  j L_8888
  #final label in binaryExp
  L_8888: 
  #jumpToAllOnlyIf
  L_8887:
  move $v0, $s1
  beqz $v0, L_8886
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8895: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_6_22
  move $s4, $v0
  L_8896: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8894
  j L_8894
  #final label in binaryExp
  L_8894: 
  #final label in codeGenAssignmentExpression
  L_8893: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8892: 
  #final label in statem expression
  L_8891: 
  #if finish label = 8886
  L_8886:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8901: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_7_23
  move $s4, $v0
  L_8902: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8900
  j L_8900
  #final label in binaryExp
  L_8900: 
  #final label in codeGenAssignmentExpression
  L_8899: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8898: 
  #final label in statem expression
  L_8897: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_8906: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8907: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8905
  j L_8905
  #final label in binaryExp
  L_8905: 
  #jumpToAllOnlyIf
  L_8904:
  move $v0, $s1
  beqz $v0, L_8903
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8912: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_8_24
  move $s4, $v0
  L_8913: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8911
  j L_8911
  #final label in binaryExp
  L_8911: 
  #final label in codeGenAssignmentExpression
  L_8910: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8909: 
  #final label in statem expression
  L_8908: 
  #if finish label = 8903
  L_8903:
  #if finish label = 8881
  L_8881:
  j L_8820
  #inside else
  L_8822:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_8918: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_8919: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8917
  j L_8917
  #final label in binaryExp
  L_8917: 
  #jumpToAllOnlyIf
  L_8915:
  move $v0, $s1
  beqz $v0, L_8916
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8923: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8924: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8922
  j L_8922
  #final label in binaryExp
  L_8922: 
  #jumpToAllOnlyIf
  L_8921:
  move $v0, $s1
  beqz $v0, L_8920
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_8928: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8929: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8927
  j L_8927
  #final label in binaryExp
  L_8927: 
  #jumpToAllOnlyIf
  L_8926:
  move $v0, $s1
  beqz $v0, L_8925
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8934: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8935: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8933
  j L_8933
  #final label in binaryExp
  L_8933: 
  #final label in codeGenAssignmentExpression
  L_8932: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8931: 
  #final label in statem expression
  L_8930: 
  #if finish label = 8925
  L_8925:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8940: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8941: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8939
  j L_8939
  #final label in binaryExp
  L_8939: 
  #final label in codeGenAssignmentExpression
  L_8938: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8937: 
  #final label in statem expression
  L_8936: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_8945: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8946: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8944
  j L_8944
  #final label in binaryExp
  L_8944: 
  #jumpToAllOnlyIf
  L_8943:
  move $v0, $s1
  beqz $v0, L_8942
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8951: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_8952: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8950
  j L_8950
  #final label in binaryExp
  L_8950: 
  #final label in codeGenAssignmentExpression
  L_8949: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8948: 
  #final label in statem expression
  L_8947: 
  #if finish label = 8942
  L_8942:
  #if finish label = 8920
  L_8920:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_8956: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8957: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8955
  j L_8955
  #final label in binaryExp
  L_8955: 
  #jumpToAllOnlyIf
  L_8954:
  move $v0, $s1
  beqz $v0, L_8953
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8962: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_7_13
  move $s4, $v0
  L_8963: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8961
  j L_8961
  #final label in binaryExp
  L_8961: 
  #final label in codeGenAssignmentExpression
  L_8960: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8959: 
  #final label in statem expression
  L_8958: 
  #if finish label = 8953
  L_8953:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_8967: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8968: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8966
  j L_8966
  #final label in binaryExp
  L_8966: 
  #jumpToAllOnlyIf
  L_8965:
  move $v0, $s1
  beqz $v0, L_8964
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8973: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_9_15
  move $s4, $v0
  L_8974: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8972
  j L_8972
  #final label in binaryExp
  L_8972: 
  #final label in codeGenAssignmentExpression
  L_8971: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8970: 
  #final label in statem expression
  L_8969: 
  #if finish label = 8964
  L_8964:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_8978: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_8979: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8977
  j L_8977
  #final label in binaryExp
  L_8977: 
  #jumpToAllOnlyIf
  L_8976:
  move $v0, $s1
  beqz $v0, L_8975
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_8983: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_8984: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8982
  j L_8982
  #final label in binaryExp
  L_8982: 
  #jumpToAllOnlyIf
  L_8981:
  move $v0, $s1
  beqz $v0, L_8980
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8989: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_7_23
  move $s4, $v0
  L_8990: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8988
  j L_8988
  #final label in binaryExp
  L_8988: 
  #final label in codeGenAssignmentExpression
  L_8987: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8986: 
  #final label in statem expression
  L_8985: 
  #if finish label = 8980
  L_8980:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_8995: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_8_24
  move $s4, $v0
  L_8996: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_8994
  j L_8994
  #final label in binaryExp
  L_8994: 
  #final label in codeGenAssignmentExpression
  L_8993: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_8992: 
  #final label in statem expression
  L_8991: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_9000: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9001: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_8999
  j L_8999
  #final label in binaryExp
  L_8999: 
  #jumpToAllOnlyIf
  L_8998:
  move $v0, $s1
  beqz $v0, L_8997
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9006: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_9_25
  move $s4, $v0
  L_9007: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9005
  j L_9005
  #final label in binaryExp
  L_9005: 
  #final label in codeGenAssignmentExpression
  L_9004: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9003: 
  #final label in statem expression
  L_9002: 
  #if finish label = 8997
  L_8997:
  #if finish label = 8975
  L_8975:
  j L_8914
  #inside else
  L_8916:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9011: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9012: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9010
  j L_9010
  #final label in binaryExp
  L_9010: 
  #jumpToAllOnlyIf
  L_9009:
  move $v0, $s1
  beqz $v0, L_9008
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_9016: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9017: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9015
  j L_9015
  #final label in binaryExp
  L_9015: 
  #jumpToAllOnlyIf
  L_9014:
  move $v0, $s1
  beqz $v0, L_9013
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9021: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9022: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9020
  j L_9020
  #final label in binaryExp
  L_9020: 
  #jumpToAllOnlyIf
  L_9019:
  move $v0, $s1
  beqz $v0, L_9018
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9027: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9028: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9026
  j L_9026
  #final label in binaryExp
  L_9026: 
  #final label in codeGenAssignmentExpression
  L_9025: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9024: 
  #final label in statem expression
  L_9023: 
  #if finish label = 9018
  L_9018:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9033: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9034: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9032
  j L_9032
  #final label in binaryExp
  L_9032: 
  #final label in codeGenAssignmentExpression
  L_9031: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9030: 
  #final label in statem expression
  L_9029: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9038: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9039: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9037
  j L_9037
  #final label in binaryExp
  L_9037: 
  #jumpToAllOnlyIf
  L_9036:
  move $v0, $s1
  beqz $v0, L_9035
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9044: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9045: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9043
  j L_9043
  #final label in binaryExp
  L_9043: 
  #final label in codeGenAssignmentExpression
  L_9042: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9041: 
  #final label in statem expression
  L_9040: 
  #if finish label = 9035
  L_9035:
  #if finish label = 9013
  L_9013:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9049: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9050: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9048
  j L_9048
  #final label in binaryExp
  L_9048: 
  #jumpToAllOnlyIf
  L_9047:
  move $v0, $s1
  beqz $v0, L_9046
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9055: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_8_14
  move $s4, $v0
  L_9056: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9054
  j L_9054
  #final label in binaryExp
  L_9054: 
  #final label in codeGenAssignmentExpression
  L_9053: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9052: 
  #final label in statem expression
  L_9051: 
  #if finish label = 9046
  L_9046:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9060: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9061: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9059
  j L_9059
  #final label in binaryExp
  L_9059: 
  #jumpToAllOnlyIf
  L_9058:
  move $v0, $s1
  beqz $v0, L_9057
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9066: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9067: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9065
  j L_9065
  #final label in binaryExp
  L_9065: 
  #final label in codeGenAssignmentExpression
  L_9064: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9063: 
  #final label in statem expression
  L_9062: 
  #if finish label = 9057
  L_9057:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_9071: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9072: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9070
  j L_9070
  #final label in binaryExp
  L_9070: 
  #jumpToAllOnlyIf
  L_9069:
  move $v0, $s1
  beqz $v0, L_9068
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9076: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9077: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9075
  j L_9075
  #final label in binaryExp
  L_9075: 
  #jumpToAllOnlyIf
  L_9074:
  move $v0, $s1
  beqz $v0, L_9073
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9082: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_8_24
  move $s4, $v0
  L_9083: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9081
  j L_9081
  #final label in binaryExp
  L_9081: 
  #final label in codeGenAssignmentExpression
  L_9080: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9079: 
  #final label in statem expression
  L_9078: 
  #if finish label = 9073
  L_9073:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9088: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_9_25
  move $s4, $v0
  L_9089: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9087
  j L_9087
  #final label in binaryExp
  L_9087: 
  #final label in codeGenAssignmentExpression
  L_9086: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9085: 
  #final label in statem expression
  L_9084: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9093: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9094: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9092
  j L_9092
  #final label in binaryExp
  L_9092: 
  #jumpToAllOnlyIf
  L_9091:
  move $v0, $s1
  beqz $v0, L_9090
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9099: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9100: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9098
  j L_9098
  #final label in binaryExp
  L_9098: 
  #final label in codeGenAssignmentExpression
  L_9097: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9096: 
  #final label in statem expression
  L_9095: 
  #if finish label = 9090
  L_9090:
  #if finish label = 9068
  L_9068:
  #if finish label = 9008
  L_9008:
  #if finish label = 8914
  L_8914:
  #if finish label = 8820
  L_8820:
  #if finish label = 8726
  L_8726:
  #if finish label = 8632
  L_8632:
  #if finish label = 8538
  L_8538:
  #if finish label = 8444
  L_8444:
  #if finish label = 8350
  L_8350:
  #if finish label = 8256
  L_8256:
  #if finish label = 8162
  L_8162:
  j L_8156
  #inside else
  L_8158:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_9105: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_9106: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9104
  j L_9104
  #final label in binaryExp
  L_9104: 
  #jumpToAllOnlyIf
  L_9102:
  move $v0, $s1
  beqz $v0, L_9103
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9111: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9112: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9110
  j L_9110
  #final label in binaryExp
  L_9110: 
  #jumpToAllOnlyIf
  L_9108:
  move $v0, $s1
  beqz $v0, L_9109
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9116: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9117: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9115
  j L_9115
  #final label in binaryExp
  L_9115: 
  #jumpToAllOnlyIf
  L_9114:
  move $v0, $s1
  beqz $v0, L_9113
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_9121: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9122: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9120
  j L_9120
  #final label in binaryExp
  L_9120: 
  #jumpToAllOnlyIf
  L_9119:
  move $v0, $s1
  beqz $v0, L_9118
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9127: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9128: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9126
  j L_9126
  #final label in binaryExp
  L_9126: 
  #final label in codeGenAssignmentExpression
  L_9125: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9124: 
  #final label in statem expression
  L_9123: 
  #if finish label = 9118
  L_9118:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9133: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_0_6
  move $s4, $v0
  L_9134: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9132
  j L_9132
  #final label in binaryExp
  L_9132: 
  #final label in codeGenAssignmentExpression
  L_9131: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9130: 
  #final label in statem expression
  L_9129: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_9138: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9139: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9137
  j L_9137
  #final label in binaryExp
  L_9137: 
  #jumpToAllOnlyIf
  L_9136:
  move $v0, $s1
  beqz $v0, L_9135
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9144: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_1_7
  move $s4, $v0
  L_9145: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9143
  j L_9143
  #final label in binaryExp
  L_9143: 
  #final label in codeGenAssignmentExpression
  L_9142: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9141: 
  #final label in statem expression
  L_9140: 
  #if finish label = 9135
  L_9135:
  #if finish label = 9113
  L_9113:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_9149: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9150: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9148
  j L_9148
  #final label in binaryExp
  L_9148: 
  #jumpToAllOnlyIf
  L_9147:
  move $v0, $s1
  beqz $v0, L_9146
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9155: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9156: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9154
  j L_9154
  #final label in binaryExp
  L_9154: 
  #final label in codeGenAssignmentExpression
  L_9153: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9152: 
  #final label in statem expression
  L_9151: 
  #if finish label = 9146
  L_9146:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_9160: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9161: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9159
  j L_9159
  #final label in binaryExp
  L_9159: 
  #jumpToAllOnlyIf
  L_9158:
  move $v0, $s1
  beqz $v0, L_9157
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9166: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_1_17
  move $s4, $v0
  L_9167: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9165
  j L_9165
  #final label in binaryExp
  L_9165: 
  #final label in codeGenAssignmentExpression
  L_9164: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9163: 
  #final label in statem expression
  L_9162: 
  #if finish label = 9157
  L_9157:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9171: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9172: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9170
  j L_9170
  #final label in binaryExp
  L_9170: 
  #jumpToAllOnlyIf
  L_9169:
  move $v0, $s1
  beqz $v0, L_9168
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_9176: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9177: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9175
  j L_9175
  #final label in binaryExp
  L_9175: 
  #jumpToAllOnlyIf
  L_9174:
  move $v0, $s1
  beqz $v0, L_9173
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9182: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9183: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9181
  j L_9181
  #final label in binaryExp
  L_9181: 
  #final label in codeGenAssignmentExpression
  L_9180: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9179: 
  #final label in statem expression
  L_9178: 
  #if finish label = 9173
  L_9173:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9188: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_0_26
  move $s4, $v0
  L_9189: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9187
  j L_9187
  #final label in binaryExp
  L_9187: 
  #final label in codeGenAssignmentExpression
  L_9186: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9185: 
  #final label in statem expression
  L_9184: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_9193: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9194: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9192
  j L_9192
  #final label in binaryExp
  L_9192: 
  #jumpToAllOnlyIf
  L_9191:
  move $v0, $s1
  beqz $v0, L_9190
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9199: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_1_27
  move $s4, $v0
  L_9200: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9198
  j L_9198
  #final label in binaryExp
  L_9198: 
  #final label in codeGenAssignmentExpression
  L_9197: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9196: 
  #final label in statem expression
  L_9195: 
  #if finish label = 9190
  L_9190:
  #if finish label = 9168
  L_9168:
  j L_9107
  #inside else
  L_9109:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9205: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_9206: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9204
  j L_9204
  #final label in binaryExp
  L_9204: 
  #jumpToAllOnlyIf
  L_9202:
  move $v0, $s1
  beqz $v0, L_9203
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9210: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9211: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9209
  j L_9209
  #final label in binaryExp
  L_9209: 
  #jumpToAllOnlyIf
  L_9208:
  move $v0, $s1
  beqz $v0, L_9207
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9215: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9216: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9214
  j L_9214
  #final label in binaryExp
  L_9214: 
  #jumpToAllOnlyIf
  L_9213:
  move $v0, $s1
  beqz $v0, L_9212
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9221: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_0_6
  move $s4, $v0
  L_9222: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9220
  j L_9220
  #final label in binaryExp
  L_9220: 
  #final label in codeGenAssignmentExpression
  L_9219: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9218: 
  #final label in statem expression
  L_9217: 
  #if finish label = 9212
  L_9212:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9227: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_1_7
  move $s4, $v0
  L_9228: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9226
  j L_9226
  #final label in binaryExp
  L_9226: 
  #final label in codeGenAssignmentExpression
  L_9225: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9224: 
  #final label in statem expression
  L_9223: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9232: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9233: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9231
  j L_9231
  #final label in binaryExp
  L_9231: 
  #jumpToAllOnlyIf
  L_9230:
  move $v0, $s1
  beqz $v0, L_9229
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9238: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_2_8
  move $s4, $v0
  L_9239: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9237
  j L_9237
  #final label in binaryExp
  L_9237: 
  #final label in codeGenAssignmentExpression
  L_9236: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9235: 
  #final label in statem expression
  L_9234: 
  #if finish label = 9229
  L_9229:
  #if finish label = 9207
  L_9207:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9243: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9244: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9242
  j L_9242
  #final label in binaryExp
  L_9242: 
  #jumpToAllOnlyIf
  L_9241:
  move $v0, $s1
  beqz $v0, L_9240
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9249: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_0_16
  move $s4, $v0
  L_9250: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9248
  j L_9248
  #final label in binaryExp
  L_9248: 
  #final label in codeGenAssignmentExpression
  L_9247: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9246: 
  #final label in statem expression
  L_9245: 
  #if finish label = 9240
  L_9240:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9254: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9255: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9253
  j L_9253
  #final label in binaryExp
  L_9253: 
  #jumpToAllOnlyIf
  L_9252:
  move $v0, $s1
  beqz $v0, L_9251
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9260: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_2_18
  move $s4, $v0
  L_9261: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9259
  j L_9259
  #final label in binaryExp
  L_9259: 
  #final label in codeGenAssignmentExpression
  L_9258: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9257: 
  #final label in statem expression
  L_9256: 
  #if finish label = 9251
  L_9251:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9265: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9266: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9264
  j L_9264
  #final label in binaryExp
  L_9264: 
  #jumpToAllOnlyIf
  L_9263:
  move $v0, $s1
  beqz $v0, L_9262
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9270: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9271: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9269
  j L_9269
  #final label in binaryExp
  L_9269: 
  #jumpToAllOnlyIf
  L_9268:
  move $v0, $s1
  beqz $v0, L_9267
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9276: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_0_26
  move $s4, $v0
  L_9277: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9275
  j L_9275
  #final label in binaryExp
  L_9275: 
  #final label in codeGenAssignmentExpression
  L_9274: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9273: 
  #final label in statem expression
  L_9272: 
  #if finish label = 9267
  L_9267:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9282: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_1_27
  move $s4, $v0
  L_9283: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9281
  j L_9281
  #final label in binaryExp
  L_9281: 
  #final label in codeGenAssignmentExpression
  L_9280: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9279: 
  #final label in statem expression
  L_9278: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9287: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9288: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9286
  j L_9286
  #final label in binaryExp
  L_9286: 
  #jumpToAllOnlyIf
  L_9285:
  move $v0, $s1
  beqz $v0, L_9284
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9293: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_2_28
  move $s4, $v0
  L_9294: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9292
  j L_9292
  #final label in binaryExp
  L_9292: 
  #final label in codeGenAssignmentExpression
  L_9291: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9290: 
  #final label in statem expression
  L_9289: 
  #if finish label = 9284
  L_9284:
  #if finish label = 9262
  L_9262:
  j L_9201
  #inside else
  L_9203:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9299: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_9300: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9298
  j L_9298
  #final label in binaryExp
  L_9298: 
  #jumpToAllOnlyIf
  L_9296:
  move $v0, $s1
  beqz $v0, L_9297
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9304: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9305: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9303
  j L_9303
  #final label in binaryExp
  L_9303: 
  #jumpToAllOnlyIf
  L_9302:
  move $v0, $s1
  beqz $v0, L_9301
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_9309: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9310: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9308
  j L_9308
  #final label in binaryExp
  L_9308: 
  #jumpToAllOnlyIf
  L_9307:
  move $v0, $s1
  beqz $v0, L_9306
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9315: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_1_7
  move $s4, $v0
  L_9316: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9314
  j L_9314
  #final label in binaryExp
  L_9314: 
  #final label in codeGenAssignmentExpression
  L_9313: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9312: 
  #final label in statem expression
  L_9311: 
  #if finish label = 9306
  L_9306:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9321: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_2_8
  move $s4, $v0
  L_9322: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9320
  j L_9320
  #final label in binaryExp
  L_9320: 
  #final label in codeGenAssignmentExpression
  L_9319: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9318: 
  #final label in statem expression
  L_9317: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_9326: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9327: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9325
  j L_9325
  #final label in binaryExp
  L_9325: 
  #jumpToAllOnlyIf
  L_9324:
  move $v0, $s1
  beqz $v0, L_9323
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9332: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_3_9
  move $s4, $v0
  L_9333: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9331
  j L_9331
  #final label in binaryExp
  L_9331: 
  #final label in codeGenAssignmentExpression
  L_9330: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9329: 
  #final label in statem expression
  L_9328: 
  #if finish label = 9323
  L_9323:
  #if finish label = 9301
  L_9301:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_9337: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9338: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9336
  j L_9336
  #final label in binaryExp
  L_9336: 
  #jumpToAllOnlyIf
  L_9335:
  move $v0, $s1
  beqz $v0, L_9334
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9343: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_1_17
  move $s4, $v0
  L_9344: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9342
  j L_9342
  #final label in binaryExp
  L_9342: 
  #final label in codeGenAssignmentExpression
  L_9341: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9340: 
  #final label in statem expression
  L_9339: 
  #if finish label = 9334
  L_9334:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_9348: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9349: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9347
  j L_9347
  #final label in binaryExp
  L_9347: 
  #jumpToAllOnlyIf
  L_9346:
  move $v0, $s1
  beqz $v0, L_9345
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9354: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_3_19
  move $s4, $v0
  L_9355: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9353
  j L_9353
  #final label in binaryExp
  L_9353: 
  #final label in codeGenAssignmentExpression
  L_9352: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9351: 
  #final label in statem expression
  L_9350: 
  #if finish label = 9345
  L_9345:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9359: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9360: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9358
  j L_9358
  #final label in binaryExp
  L_9358: 
  #jumpToAllOnlyIf
  L_9357:
  move $v0, $s1
  beqz $v0, L_9356
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_9364: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9365: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9363
  j L_9363
  #final label in binaryExp
  L_9363: 
  #jumpToAllOnlyIf
  L_9362:
  move $v0, $s1
  beqz $v0, L_9361
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9370: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_1_27
  move $s4, $v0
  L_9371: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9369
  j L_9369
  #final label in binaryExp
  L_9369: 
  #final label in codeGenAssignmentExpression
  L_9368: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9367: 
  #final label in statem expression
  L_9366: 
  #if finish label = 9361
  L_9361:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9376: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_2_28
  move $s4, $v0
  L_9377: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9375
  j L_9375
  #final label in binaryExp
  L_9375: 
  #final label in codeGenAssignmentExpression
  L_9374: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9373: 
  #final label in statem expression
  L_9372: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_9381: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9382: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9380
  j L_9380
  #final label in binaryExp
  L_9380: 
  #jumpToAllOnlyIf
  L_9379:
  move $v0, $s1
  beqz $v0, L_9378
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9387: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_3_29
  move $s4, $v0
  L_9388: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9386
  j L_9386
  #final label in binaryExp
  L_9386: 
  #final label in codeGenAssignmentExpression
  L_9385: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9384: 
  #final label in statem expression
  L_9383: 
  #if finish label = 9378
  L_9378:
  #if finish label = 9356
  L_9356:
  j L_9295
  #inside else
  L_9297:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9393: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_9394: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9392
  j L_9392
  #final label in binaryExp
  L_9392: 
  #jumpToAllOnlyIf
  L_9390:
  move $v0, $s1
  beqz $v0, L_9391
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9398: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9399: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9397
  j L_9397
  #final label in binaryExp
  L_9397: 
  #jumpToAllOnlyIf
  L_9396:
  move $v0, $s1
  beqz $v0, L_9395
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_9403: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9404: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9402
  j L_9402
  #final label in binaryExp
  L_9402: 
  #jumpToAllOnlyIf
  L_9401:
  move $v0, $s1
  beqz $v0, L_9400
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9409: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_2_8
  move $s4, $v0
  L_9410: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9408
  j L_9408
  #final label in binaryExp
  L_9408: 
  #final label in codeGenAssignmentExpression
  L_9407: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9406: 
  #final label in statem expression
  L_9405: 
  #if finish label = 9400
  L_9400:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9415: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_3_9
  move $s4, $v0
  L_9416: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9414
  j L_9414
  #final label in binaryExp
  L_9414: 
  #final label in codeGenAssignmentExpression
  L_9413: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9412: 
  #final label in statem expression
  L_9411: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_9420: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9421: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9419
  j L_9419
  #final label in binaryExp
  L_9419: 
  #jumpToAllOnlyIf
  L_9418:
  move $v0, $s1
  beqz $v0, L_9417
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9426: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_4_10
  move $s4, $v0
  L_9427: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9425
  j L_9425
  #final label in binaryExp
  L_9425: 
  #final label in codeGenAssignmentExpression
  L_9424: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9423: 
  #final label in statem expression
  L_9422: 
  #if finish label = 9417
  L_9417:
  #if finish label = 9395
  L_9395:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_9431: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9432: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9430
  j L_9430
  #final label in binaryExp
  L_9430: 
  #jumpToAllOnlyIf
  L_9429:
  move $v0, $s1
  beqz $v0, L_9428
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9437: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_2_18
  move $s4, $v0
  L_9438: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9436
  j L_9436
  #final label in binaryExp
  L_9436: 
  #final label in codeGenAssignmentExpression
  L_9435: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9434: 
  #final label in statem expression
  L_9433: 
  #if finish label = 9428
  L_9428:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_9442: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9443: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9441
  j L_9441
  #final label in binaryExp
  L_9441: 
  #jumpToAllOnlyIf
  L_9440:
  move $v0, $s1
  beqz $v0, L_9439
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9448: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_4_20
  move $s4, $v0
  L_9449: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9447
  j L_9447
  #final label in binaryExp
  L_9447: 
  #final label in codeGenAssignmentExpression
  L_9446: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9445: 
  #final label in statem expression
  L_9444: 
  #if finish label = 9439
  L_9439:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9453: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9454: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9452
  j L_9452
  #final label in binaryExp
  L_9452: 
  #jumpToAllOnlyIf
  L_9451:
  move $v0, $s1
  beqz $v0, L_9450
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_9458: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9459: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9457
  j L_9457
  #final label in binaryExp
  L_9457: 
  #jumpToAllOnlyIf
  L_9456:
  move $v0, $s1
  beqz $v0, L_9455
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9464: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_2_28
  move $s4, $v0
  L_9465: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9463
  j L_9463
  #final label in binaryExp
  L_9463: 
  #final label in codeGenAssignmentExpression
  L_9462: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9461: 
  #final label in statem expression
  L_9460: 
  #if finish label = 9455
  L_9455:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9470: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_3_29
  move $s4, $v0
  L_9471: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9469
  j L_9469
  #final label in binaryExp
  L_9469: 
  #final label in codeGenAssignmentExpression
  L_9468: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9467: 
  #final label in statem expression
  L_9466: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_9475: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9476: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9474
  j L_9474
  #final label in binaryExp
  L_9474: 
  #jumpToAllOnlyIf
  L_9473:
  move $v0, $s1
  beqz $v0, L_9472
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9481: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_4_30
  move $s4, $v0
  L_9482: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9480
  j L_9480
  #final label in binaryExp
  L_9480: 
  #final label in codeGenAssignmentExpression
  L_9479: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9478: 
  #final label in statem expression
  L_9477: 
  #if finish label = 9472
  L_9472:
  #if finish label = 9450
  L_9450:
  j L_9389
  #inside else
  L_9391:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9487: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_9488: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9486
  j L_9486
  #final label in binaryExp
  L_9486: 
  #jumpToAllOnlyIf
  L_9484:
  move $v0, $s1
  beqz $v0, L_9485
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9492: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9493: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9491
  j L_9491
  #final label in binaryExp
  L_9491: 
  #jumpToAllOnlyIf
  L_9490:
  move $v0, $s1
  beqz $v0, L_9489
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_9497: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9498: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9496
  j L_9496
  #final label in binaryExp
  L_9496: 
  #jumpToAllOnlyIf
  L_9495:
  move $v0, $s1
  beqz $v0, L_9494
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9503: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_3_9
  move $s4, $v0
  L_9504: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9502
  j L_9502
  #final label in binaryExp
  L_9502: 
  #final label in codeGenAssignmentExpression
  L_9501: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9500: 
  #final label in statem expression
  L_9499: 
  #if finish label = 9494
  L_9494:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9509: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_4_10
  move $s4, $v0
  L_9510: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9508
  j L_9508
  #final label in binaryExp
  L_9508: 
  #final label in codeGenAssignmentExpression
  L_9507: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9506: 
  #final label in statem expression
  L_9505: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_9514: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9515: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9513
  j L_9513
  #final label in binaryExp
  L_9513: 
  #jumpToAllOnlyIf
  L_9512:
  move $v0, $s1
  beqz $v0, L_9511
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9520: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_5_11
  move $s4, $v0
  L_9521: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9519
  j L_9519
  #final label in binaryExp
  L_9519: 
  #final label in codeGenAssignmentExpression
  L_9518: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9517: 
  #final label in statem expression
  L_9516: 
  #if finish label = 9511
  L_9511:
  #if finish label = 9489
  L_9489:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_9525: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9526: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9524
  j L_9524
  #final label in binaryExp
  L_9524: 
  #jumpToAllOnlyIf
  L_9523:
  move $v0, $s1
  beqz $v0, L_9522
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9531: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_3_19
  move $s4, $v0
  L_9532: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9530
  j L_9530
  #final label in binaryExp
  L_9530: 
  #final label in codeGenAssignmentExpression
  L_9529: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9528: 
  #final label in statem expression
  L_9527: 
  #if finish label = 9522
  L_9522:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_9536: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9537: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9535
  j L_9535
  #final label in binaryExp
  L_9535: 
  #jumpToAllOnlyIf
  L_9534:
  move $v0, $s1
  beqz $v0, L_9533
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9542: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_5_21
  move $s4, $v0
  L_9543: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9541
  j L_9541
  #final label in binaryExp
  L_9541: 
  #final label in codeGenAssignmentExpression
  L_9540: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9539: 
  #final label in statem expression
  L_9538: 
  #if finish label = 9533
  L_9533:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9547: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9548: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9546
  j L_9546
  #final label in binaryExp
  L_9546: 
  #jumpToAllOnlyIf
  L_9545:
  move $v0, $s1
  beqz $v0, L_9544
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_9552: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9553: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9551
  j L_9551
  #final label in binaryExp
  L_9551: 
  #jumpToAllOnlyIf
  L_9550:
  move $v0, $s1
  beqz $v0, L_9549
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9558: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_3_29
  move $s4, $v0
  L_9559: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9557
  j L_9557
  #final label in binaryExp
  L_9557: 
  #final label in codeGenAssignmentExpression
  L_9556: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9555: 
  #final label in statem expression
  L_9554: 
  #if finish label = 9549
  L_9549:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9564: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_4_30
  move $s4, $v0
  L_9565: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9563
  j L_9563
  #final label in binaryExp
  L_9563: 
  #final label in codeGenAssignmentExpression
  L_9562: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9561: 
  #final label in statem expression
  L_9560: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_9569: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9570: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9568
  j L_9568
  #final label in binaryExp
  L_9568: 
  #jumpToAllOnlyIf
  L_9567:
  move $v0, $s1
  beqz $v0, L_9566
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9575: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_5_31
  move $s4, $v0
  L_9576: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9574
  j L_9574
  #final label in binaryExp
  L_9574: 
  #final label in codeGenAssignmentExpression
  L_9573: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9572: 
  #final label in statem expression
  L_9571: 
  #if finish label = 9566
  L_9566:
  #if finish label = 9544
  L_9544:
  j L_9483
  #inside else
  L_9485:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9581: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_9582: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9580
  j L_9580
  #final label in binaryExp
  L_9580: 
  #jumpToAllOnlyIf
  L_9578:
  move $v0, $s1
  beqz $v0, L_9579
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9586: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9587: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9585
  j L_9585
  #final label in binaryExp
  L_9585: 
  #jumpToAllOnlyIf
  L_9584:
  move $v0, $s1
  beqz $v0, L_9583
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_9591: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9592: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9590
  j L_9590
  #final label in binaryExp
  L_9590: 
  #jumpToAllOnlyIf
  L_9589:
  move $v0, $s1
  beqz $v0, L_9588
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9597: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_4_10
  move $s4, $v0
  L_9598: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9596
  j L_9596
  #final label in binaryExp
  L_9596: 
  #final label in codeGenAssignmentExpression
  L_9595: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9594: 
  #final label in statem expression
  L_9593: 
  #if finish label = 9588
  L_9588:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9603: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_5_11
  move $s4, $v0
  L_9604: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9602
  j L_9602
  #final label in binaryExp
  L_9602: 
  #final label in codeGenAssignmentExpression
  L_9601: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9600: 
  #final label in statem expression
  L_9599: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_9608: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9609: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9607
  j L_9607
  #final label in binaryExp
  L_9607: 
  #jumpToAllOnlyIf
  L_9606:
  move $v0, $s1
  beqz $v0, L_9605
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9614: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_6_12
  move $s4, $v0
  L_9615: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9613
  j L_9613
  #final label in binaryExp
  L_9613: 
  #final label in codeGenAssignmentExpression
  L_9612: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9611: 
  #final label in statem expression
  L_9610: 
  #if finish label = 9605
  L_9605:
  #if finish label = 9583
  L_9583:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_9619: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9620: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9618
  j L_9618
  #final label in binaryExp
  L_9618: 
  #jumpToAllOnlyIf
  L_9617:
  move $v0, $s1
  beqz $v0, L_9616
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9625: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_4_20
  move $s4, $v0
  L_9626: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9624
  j L_9624
  #final label in binaryExp
  L_9624: 
  #final label in codeGenAssignmentExpression
  L_9623: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9622: 
  #final label in statem expression
  L_9621: 
  #if finish label = 9616
  L_9616:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_9630: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9631: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9629
  j L_9629
  #final label in binaryExp
  L_9629: 
  #jumpToAllOnlyIf
  L_9628:
  move $v0, $s1
  beqz $v0, L_9627
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9636: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_6_22
  move $s4, $v0
  L_9637: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9635
  j L_9635
  #final label in binaryExp
  L_9635: 
  #final label in codeGenAssignmentExpression
  L_9634: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9633: 
  #final label in statem expression
  L_9632: 
  #if finish label = 9627
  L_9627:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9641: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9642: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9640
  j L_9640
  #final label in binaryExp
  L_9640: 
  #jumpToAllOnlyIf
  L_9639:
  move $v0, $s1
  beqz $v0, L_9638
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_9646: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9647: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9645
  j L_9645
  #final label in binaryExp
  L_9645: 
  #jumpToAllOnlyIf
  L_9644:
  move $v0, $s1
  beqz $v0, L_9643
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9652: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_4_30
  move $s4, $v0
  L_9653: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9651
  j L_9651
  #final label in binaryExp
  L_9651: 
  #final label in codeGenAssignmentExpression
  L_9650: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9649: 
  #final label in statem expression
  L_9648: 
  #if finish label = 9643
  L_9643:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9658: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_5_31
  move $s4, $v0
  L_9659: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9657
  j L_9657
  #final label in binaryExp
  L_9657: 
  #final label in codeGenAssignmentExpression
  L_9656: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9655: 
  #final label in statem expression
  L_9654: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_9663: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9664: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9662
  j L_9662
  #final label in binaryExp
  L_9662: 
  #jumpToAllOnlyIf
  L_9661:
  move $v0, $s1
  beqz $v0, L_9660
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9669: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_6_32
  move $s4, $v0
  L_9670: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9668
  j L_9668
  #final label in binaryExp
  L_9668: 
  #final label in codeGenAssignmentExpression
  L_9667: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9666: 
  #final label in statem expression
  L_9665: 
  #if finish label = 9660
  L_9660:
  #if finish label = 9638
  L_9638:
  j L_9577
  #inside else
  L_9579:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9675: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_9676: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9674
  j L_9674
  #final label in binaryExp
  L_9674: 
  #jumpToAllOnlyIf
  L_9672:
  move $v0, $s1
  beqz $v0, L_9673
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9680: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9681: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9679
  j L_9679
  #final label in binaryExp
  L_9679: 
  #jumpToAllOnlyIf
  L_9678:
  move $v0, $s1
  beqz $v0, L_9677
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_9685: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9686: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9684
  j L_9684
  #final label in binaryExp
  L_9684: 
  #jumpToAllOnlyIf
  L_9683:
  move $v0, $s1
  beqz $v0, L_9682
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9691: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_5_11
  move $s4, $v0
  L_9692: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9690
  j L_9690
  #final label in binaryExp
  L_9690: 
  #final label in codeGenAssignmentExpression
  L_9689: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9688: 
  #final label in statem expression
  L_9687: 
  #if finish label = 9682
  L_9682:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9697: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_6_12
  move $s4, $v0
  L_9698: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9696
  j L_9696
  #final label in binaryExp
  L_9696: 
  #final label in codeGenAssignmentExpression
  L_9695: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9694: 
  #final label in statem expression
  L_9693: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_9702: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9703: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9701
  j L_9701
  #final label in binaryExp
  L_9701: 
  #jumpToAllOnlyIf
  L_9700:
  move $v0, $s1
  beqz $v0, L_9699
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9708: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_7_13
  move $s4, $v0
  L_9709: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9707
  j L_9707
  #final label in binaryExp
  L_9707: 
  #final label in codeGenAssignmentExpression
  L_9706: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9705: 
  #final label in statem expression
  L_9704: 
  #if finish label = 9699
  L_9699:
  #if finish label = 9677
  L_9677:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_9713: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9714: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9712
  j L_9712
  #final label in binaryExp
  L_9712: 
  #jumpToAllOnlyIf
  L_9711:
  move $v0, $s1
  beqz $v0, L_9710
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9719: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_5_21
  move $s4, $v0
  L_9720: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9718
  j L_9718
  #final label in binaryExp
  L_9718: 
  #final label in codeGenAssignmentExpression
  L_9717: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9716: 
  #final label in statem expression
  L_9715: 
  #if finish label = 9710
  L_9710:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_9724: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9725: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9723
  j L_9723
  #final label in binaryExp
  L_9723: 
  #jumpToAllOnlyIf
  L_9722:
  move $v0, $s1
  beqz $v0, L_9721
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9730: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_7_23
  move $s4, $v0
  L_9731: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9729
  j L_9729
  #final label in binaryExp
  L_9729: 
  #final label in codeGenAssignmentExpression
  L_9728: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9727: 
  #final label in statem expression
  L_9726: 
  #if finish label = 9721
  L_9721:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9735: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9736: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9734
  j L_9734
  #final label in binaryExp
  L_9734: 
  #jumpToAllOnlyIf
  L_9733:
  move $v0, $s1
  beqz $v0, L_9732
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_9740: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9741: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9739
  j L_9739
  #final label in binaryExp
  L_9739: 
  #jumpToAllOnlyIf
  L_9738:
  move $v0, $s1
  beqz $v0, L_9737
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9746: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_5_31
  move $s4, $v0
  L_9747: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9745
  j L_9745
  #final label in binaryExp
  L_9745: 
  #final label in codeGenAssignmentExpression
  L_9744: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9743: 
  #final label in statem expression
  L_9742: 
  #if finish label = 9737
  L_9737:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9752: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_6_32
  move $s4, $v0
  L_9753: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9751
  j L_9751
  #final label in binaryExp
  L_9751: 
  #final label in codeGenAssignmentExpression
  L_9750: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9749: 
  #final label in statem expression
  L_9748: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_9757: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9758: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9756
  j L_9756
  #final label in binaryExp
  L_9756: 
  #jumpToAllOnlyIf
  L_9755:
  move $v0, $s1
  beqz $v0, L_9754
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9763: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_7_33
  move $s4, $v0
  L_9764: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9762
  j L_9762
  #final label in binaryExp
  L_9762: 
  #final label in codeGenAssignmentExpression
  L_9761: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9760: 
  #final label in statem expression
  L_9759: 
  #if finish label = 9754
  L_9754:
  #if finish label = 9732
  L_9732:
  j L_9671
  #inside else
  L_9673:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9769: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_9770: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9768
  j L_9768
  #final label in binaryExp
  L_9768: 
  #jumpToAllOnlyIf
  L_9766:
  move $v0, $s1
  beqz $v0, L_9767
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9774: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9775: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9773
  j L_9773
  #final label in binaryExp
  L_9773: 
  #jumpToAllOnlyIf
  L_9772:
  move $v0, $s1
  beqz $v0, L_9771
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_9779: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9780: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9778
  j L_9778
  #final label in binaryExp
  L_9778: 
  #jumpToAllOnlyIf
  L_9777:
  move $v0, $s1
  beqz $v0, L_9776
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9785: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_6_12
  move $s4, $v0
  L_9786: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9784
  j L_9784
  #final label in binaryExp
  L_9784: 
  #final label in codeGenAssignmentExpression
  L_9783: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9782: 
  #final label in statem expression
  L_9781: 
  #if finish label = 9776
  L_9776:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9791: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_7_13
  move $s4, $v0
  L_9792: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9790
  j L_9790
  #final label in binaryExp
  L_9790: 
  #final label in codeGenAssignmentExpression
  L_9789: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9788: 
  #final label in statem expression
  L_9787: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_9796: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9797: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9795
  j L_9795
  #final label in binaryExp
  L_9795: 
  #jumpToAllOnlyIf
  L_9794:
  move $v0, $s1
  beqz $v0, L_9793
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9802: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_8_14
  move $s4, $v0
  L_9803: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9801
  j L_9801
  #final label in binaryExp
  L_9801: 
  #final label in codeGenAssignmentExpression
  L_9800: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9799: 
  #final label in statem expression
  L_9798: 
  #if finish label = 9793
  L_9793:
  #if finish label = 9771
  L_9771:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_9807: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9808: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9806
  j L_9806
  #final label in binaryExp
  L_9806: 
  #jumpToAllOnlyIf
  L_9805:
  move $v0, $s1
  beqz $v0, L_9804
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9813: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_6_22
  move $s4, $v0
  L_9814: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9812
  j L_9812
  #final label in binaryExp
  L_9812: 
  #final label in codeGenAssignmentExpression
  L_9811: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9810: 
  #final label in statem expression
  L_9809: 
  #if finish label = 9804
  L_9804:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_9818: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9819: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9817
  j L_9817
  #final label in binaryExp
  L_9817: 
  #jumpToAllOnlyIf
  L_9816:
  move $v0, $s1
  beqz $v0, L_9815
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9824: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_8_24
  move $s4, $v0
  L_9825: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9823
  j L_9823
  #final label in binaryExp
  L_9823: 
  #final label in codeGenAssignmentExpression
  L_9822: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9821: 
  #final label in statem expression
  L_9820: 
  #if finish label = 9815
  L_9815:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9829: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9830: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9828
  j L_9828
  #final label in binaryExp
  L_9828: 
  #jumpToAllOnlyIf
  L_9827:
  move $v0, $s1
  beqz $v0, L_9826
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_9834: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9835: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9833
  j L_9833
  #final label in binaryExp
  L_9833: 
  #jumpToAllOnlyIf
  L_9832:
  move $v0, $s1
  beqz $v0, L_9831
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9840: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_6_32
  move $s4, $v0
  L_9841: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9839
  j L_9839
  #final label in binaryExp
  L_9839: 
  #final label in codeGenAssignmentExpression
  L_9838: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9837: 
  #final label in statem expression
  L_9836: 
  #if finish label = 9831
  L_9831:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9846: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_7_33
  move $s4, $v0
  L_9847: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9845
  j L_9845
  #final label in binaryExp
  L_9845: 
  #final label in codeGenAssignmentExpression
  L_9844: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9843: 
  #final label in statem expression
  L_9842: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_9851: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9852: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9850
  j L_9850
  #final label in binaryExp
  L_9850: 
  #jumpToAllOnlyIf
  L_9849:
  move $v0, $s1
  beqz $v0, L_9848
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9857: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_8_34
  move $s4, $v0
  L_9858: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9856
  j L_9856
  #final label in binaryExp
  L_9856: 
  #final label in codeGenAssignmentExpression
  L_9855: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9854: 
  #final label in statem expression
  L_9853: 
  #if finish label = 9848
  L_9848:
  #if finish label = 9826
  L_9826:
  j L_9765
  #inside else
  L_9767:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9863: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_9864: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9862
  j L_9862
  #final label in binaryExp
  L_9862: 
  #jumpToAllOnlyIf
  L_9860:
  move $v0, $s1
  beqz $v0, L_9861
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9868: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9869: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9867
  j L_9867
  #final label in binaryExp
  L_9867: 
  #jumpToAllOnlyIf
  L_9866:
  move $v0, $s1
  beqz $v0, L_9865
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_9873: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9874: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9872
  j L_9872
  #final label in binaryExp
  L_9872: 
  #jumpToAllOnlyIf
  L_9871:
  move $v0, $s1
  beqz $v0, L_9870
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9879: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_7_13
  move $s4, $v0
  L_9880: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9878
  j L_9878
  #final label in binaryExp
  L_9878: 
  #final label in codeGenAssignmentExpression
  L_9877: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9876: 
  #final label in statem expression
  L_9875: 
  #if finish label = 9870
  L_9870:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9885: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_8_14
  move $s4, $v0
  L_9886: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9884
  j L_9884
  #final label in binaryExp
  L_9884: 
  #final label in codeGenAssignmentExpression
  L_9883: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9882: 
  #final label in statem expression
  L_9881: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_9890: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9891: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9889
  j L_9889
  #final label in binaryExp
  L_9889: 
  #jumpToAllOnlyIf
  L_9888:
  move $v0, $s1
  beqz $v0, L_9887
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9896: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_9_15
  move $s4, $v0
  L_9897: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9895
  j L_9895
  #final label in binaryExp
  L_9895: 
  #final label in codeGenAssignmentExpression
  L_9894: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9893: 
  #final label in statem expression
  L_9892: 
  #if finish label = 9887
  L_9887:
  #if finish label = 9865
  L_9865:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_9901: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9902: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9900
  j L_9900
  #final label in binaryExp
  L_9900: 
  #jumpToAllOnlyIf
  L_9899:
  move $v0, $s1
  beqz $v0, L_9898
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9907: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_7_23
  move $s4, $v0
  L_9908: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9906
  j L_9906
  #final label in binaryExp
  L_9906: 
  #final label in codeGenAssignmentExpression
  L_9905: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9904: 
  #final label in statem expression
  L_9903: 
  #if finish label = 9898
  L_9898:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_9912: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9913: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9911
  j L_9911
  #final label in binaryExp
  L_9911: 
  #jumpToAllOnlyIf
  L_9910:
  move $v0, $s1
  beqz $v0, L_9909
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9918: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_9_25
  move $s4, $v0
  L_9919: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9917
  j L_9917
  #final label in binaryExp
  L_9917: 
  #final label in codeGenAssignmentExpression
  L_9916: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9915: 
  #final label in statem expression
  L_9914: 
  #if finish label = 9909
  L_9909:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9923: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9924: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9922
  j L_9922
  #final label in binaryExp
  L_9922: 
  #jumpToAllOnlyIf
  L_9921:
  move $v0, $s1
  beqz $v0, L_9920
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_9928: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9929: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9927
  j L_9927
  #final label in binaryExp
  L_9927: 
  #jumpToAllOnlyIf
  L_9926:
  move $v0, $s1
  beqz $v0, L_9925
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9934: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_7_33
  move $s4, $v0
  L_9935: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9933
  j L_9933
  #final label in binaryExp
  L_9933: 
  #final label in codeGenAssignmentExpression
  L_9932: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9931: 
  #final label in statem expression
  L_9930: 
  #if finish label = 9925
  L_9925:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9940: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_8_34
  move $s4, $v0
  L_9941: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9939
  j L_9939
  #final label in binaryExp
  L_9939: 
  #final label in codeGenAssignmentExpression
  L_9938: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9937: 
  #final label in statem expression
  L_9936: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_9945: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9946: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9944
  j L_9944
  #final label in binaryExp
  L_9944: 
  #jumpToAllOnlyIf
  L_9943:
  move $v0, $s1
  beqz $v0, L_9942
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9951: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_9_35
  move $s4, $v0
  L_9952: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9950
  j L_9950
  #final label in binaryExp
  L_9950: 
  #final label in codeGenAssignmentExpression
  L_9949: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9948: 
  #final label in statem expression
  L_9947: 
  #if finish label = 9942
  L_9942:
  #if finish label = 9920
  L_9920:
  j L_9859
  #inside else
  L_9861:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_9956: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9957: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9955
  j L_9955
  #final label in binaryExp
  L_9955: 
  #jumpToAllOnlyIf
  L_9954:
  move $v0, $s1
  beqz $v0, L_9953
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_9961: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9962: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9960
  j L_9960
  #final label in binaryExp
  L_9960: 
  #jumpToAllOnlyIf
  L_9959:
  move $v0, $s1
  beqz $v0, L_9958
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9966: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9967: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9965
  j L_9965
  #final label in binaryExp
  L_9965: 
  #jumpToAllOnlyIf
  L_9964:
  move $v0, $s1
  beqz $v0, L_9963
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9972: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_8_14
  move $s4, $v0
  L_9973: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9971
  j L_9971
  #final label in binaryExp
  L_9971: 
  #final label in codeGenAssignmentExpression
  L_9970: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9969: 
  #final label in statem expression
  L_9968: 
  #if finish label = 9963
  L_9963:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9978: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_0_9_15
  move $s4, $v0
  L_9979: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9977
  j L_9977
  #final label in binaryExp
  L_9977: 
  #final label in codeGenAssignmentExpression
  L_9976: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9975: 
  #final label in statem expression
  L_9974: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9983: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_9984: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9982
  j L_9982
  #final label in binaryExp
  L_9982: 
  #jumpToAllOnlyIf
  L_9981:
  move $v0, $s1
  beqz $v0, L_9980
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_9989: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_9990: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9988
  j L_9988
  #final label in binaryExp
  L_9988: 
  #final label in codeGenAssignmentExpression
  L_9987: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9986: 
  #final label in statem expression
  L_9985: 
  #if finish label = 9980
  L_9980:
  #if finish label = 9958
  L_9958:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_9994: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_9995: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_9993
  j L_9993
  #final label in binaryExp
  L_9993: 
  #jumpToAllOnlyIf
  L_9992:
  move $v0, $s1
  beqz $v0, L_9991
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10000: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_8_24
  move $s4, $v0
  L_10001: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_9999
  j L_9999
  #final label in binaryExp
  L_9999: 
  #final label in codeGenAssignmentExpression
  L_9998: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_9997: 
  #final label in statem expression
  L_9996: 
  #if finish label = 9991
  L_9991:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10005: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10006: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10004
  j L_10004
  #final label in binaryExp
  L_10004: 
  #jumpToAllOnlyIf
  L_10003:
  move $v0, $s1
  beqz $v0, L_10002
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10011: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_10012: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10010
  j L_10010
  #final label in binaryExp
  L_10010: 
  #final label in codeGenAssignmentExpression
  L_10009: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10008: 
  #final label in statem expression
  L_10007: 
  #if finish label = 10002
  L_10002:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_10016: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10017: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10015
  j L_10015
  #final label in binaryExp
  L_10015: 
  #jumpToAllOnlyIf
  L_10014:
  move $v0, $s1
  beqz $v0, L_10013
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10021: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10022: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10020
  j L_10020
  #final label in binaryExp
  L_10020: 
  #jumpToAllOnlyIf
  L_10019:
  move $v0, $s1
  beqz $v0, L_10018
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10027: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_8_34
  move $s4, $v0
  L_10028: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10026
  j L_10026
  #final label in binaryExp
  L_10026: 
  #final label in codeGenAssignmentExpression
  L_10025: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10024: 
  #final label in statem expression
  L_10023: 
  #if finish label = 10018
  L_10018:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10033: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_9_35
  move $s4, $v0
  L_10034: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10032
  j L_10032
  #final label in binaryExp
  L_10032: 
  #final label in codeGenAssignmentExpression
  L_10031: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10030: 
  #final label in statem expression
  L_10029: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10038: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10039: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10037
  j L_10037
  #final label in binaryExp
  L_10037: 
  #jumpToAllOnlyIf
  L_10036:
  move $v0, $s1
  beqz $v0, L_10035
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10044: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_10045: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10043
  j L_10043
  #final label in binaryExp
  L_10043: 
  #final label in codeGenAssignmentExpression
  L_10042: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10041: 
  #final label in statem expression
  L_10040: 
  #if finish label = 10035
  L_10035:
  #if finish label = 10013
  L_10013:
  #if finish label = 9953
  L_9953:
  #if finish label = 9859
  L_9859:
  #if finish label = 9765
  L_9765:
  #if finish label = 9671
  L_9671:
  #if finish label = 9577
  L_9577:
  #if finish label = 9483
  L_9483:
  #if finish label = 9389
  L_9389:
  #if finish label = 9295
  L_9295:
  #if finish label = 9201
  L_9201:
  #if finish label = 9107
  L_9107:
  j L_9101
  #inside else
  L_9103:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_10050: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_10051: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10049
  j L_10049
  #final label in binaryExp
  L_10049: 
  #jumpToAllOnlyIf
  L_10047:
  move $v0, $s1
  beqz $v0, L_10048
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10056: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10057: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10055
  j L_10055
  #final label in binaryExp
  L_10055: 
  #jumpToAllOnlyIf
  L_10053:
  move $v0, $s1
  beqz $v0, L_10054
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10061: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10062: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10060
  j L_10060
  #final label in binaryExp
  L_10060: 
  #jumpToAllOnlyIf
  L_10059:
  move $v0, $s1
  beqz $v0, L_10058
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_10066: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10067: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10065
  j L_10065
  #final label in binaryExp
  L_10065: 
  #jumpToAllOnlyIf
  L_10064:
  move $v0, $s1
  beqz $v0, L_10063
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10072: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_10073: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10071
  j L_10071
  #final label in binaryExp
  L_10071: 
  #final label in codeGenAssignmentExpression
  L_10070: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10069: 
  #final label in statem expression
  L_10068: 
  #if finish label = 10063
  L_10063:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10078: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_0_16
  move $s4, $v0
  L_10079: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10077
  j L_10077
  #final label in binaryExp
  L_10077: 
  #final label in codeGenAssignmentExpression
  L_10076: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10075: 
  #final label in statem expression
  L_10074: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_10083: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10084: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10082
  j L_10082
  #final label in binaryExp
  L_10082: 
  #jumpToAllOnlyIf
  L_10081:
  move $v0, $s1
  beqz $v0, L_10080
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10089: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_1_17
  move $s4, $v0
  L_10090: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10088
  j L_10088
  #final label in binaryExp
  L_10088: 
  #final label in codeGenAssignmentExpression
  L_10087: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10086: 
  #final label in statem expression
  L_10085: 
  #if finish label = 10080
  L_10080:
  #if finish label = 10058
  L_10058:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_10094: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10095: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10093
  j L_10093
  #final label in binaryExp
  L_10093: 
  #jumpToAllOnlyIf
  L_10092:
  move $v0, $s1
  beqz $v0, L_10091
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10100: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_10101: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10099
  j L_10099
  #final label in binaryExp
  L_10099: 
  #final label in codeGenAssignmentExpression
  L_10098: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10097: 
  #final label in statem expression
  L_10096: 
  #if finish label = 10091
  L_10091:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_10105: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10106: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10104
  j L_10104
  #final label in binaryExp
  L_10104: 
  #jumpToAllOnlyIf
  L_10103:
  move $v0, $s1
  beqz $v0, L_10102
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10111: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_1_27
  move $s4, $v0
  L_10112: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10110
  j L_10110
  #final label in binaryExp
  L_10110: 
  #final label in codeGenAssignmentExpression
  L_10109: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10108: 
  #final label in statem expression
  L_10107: 
  #if finish label = 10102
  L_10102:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10116: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10117: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10115
  j L_10115
  #final label in binaryExp
  L_10115: 
  #jumpToAllOnlyIf
  L_10114:
  move $v0, $s1
  beqz $v0, L_10113
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_10121: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10122: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10120
  j L_10120
  #final label in binaryExp
  L_10120: 
  #jumpToAllOnlyIf
  L_10119:
  move $v0, $s1
  beqz $v0, L_10118
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10127: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_10128: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10126
  j L_10126
  #final label in binaryExp
  L_10126: 
  #final label in codeGenAssignmentExpression
  L_10125: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10124: 
  #final label in statem expression
  L_10123: 
  #if finish label = 10118
  L_10118:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10133: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_0_36
  move $s4, $v0
  L_10134: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10132
  j L_10132
  #final label in binaryExp
  L_10132: 
  #final label in codeGenAssignmentExpression
  L_10131: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10130: 
  #final label in statem expression
  L_10129: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_10138: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10139: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10137
  j L_10137
  #final label in binaryExp
  L_10137: 
  #jumpToAllOnlyIf
  L_10136:
  move $v0, $s1
  beqz $v0, L_10135
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10144: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_1_37
  move $s4, $v0
  L_10145: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10143
  j L_10143
  #final label in binaryExp
  L_10143: 
  #final label in codeGenAssignmentExpression
  L_10142: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10141: 
  #final label in statem expression
  L_10140: 
  #if finish label = 10135
  L_10135:
  #if finish label = 10113
  L_10113:
  j L_10052
  #inside else
  L_10054:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10150: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_10151: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10149
  j L_10149
  #final label in binaryExp
  L_10149: 
  #jumpToAllOnlyIf
  L_10147:
  move $v0, $s1
  beqz $v0, L_10148
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10155: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10156: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10154
  j L_10154
  #final label in binaryExp
  L_10154: 
  #jumpToAllOnlyIf
  L_10153:
  move $v0, $s1
  beqz $v0, L_10152
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_10160: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10161: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10159
  j L_10159
  #final label in binaryExp
  L_10159: 
  #jumpToAllOnlyIf
  L_10158:
  move $v0, $s1
  beqz $v0, L_10157
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10166: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_0_16
  move $s4, $v0
  L_10167: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10165
  j L_10165
  #final label in binaryExp
  L_10165: 
  #final label in codeGenAssignmentExpression
  L_10164: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10163: 
  #final label in statem expression
  L_10162: 
  #if finish label = 10157
  L_10157:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10172: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_1_17
  move $s4, $v0
  L_10173: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10171
  j L_10171
  #final label in binaryExp
  L_10171: 
  #final label in codeGenAssignmentExpression
  L_10170: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10169: 
  #final label in statem expression
  L_10168: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_10177: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10178: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10176
  j L_10176
  #final label in binaryExp
  L_10176: 
  #jumpToAllOnlyIf
  L_10175:
  move $v0, $s1
  beqz $v0, L_10174
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10183: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_2_18
  move $s4, $v0
  L_10184: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10182
  j L_10182
  #final label in binaryExp
  L_10182: 
  #final label in codeGenAssignmentExpression
  L_10181: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10180: 
  #final label in statem expression
  L_10179: 
  #if finish label = 10174
  L_10174:
  #if finish label = 10152
  L_10152:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_10188: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10189: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10187
  j L_10187
  #final label in binaryExp
  L_10187: 
  #jumpToAllOnlyIf
  L_10186:
  move $v0, $s1
  beqz $v0, L_10185
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10194: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_0_26
  move $s4, $v0
  L_10195: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10193
  j L_10193
  #final label in binaryExp
  L_10193: 
  #final label in codeGenAssignmentExpression
  L_10192: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10191: 
  #final label in statem expression
  L_10190: 
  #if finish label = 10185
  L_10185:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_10199: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10200: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10198
  j L_10198
  #final label in binaryExp
  L_10198: 
  #jumpToAllOnlyIf
  L_10197:
  move $v0, $s1
  beqz $v0, L_10196
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10205: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_2_28
  move $s4, $v0
  L_10206: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10204
  j L_10204
  #final label in binaryExp
  L_10204: 
  #final label in codeGenAssignmentExpression
  L_10203: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10202: 
  #final label in statem expression
  L_10201: 
  #if finish label = 10196
  L_10196:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10210: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10211: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10209
  j L_10209
  #final label in binaryExp
  L_10209: 
  #jumpToAllOnlyIf
  L_10208:
  move $v0, $s1
  beqz $v0, L_10207
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_10215: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10216: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10214
  j L_10214
  #final label in binaryExp
  L_10214: 
  #jumpToAllOnlyIf
  L_10213:
  move $v0, $s1
  beqz $v0, L_10212
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10221: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_0_36
  move $s4, $v0
  L_10222: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10220
  j L_10220
  #final label in binaryExp
  L_10220: 
  #final label in codeGenAssignmentExpression
  L_10219: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10218: 
  #final label in statem expression
  L_10217: 
  #if finish label = 10212
  L_10212:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10227: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_1_37
  move $s4, $v0
  L_10228: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10226
  j L_10226
  #final label in binaryExp
  L_10226: 
  #final label in codeGenAssignmentExpression
  L_10225: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10224: 
  #final label in statem expression
  L_10223: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_10232: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10233: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10231
  j L_10231
  #final label in binaryExp
  L_10231: 
  #jumpToAllOnlyIf
  L_10230:
  move $v0, $s1
  beqz $v0, L_10229
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10238: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_2_38
  move $s4, $v0
  L_10239: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10237
  j L_10237
  #final label in binaryExp
  L_10237: 
  #final label in codeGenAssignmentExpression
  L_10236: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10235: 
  #final label in statem expression
  L_10234: 
  #if finish label = 10229
  L_10229:
  #if finish label = 10207
  L_10207:
  j L_10146
  #inside else
  L_10148:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10244: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_10245: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10243
  j L_10243
  #final label in binaryExp
  L_10243: 
  #jumpToAllOnlyIf
  L_10241:
  move $v0, $s1
  beqz $v0, L_10242
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10249: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10250: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10248
  j L_10248
  #final label in binaryExp
  L_10248: 
  #jumpToAllOnlyIf
  L_10247:
  move $v0, $s1
  beqz $v0, L_10246
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10254: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10255: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10253
  j L_10253
  #final label in binaryExp
  L_10253: 
  #jumpToAllOnlyIf
  L_10252:
  move $v0, $s1
  beqz $v0, L_10251
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10260: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_1_17
  move $s4, $v0
  L_10261: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10259
  j L_10259
  #final label in binaryExp
  L_10259: 
  #final label in codeGenAssignmentExpression
  L_10258: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10257: 
  #final label in statem expression
  L_10256: 
  #if finish label = 10251
  L_10251:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10266: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_2_18
  move $s4, $v0
  L_10267: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10265
  j L_10265
  #final label in binaryExp
  L_10265: 
  #final label in codeGenAssignmentExpression
  L_10264: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10263: 
  #final label in statem expression
  L_10262: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10271: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10272: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10270
  j L_10270
  #final label in binaryExp
  L_10270: 
  #jumpToAllOnlyIf
  L_10269:
  move $v0, $s1
  beqz $v0, L_10268
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10277: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_3_19
  move $s4, $v0
  L_10278: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10276
  j L_10276
  #final label in binaryExp
  L_10276: 
  #final label in codeGenAssignmentExpression
  L_10275: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10274: 
  #final label in statem expression
  L_10273: 
  #if finish label = 10268
  L_10268:
  #if finish label = 10246
  L_10246:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10282: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10283: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10281
  j L_10281
  #final label in binaryExp
  L_10281: 
  #jumpToAllOnlyIf
  L_10280:
  move $v0, $s1
  beqz $v0, L_10279
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10288: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_1_27
  move $s4, $v0
  L_10289: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10287
  j L_10287
  #final label in binaryExp
  L_10287: 
  #final label in codeGenAssignmentExpression
  L_10286: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10285: 
  #final label in statem expression
  L_10284: 
  #if finish label = 10279
  L_10279:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10293: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10294: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10292
  j L_10292
  #final label in binaryExp
  L_10292: 
  #jumpToAllOnlyIf
  L_10291:
  move $v0, $s1
  beqz $v0, L_10290
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10299: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_3_29
  move $s4, $v0
  L_10300: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10298
  j L_10298
  #final label in binaryExp
  L_10298: 
  #final label in codeGenAssignmentExpression
  L_10297: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10296: 
  #final label in statem expression
  L_10295: 
  #if finish label = 10290
  L_10290:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10304: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10305: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10303
  j L_10303
  #final label in binaryExp
  L_10303: 
  #jumpToAllOnlyIf
  L_10302:
  move $v0, $s1
  beqz $v0, L_10301
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10309: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10310: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10308
  j L_10308
  #final label in binaryExp
  L_10308: 
  #jumpToAllOnlyIf
  L_10307:
  move $v0, $s1
  beqz $v0, L_10306
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10315: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_1_37
  move $s4, $v0
  L_10316: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10314
  j L_10314
  #final label in binaryExp
  L_10314: 
  #final label in codeGenAssignmentExpression
  L_10313: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10312: 
  #final label in statem expression
  L_10311: 
  #if finish label = 10306
  L_10306:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10321: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_2_38
  move $s4, $v0
  L_10322: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10320
  j L_10320
  #final label in binaryExp
  L_10320: 
  #final label in codeGenAssignmentExpression
  L_10319: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10318: 
  #final label in statem expression
  L_10317: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10326: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10327: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10325
  j L_10325
  #final label in binaryExp
  L_10325: 
  #jumpToAllOnlyIf
  L_10324:
  move $v0, $s1
  beqz $v0, L_10323
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10332: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_3_39
  move $s4, $v0
  L_10333: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10331
  j L_10331
  #final label in binaryExp
  L_10331: 
  #final label in codeGenAssignmentExpression
  L_10330: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10329: 
  #final label in statem expression
  L_10328: 
  #if finish label = 10323
  L_10323:
  #if finish label = 10301
  L_10301:
  j L_10240
  #inside else
  L_10242:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10338: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_10339: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10337
  j L_10337
  #final label in binaryExp
  L_10337: 
  #jumpToAllOnlyIf
  L_10335:
  move $v0, $s1
  beqz $v0, L_10336
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10343: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10344: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10342
  j L_10342
  #final label in binaryExp
  L_10342: 
  #jumpToAllOnlyIf
  L_10341:
  move $v0, $s1
  beqz $v0, L_10340
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_10348: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10349: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10347
  j L_10347
  #final label in binaryExp
  L_10347: 
  #jumpToAllOnlyIf
  L_10346:
  move $v0, $s1
  beqz $v0, L_10345
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10354: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_2_18
  move $s4, $v0
  L_10355: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10353
  j L_10353
  #final label in binaryExp
  L_10353: 
  #final label in codeGenAssignmentExpression
  L_10352: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10351: 
  #final label in statem expression
  L_10350: 
  #if finish label = 10345
  L_10345:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10360: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_3_19
  move $s4, $v0
  L_10361: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10359
  j L_10359
  #final label in binaryExp
  L_10359: 
  #final label in codeGenAssignmentExpression
  L_10358: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10357: 
  #final label in statem expression
  L_10356: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_10365: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10366: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10364
  j L_10364
  #final label in binaryExp
  L_10364: 
  #jumpToAllOnlyIf
  L_10363:
  move $v0, $s1
  beqz $v0, L_10362
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10371: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_4_20
  move $s4, $v0
  L_10372: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10370
  j L_10370
  #final label in binaryExp
  L_10370: 
  #final label in codeGenAssignmentExpression
  L_10369: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10368: 
  #final label in statem expression
  L_10367: 
  #if finish label = 10362
  L_10362:
  #if finish label = 10340
  L_10340:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_10376: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10377: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10375
  j L_10375
  #final label in binaryExp
  L_10375: 
  #jumpToAllOnlyIf
  L_10374:
  move $v0, $s1
  beqz $v0, L_10373
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10382: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_2_28
  move $s4, $v0
  L_10383: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10381
  j L_10381
  #final label in binaryExp
  L_10381: 
  #final label in codeGenAssignmentExpression
  L_10380: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10379: 
  #final label in statem expression
  L_10378: 
  #if finish label = 10373
  L_10373:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_10387: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10388: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10386
  j L_10386
  #final label in binaryExp
  L_10386: 
  #jumpToAllOnlyIf
  L_10385:
  move $v0, $s1
  beqz $v0, L_10384
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10393: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_4_30
  move $s4, $v0
  L_10394: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10392
  j L_10392
  #final label in binaryExp
  L_10392: 
  #final label in codeGenAssignmentExpression
  L_10391: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10390: 
  #final label in statem expression
  L_10389: 
  #if finish label = 10384
  L_10384:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10398: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10399: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10397
  j L_10397
  #final label in binaryExp
  L_10397: 
  #jumpToAllOnlyIf
  L_10396:
  move $v0, $s1
  beqz $v0, L_10395
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_10403: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10404: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10402
  j L_10402
  #final label in binaryExp
  L_10402: 
  #jumpToAllOnlyIf
  L_10401:
  move $v0, $s1
  beqz $v0, L_10400
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10409: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_2_38
  move $s4, $v0
  L_10410: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10408
  j L_10408
  #final label in binaryExp
  L_10408: 
  #final label in codeGenAssignmentExpression
  L_10407: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10406: 
  #final label in statem expression
  L_10405: 
  #if finish label = 10400
  L_10400:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10415: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_3_39
  move $s4, $v0
  L_10416: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10414
  j L_10414
  #final label in binaryExp
  L_10414: 
  #final label in codeGenAssignmentExpression
  L_10413: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10412: 
  #final label in statem expression
  L_10411: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_10420: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10421: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10419
  j L_10419
  #final label in binaryExp
  L_10419: 
  #jumpToAllOnlyIf
  L_10418:
  move $v0, $s1
  beqz $v0, L_10417
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10426: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_4_40
  move $s4, $v0
  L_10427: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10425
  j L_10425
  #final label in binaryExp
  L_10425: 
  #final label in codeGenAssignmentExpression
  L_10424: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10423: 
  #final label in statem expression
  L_10422: 
  #if finish label = 10417
  L_10417:
  #if finish label = 10395
  L_10395:
  j L_10334
  #inside else
  L_10336:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10432: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_10433: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10431
  j L_10431
  #final label in binaryExp
  L_10431: 
  #jumpToAllOnlyIf
  L_10429:
  move $v0, $s1
  beqz $v0, L_10430
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10437: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10438: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10436
  j L_10436
  #final label in binaryExp
  L_10436: 
  #jumpToAllOnlyIf
  L_10435:
  move $v0, $s1
  beqz $v0, L_10434
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_10442: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10443: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10441
  j L_10441
  #final label in binaryExp
  L_10441: 
  #jumpToAllOnlyIf
  L_10440:
  move $v0, $s1
  beqz $v0, L_10439
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10448: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_3_19
  move $s4, $v0
  L_10449: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10447
  j L_10447
  #final label in binaryExp
  L_10447: 
  #final label in codeGenAssignmentExpression
  L_10446: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10445: 
  #final label in statem expression
  L_10444: 
  #if finish label = 10439
  L_10439:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10454: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_4_20
  move $s4, $v0
  L_10455: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10453
  j L_10453
  #final label in binaryExp
  L_10453: 
  #final label in codeGenAssignmentExpression
  L_10452: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10451: 
  #final label in statem expression
  L_10450: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_10459: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10460: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10458
  j L_10458
  #final label in binaryExp
  L_10458: 
  #jumpToAllOnlyIf
  L_10457:
  move $v0, $s1
  beqz $v0, L_10456
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10465: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_5_21
  move $s4, $v0
  L_10466: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10464
  j L_10464
  #final label in binaryExp
  L_10464: 
  #final label in codeGenAssignmentExpression
  L_10463: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10462: 
  #final label in statem expression
  L_10461: 
  #if finish label = 10456
  L_10456:
  #if finish label = 10434
  L_10434:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_10470: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10471: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10469
  j L_10469
  #final label in binaryExp
  L_10469: 
  #jumpToAllOnlyIf
  L_10468:
  move $v0, $s1
  beqz $v0, L_10467
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10476: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_3_29
  move $s4, $v0
  L_10477: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10475
  j L_10475
  #final label in binaryExp
  L_10475: 
  #final label in codeGenAssignmentExpression
  L_10474: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10473: 
  #final label in statem expression
  L_10472: 
  #if finish label = 10467
  L_10467:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_10481: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10482: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10480
  j L_10480
  #final label in binaryExp
  L_10480: 
  #jumpToAllOnlyIf
  L_10479:
  move $v0, $s1
  beqz $v0, L_10478
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10487: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_5_31
  move $s4, $v0
  L_10488: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10486
  j L_10486
  #final label in binaryExp
  L_10486: 
  #final label in codeGenAssignmentExpression
  L_10485: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10484: 
  #final label in statem expression
  L_10483: 
  #if finish label = 10478
  L_10478:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10492: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10493: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10491
  j L_10491
  #final label in binaryExp
  L_10491: 
  #jumpToAllOnlyIf
  L_10490:
  move $v0, $s1
  beqz $v0, L_10489
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_10497: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10498: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10496
  j L_10496
  #final label in binaryExp
  L_10496: 
  #jumpToAllOnlyIf
  L_10495:
  move $v0, $s1
  beqz $v0, L_10494
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10503: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_3_39
  move $s4, $v0
  L_10504: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10502
  j L_10502
  #final label in binaryExp
  L_10502: 
  #final label in codeGenAssignmentExpression
  L_10501: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10500: 
  #final label in statem expression
  L_10499: 
  #if finish label = 10494
  L_10494:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10509: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_4_40
  move $s4, $v0
  L_10510: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10508
  j L_10508
  #final label in binaryExp
  L_10508: 
  #final label in codeGenAssignmentExpression
  L_10507: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10506: 
  #final label in statem expression
  L_10505: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_10514: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10515: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10513
  j L_10513
  #final label in binaryExp
  L_10513: 
  #jumpToAllOnlyIf
  L_10512:
  move $v0, $s1
  beqz $v0, L_10511
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10520: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_5_41
  move $s4, $v0
  L_10521: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10519
  j L_10519
  #final label in binaryExp
  L_10519: 
  #final label in codeGenAssignmentExpression
  L_10518: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10517: 
  #final label in statem expression
  L_10516: 
  #if finish label = 10511
  L_10511:
  #if finish label = 10489
  L_10489:
  j L_10428
  #inside else
  L_10430:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10526: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_10527: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10525
  j L_10525
  #final label in binaryExp
  L_10525: 
  #jumpToAllOnlyIf
  L_10523:
  move $v0, $s1
  beqz $v0, L_10524
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10531: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10532: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10530
  j L_10530
  #final label in binaryExp
  L_10530: 
  #jumpToAllOnlyIf
  L_10529:
  move $v0, $s1
  beqz $v0, L_10528
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_10536: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10537: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10535
  j L_10535
  #final label in binaryExp
  L_10535: 
  #jumpToAllOnlyIf
  L_10534:
  move $v0, $s1
  beqz $v0, L_10533
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10542: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_4_20
  move $s4, $v0
  L_10543: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10541
  j L_10541
  #final label in binaryExp
  L_10541: 
  #final label in codeGenAssignmentExpression
  L_10540: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10539: 
  #final label in statem expression
  L_10538: 
  #if finish label = 10533
  L_10533:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10548: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_5_21
  move $s4, $v0
  L_10549: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10547
  j L_10547
  #final label in binaryExp
  L_10547: 
  #final label in codeGenAssignmentExpression
  L_10546: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10545: 
  #final label in statem expression
  L_10544: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_10553: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10554: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10552
  j L_10552
  #final label in binaryExp
  L_10552: 
  #jumpToAllOnlyIf
  L_10551:
  move $v0, $s1
  beqz $v0, L_10550
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10559: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_6_22
  move $s4, $v0
  L_10560: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10558
  j L_10558
  #final label in binaryExp
  L_10558: 
  #final label in codeGenAssignmentExpression
  L_10557: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10556: 
  #final label in statem expression
  L_10555: 
  #if finish label = 10550
  L_10550:
  #if finish label = 10528
  L_10528:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_10564: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10565: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10563
  j L_10563
  #final label in binaryExp
  L_10563: 
  #jumpToAllOnlyIf
  L_10562:
  move $v0, $s1
  beqz $v0, L_10561
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10570: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_4_30
  move $s4, $v0
  L_10571: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10569
  j L_10569
  #final label in binaryExp
  L_10569: 
  #final label in codeGenAssignmentExpression
  L_10568: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10567: 
  #final label in statem expression
  L_10566: 
  #if finish label = 10561
  L_10561:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_10575: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10576: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10574
  j L_10574
  #final label in binaryExp
  L_10574: 
  #jumpToAllOnlyIf
  L_10573:
  move $v0, $s1
  beqz $v0, L_10572
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10581: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_6_32
  move $s4, $v0
  L_10582: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10580
  j L_10580
  #final label in binaryExp
  L_10580: 
  #final label in codeGenAssignmentExpression
  L_10579: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10578: 
  #final label in statem expression
  L_10577: 
  #if finish label = 10572
  L_10572:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10586: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10587: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10585
  j L_10585
  #final label in binaryExp
  L_10585: 
  #jumpToAllOnlyIf
  L_10584:
  move $v0, $s1
  beqz $v0, L_10583
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_10591: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10592: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10590
  j L_10590
  #final label in binaryExp
  L_10590: 
  #jumpToAllOnlyIf
  L_10589:
  move $v0, $s1
  beqz $v0, L_10588
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10597: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_4_40
  move $s4, $v0
  L_10598: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10596
  j L_10596
  #final label in binaryExp
  L_10596: 
  #final label in codeGenAssignmentExpression
  L_10595: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10594: 
  #final label in statem expression
  L_10593: 
  #if finish label = 10588
  L_10588:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10603: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_5_41
  move $s4, $v0
  L_10604: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10602
  j L_10602
  #final label in binaryExp
  L_10602: 
  #final label in codeGenAssignmentExpression
  L_10601: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10600: 
  #final label in statem expression
  L_10599: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_10608: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10609: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10607
  j L_10607
  #final label in binaryExp
  L_10607: 
  #jumpToAllOnlyIf
  L_10606:
  move $v0, $s1
  beqz $v0, L_10605
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10614: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_6_42
  move $s4, $v0
  L_10615: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10613
  j L_10613
  #final label in binaryExp
  L_10613: 
  #final label in codeGenAssignmentExpression
  L_10612: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10611: 
  #final label in statem expression
  L_10610: 
  #if finish label = 10605
  L_10605:
  #if finish label = 10583
  L_10583:
  j L_10522
  #inside else
  L_10524:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10620: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_10621: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10619
  j L_10619
  #final label in binaryExp
  L_10619: 
  #jumpToAllOnlyIf
  L_10617:
  move $v0, $s1
  beqz $v0, L_10618
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10625: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10626: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10624
  j L_10624
  #final label in binaryExp
  L_10624: 
  #jumpToAllOnlyIf
  L_10623:
  move $v0, $s1
  beqz $v0, L_10622
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_10630: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10631: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10629
  j L_10629
  #final label in binaryExp
  L_10629: 
  #jumpToAllOnlyIf
  L_10628:
  move $v0, $s1
  beqz $v0, L_10627
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10636: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_5_21
  move $s4, $v0
  L_10637: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10635
  j L_10635
  #final label in binaryExp
  L_10635: 
  #final label in codeGenAssignmentExpression
  L_10634: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10633: 
  #final label in statem expression
  L_10632: 
  #if finish label = 10627
  L_10627:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10642: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_6_22
  move $s4, $v0
  L_10643: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10641
  j L_10641
  #final label in binaryExp
  L_10641: 
  #final label in codeGenAssignmentExpression
  L_10640: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10639: 
  #final label in statem expression
  L_10638: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_10647: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10648: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10646
  j L_10646
  #final label in binaryExp
  L_10646: 
  #jumpToAllOnlyIf
  L_10645:
  move $v0, $s1
  beqz $v0, L_10644
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10653: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_7_23
  move $s4, $v0
  L_10654: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10652
  j L_10652
  #final label in binaryExp
  L_10652: 
  #final label in codeGenAssignmentExpression
  L_10651: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10650: 
  #final label in statem expression
  L_10649: 
  #if finish label = 10644
  L_10644:
  #if finish label = 10622
  L_10622:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_10658: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10659: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10657
  j L_10657
  #final label in binaryExp
  L_10657: 
  #jumpToAllOnlyIf
  L_10656:
  move $v0, $s1
  beqz $v0, L_10655
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10664: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_5_31
  move $s4, $v0
  L_10665: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10663
  j L_10663
  #final label in binaryExp
  L_10663: 
  #final label in codeGenAssignmentExpression
  L_10662: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10661: 
  #final label in statem expression
  L_10660: 
  #if finish label = 10655
  L_10655:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_10669: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10670: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10668
  j L_10668
  #final label in binaryExp
  L_10668: 
  #jumpToAllOnlyIf
  L_10667:
  move $v0, $s1
  beqz $v0, L_10666
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10675: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_7_33
  move $s4, $v0
  L_10676: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10674
  j L_10674
  #final label in binaryExp
  L_10674: 
  #final label in codeGenAssignmentExpression
  L_10673: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10672: 
  #final label in statem expression
  L_10671: 
  #if finish label = 10666
  L_10666:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10680: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10681: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10679
  j L_10679
  #final label in binaryExp
  L_10679: 
  #jumpToAllOnlyIf
  L_10678:
  move $v0, $s1
  beqz $v0, L_10677
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_10685: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10686: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10684
  j L_10684
  #final label in binaryExp
  L_10684: 
  #jumpToAllOnlyIf
  L_10683:
  move $v0, $s1
  beqz $v0, L_10682
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10691: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_5_41
  move $s4, $v0
  L_10692: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10690
  j L_10690
  #final label in binaryExp
  L_10690: 
  #final label in codeGenAssignmentExpression
  L_10689: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10688: 
  #final label in statem expression
  L_10687: 
  #if finish label = 10682
  L_10682:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10697: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_6_42
  move $s4, $v0
  L_10698: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10696
  j L_10696
  #final label in binaryExp
  L_10696: 
  #final label in codeGenAssignmentExpression
  L_10695: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10694: 
  #final label in statem expression
  L_10693: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_10702: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10703: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10701
  j L_10701
  #final label in binaryExp
  L_10701: 
  #jumpToAllOnlyIf
  L_10700:
  move $v0, $s1
  beqz $v0, L_10699
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10708: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_7_43
  move $s4, $v0
  L_10709: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10707
  j L_10707
  #final label in binaryExp
  L_10707: 
  #final label in codeGenAssignmentExpression
  L_10706: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10705: 
  #final label in statem expression
  L_10704: 
  #if finish label = 10699
  L_10699:
  #if finish label = 10677
  L_10677:
  j L_10616
  #inside else
  L_10618:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10714: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_10715: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10713
  j L_10713
  #final label in binaryExp
  L_10713: 
  #jumpToAllOnlyIf
  L_10711:
  move $v0, $s1
  beqz $v0, L_10712
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10719: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10720: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10718
  j L_10718
  #final label in binaryExp
  L_10718: 
  #jumpToAllOnlyIf
  L_10717:
  move $v0, $s1
  beqz $v0, L_10716
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_10724: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10725: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10723
  j L_10723
  #final label in binaryExp
  L_10723: 
  #jumpToAllOnlyIf
  L_10722:
  move $v0, $s1
  beqz $v0, L_10721
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10730: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_6_22
  move $s4, $v0
  L_10731: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10729
  j L_10729
  #final label in binaryExp
  L_10729: 
  #final label in codeGenAssignmentExpression
  L_10728: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10727: 
  #final label in statem expression
  L_10726: 
  #if finish label = 10721
  L_10721:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10736: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_7_23
  move $s4, $v0
  L_10737: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10735
  j L_10735
  #final label in binaryExp
  L_10735: 
  #final label in codeGenAssignmentExpression
  L_10734: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10733: 
  #final label in statem expression
  L_10732: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_10741: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10742: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10740
  j L_10740
  #final label in binaryExp
  L_10740: 
  #jumpToAllOnlyIf
  L_10739:
  move $v0, $s1
  beqz $v0, L_10738
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10747: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_8_24
  move $s4, $v0
  L_10748: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10746
  j L_10746
  #final label in binaryExp
  L_10746: 
  #final label in codeGenAssignmentExpression
  L_10745: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10744: 
  #final label in statem expression
  L_10743: 
  #if finish label = 10738
  L_10738:
  #if finish label = 10716
  L_10716:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_10752: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10753: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10751
  j L_10751
  #final label in binaryExp
  L_10751: 
  #jumpToAllOnlyIf
  L_10750:
  move $v0, $s1
  beqz $v0, L_10749
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10758: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_6_32
  move $s4, $v0
  L_10759: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10757
  j L_10757
  #final label in binaryExp
  L_10757: 
  #final label in codeGenAssignmentExpression
  L_10756: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10755: 
  #final label in statem expression
  L_10754: 
  #if finish label = 10749
  L_10749:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_10763: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10764: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10762
  j L_10762
  #final label in binaryExp
  L_10762: 
  #jumpToAllOnlyIf
  L_10761:
  move $v0, $s1
  beqz $v0, L_10760
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10769: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_8_34
  move $s4, $v0
  L_10770: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10768
  j L_10768
  #final label in binaryExp
  L_10768: 
  #final label in codeGenAssignmentExpression
  L_10767: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10766: 
  #final label in statem expression
  L_10765: 
  #if finish label = 10760
  L_10760:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10774: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10775: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10773
  j L_10773
  #final label in binaryExp
  L_10773: 
  #jumpToAllOnlyIf
  L_10772:
  move $v0, $s1
  beqz $v0, L_10771
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_10779: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10780: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10778
  j L_10778
  #final label in binaryExp
  L_10778: 
  #jumpToAllOnlyIf
  L_10777:
  move $v0, $s1
  beqz $v0, L_10776
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10785: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_6_42
  move $s4, $v0
  L_10786: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10784
  j L_10784
  #final label in binaryExp
  L_10784: 
  #final label in codeGenAssignmentExpression
  L_10783: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10782: 
  #final label in statem expression
  L_10781: 
  #if finish label = 10776
  L_10776:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10791: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_7_43
  move $s4, $v0
  L_10792: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10790
  j L_10790
  #final label in binaryExp
  L_10790: 
  #final label in codeGenAssignmentExpression
  L_10789: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10788: 
  #final label in statem expression
  L_10787: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_10796: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10797: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10795
  j L_10795
  #final label in binaryExp
  L_10795: 
  #jumpToAllOnlyIf
  L_10794:
  move $v0, $s1
  beqz $v0, L_10793
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10802: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_8_44
  move $s4, $v0
  L_10803: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10801
  j L_10801
  #final label in binaryExp
  L_10801: 
  #final label in codeGenAssignmentExpression
  L_10800: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10799: 
  #final label in statem expression
  L_10798: 
  #if finish label = 10793
  L_10793:
  #if finish label = 10771
  L_10771:
  j L_10710
  #inside else
  L_10712:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10808: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_10809: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10807
  j L_10807
  #final label in binaryExp
  L_10807: 
  #jumpToAllOnlyIf
  L_10805:
  move $v0, $s1
  beqz $v0, L_10806
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10813: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10814: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10812
  j L_10812
  #final label in binaryExp
  L_10812: 
  #jumpToAllOnlyIf
  L_10811:
  move $v0, $s1
  beqz $v0, L_10810
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_10818: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10819: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10817
  j L_10817
  #final label in binaryExp
  L_10817: 
  #jumpToAllOnlyIf
  L_10816:
  move $v0, $s1
  beqz $v0, L_10815
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10824: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_7_23
  move $s4, $v0
  L_10825: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10823
  j L_10823
  #final label in binaryExp
  L_10823: 
  #final label in codeGenAssignmentExpression
  L_10822: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10821: 
  #final label in statem expression
  L_10820: 
  #if finish label = 10815
  L_10815:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10830: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_8_24
  move $s4, $v0
  L_10831: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10829
  j L_10829
  #final label in binaryExp
  L_10829: 
  #final label in codeGenAssignmentExpression
  L_10828: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10827: 
  #final label in statem expression
  L_10826: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_10835: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10836: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10834
  j L_10834
  #final label in binaryExp
  L_10834: 
  #jumpToAllOnlyIf
  L_10833:
  move $v0, $s1
  beqz $v0, L_10832
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10841: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_9_25
  move $s4, $v0
  L_10842: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10840
  j L_10840
  #final label in binaryExp
  L_10840: 
  #final label in codeGenAssignmentExpression
  L_10839: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10838: 
  #final label in statem expression
  L_10837: 
  #if finish label = 10832
  L_10832:
  #if finish label = 10810
  L_10810:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_10846: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10847: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10845
  j L_10845
  #final label in binaryExp
  L_10845: 
  #jumpToAllOnlyIf
  L_10844:
  move $v0, $s1
  beqz $v0, L_10843
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10852: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_7_33
  move $s4, $v0
  L_10853: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10851
  j L_10851
  #final label in binaryExp
  L_10851: 
  #final label in codeGenAssignmentExpression
  L_10850: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10849: 
  #final label in statem expression
  L_10848: 
  #if finish label = 10843
  L_10843:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_10857: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10858: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10856
  j L_10856
  #final label in binaryExp
  L_10856: 
  #jumpToAllOnlyIf
  L_10855:
  move $v0, $s1
  beqz $v0, L_10854
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10863: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_9_35
  move $s4, $v0
  L_10864: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10862
  j L_10862
  #final label in binaryExp
  L_10862: 
  #final label in codeGenAssignmentExpression
  L_10861: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10860: 
  #final label in statem expression
  L_10859: 
  #if finish label = 10854
  L_10854:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10868: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10869: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10867
  j L_10867
  #final label in binaryExp
  L_10867: 
  #jumpToAllOnlyIf
  L_10866:
  move $v0, $s1
  beqz $v0, L_10865
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_10873: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10874: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10872
  j L_10872
  #final label in binaryExp
  L_10872: 
  #jumpToAllOnlyIf
  L_10871:
  move $v0, $s1
  beqz $v0, L_10870
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10879: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_7_43
  move $s4, $v0
  L_10880: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10878
  j L_10878
  #final label in binaryExp
  L_10878: 
  #final label in codeGenAssignmentExpression
  L_10877: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10876: 
  #final label in statem expression
  L_10875: 
  #if finish label = 10870
  L_10870:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10885: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_8_44
  move $s4, $v0
  L_10886: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10884
  j L_10884
  #final label in binaryExp
  L_10884: 
  #final label in codeGenAssignmentExpression
  L_10883: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10882: 
  #final label in statem expression
  L_10881: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_10890: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10891: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10889
  j L_10889
  #final label in binaryExp
  L_10889: 
  #jumpToAllOnlyIf
  L_10888:
  move $v0, $s1
  beqz $v0, L_10887
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10896: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_9_45
  move $s4, $v0
  L_10897: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10895
  j L_10895
  #final label in binaryExp
  L_10895: 
  #final label in codeGenAssignmentExpression
  L_10894: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10893: 
  #final label in statem expression
  L_10892: 
  #if finish label = 10887
  L_10887:
  #if finish label = 10865
  L_10865:
  j L_10804
  #inside else
  L_10806:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_10901: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10902: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10900
  j L_10900
  #final label in binaryExp
  L_10900: 
  #jumpToAllOnlyIf
  L_10899:
  move $v0, $s1
  beqz $v0, L_10898
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10906: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10907: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10905
  j L_10905
  #final label in binaryExp
  L_10905: 
  #jumpToAllOnlyIf
  L_10904:
  move $v0, $s1
  beqz $v0, L_10903
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10911: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10912: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10910
  j L_10910
  #final label in binaryExp
  L_10910: 
  #jumpToAllOnlyIf
  L_10909:
  move $v0, $s1
  beqz $v0, L_10908
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10917: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_8_24
  move $s4, $v0
  L_10918: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10916
  j L_10916
  #final label in binaryExp
  L_10916: 
  #final label in codeGenAssignmentExpression
  L_10915: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10914: 
  #final label in statem expression
  L_10913: 
  #if finish label = 10908
  L_10908:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10923: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_1_9_25
  move $s4, $v0
  L_10924: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10922
  j L_10922
  #final label in binaryExp
  L_10922: 
  #final label in codeGenAssignmentExpression
  L_10921: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10920: 
  #final label in statem expression
  L_10919: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10928: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10929: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10927
  j L_10927
  #final label in binaryExp
  L_10927: 
  #jumpToAllOnlyIf
  L_10926:
  move $v0, $s1
  beqz $v0, L_10925
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10934: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_10935: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10933
  j L_10933
  #final label in binaryExp
  L_10933: 
  #final label in codeGenAssignmentExpression
  L_10932: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10931: 
  #final label in statem expression
  L_10930: 
  #if finish label = 10925
  L_10925:
  #if finish label = 10903
  L_10903:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10939: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10940: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10938
  j L_10938
  #final label in binaryExp
  L_10938: 
  #jumpToAllOnlyIf
  L_10937:
  move $v0, $s1
  beqz $v0, L_10936
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10945: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_8_34
  move $s4, $v0
  L_10946: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10944
  j L_10944
  #final label in binaryExp
  L_10944: 
  #final label in codeGenAssignmentExpression
  L_10943: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10942: 
  #final label in statem expression
  L_10941: 
  #if finish label = 10936
  L_10936:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10950: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10951: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10949
  j L_10949
  #final label in binaryExp
  L_10949: 
  #jumpToAllOnlyIf
  L_10948:
  move $v0, $s1
  beqz $v0, L_10947
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10956: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_10957: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10955
  j L_10955
  #final label in binaryExp
  L_10955: 
  #final label in codeGenAssignmentExpression
  L_10954: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10953: 
  #final label in statem expression
  L_10952: 
  #if finish label = 10947
  L_10947:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_10961: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10962: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10960
  j L_10960
  #final label in binaryExp
  L_10960: 
  #jumpToAllOnlyIf
  L_10959:
  move $v0, $s1
  beqz $v0, L_10958
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10966: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_10967: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10965
  j L_10965
  #final label in binaryExp
  L_10965: 
  #jumpToAllOnlyIf
  L_10964:
  move $v0, $s1
  beqz $v0, L_10963
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10972: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_8_44
  move $s4, $v0
  L_10973: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10971
  j L_10971
  #final label in binaryExp
  L_10971: 
  #final label in codeGenAssignmentExpression
  L_10970: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10969: 
  #final label in statem expression
  L_10968: 
  #if finish label = 10963
  L_10963:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10978: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_9_45
  move $s4, $v0
  L_10979: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10977
  j L_10977
  #final label in binaryExp
  L_10977: 
  #final label in codeGenAssignmentExpression
  L_10976: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10975: 
  #final label in statem expression
  L_10974: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_10983: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_10984: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10982
  j L_10982
  #final label in binaryExp
  L_10982: 
  #jumpToAllOnlyIf
  L_10981:
  move $v0, $s1
  beqz $v0, L_10980
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_10989: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_10990: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_10988
  j L_10988
  #final label in binaryExp
  L_10988: 
  #final label in codeGenAssignmentExpression
  L_10987: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_10986: 
  #final label in statem expression
  L_10985: 
  #if finish label = 10980
  L_10980:
  #if finish label = 10958
  L_10958:
  #if finish label = 10898
  L_10898:
  #if finish label = 10804
  L_10804:
  #if finish label = 10710
  L_10710:
  #if finish label = 10616
  L_10616:
  #if finish label = 10522
  L_10522:
  #if finish label = 10428
  L_10428:
  #if finish label = 10334
  L_10334:
  #if finish label = 10240
  L_10240:
  #if finish label = 10146
  L_10146:
  #if finish label = 10052
  L_10052:
  j L_10046
  #inside else
  L_10048:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_10995: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_10996: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_10994
  j L_10994
  #final label in binaryExp
  L_10994: 
  #jumpToAllOnlyIf
  L_10992:
  move $v0, $s1
  beqz $v0, L_10993
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11001: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11002: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11000
  j L_11000
  #final label in binaryExp
  L_11000: 
  #jumpToAllOnlyIf
  L_10998:
  move $v0, $s1
  beqz $v0, L_10999
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11006: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11007: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11005
  j L_11005
  #final label in binaryExp
  L_11005: 
  #jumpToAllOnlyIf
  L_11004:
  move $v0, $s1
  beqz $v0, L_11003
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11011: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11012: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11010
  j L_11010
  #final label in binaryExp
  L_11010: 
  #jumpToAllOnlyIf
  L_11009:
  move $v0, $s1
  beqz $v0, L_11008
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11017: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_11018: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11016
  j L_11016
  #final label in binaryExp
  L_11016: 
  #final label in codeGenAssignmentExpression
  L_11015: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11014: 
  #final label in statem expression
  L_11013: 
  #if finish label = 11008
  L_11008:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11023: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_0_26
  move $s4, $v0
  L_11024: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11022
  j L_11022
  #final label in binaryExp
  L_11022: 
  #final label in codeGenAssignmentExpression
  L_11021: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11020: 
  #final label in statem expression
  L_11019: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11028: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11029: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11027
  j L_11027
  #final label in binaryExp
  L_11027: 
  #jumpToAllOnlyIf
  L_11026:
  move $v0, $s1
  beqz $v0, L_11025
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11034: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_1_27
  move $s4, $v0
  L_11035: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11033
  j L_11033
  #final label in binaryExp
  L_11033: 
  #final label in codeGenAssignmentExpression
  L_11032: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11031: 
  #final label in statem expression
  L_11030: 
  #if finish label = 11025
  L_11025:
  #if finish label = 11003
  L_11003:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11039: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11040: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11038
  j L_11038
  #final label in binaryExp
  L_11038: 
  #jumpToAllOnlyIf
  L_11037:
  move $v0, $s1
  beqz $v0, L_11036
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11045: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_11046: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11044
  j L_11044
  #final label in binaryExp
  L_11044: 
  #final label in codeGenAssignmentExpression
  L_11043: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11042: 
  #final label in statem expression
  L_11041: 
  #if finish label = 11036
  L_11036:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11050: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11051: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11049
  j L_11049
  #final label in binaryExp
  L_11049: 
  #jumpToAllOnlyIf
  L_11048:
  move $v0, $s1
  beqz $v0, L_11047
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11056: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_1_37
  move $s4, $v0
  L_11057: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11055
  j L_11055
  #final label in binaryExp
  L_11055: 
  #final label in codeGenAssignmentExpression
  L_11054: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11053: 
  #final label in statem expression
  L_11052: 
  #if finish label = 11047
  L_11047:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11061: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11062: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11060
  j L_11060
  #final label in binaryExp
  L_11060: 
  #jumpToAllOnlyIf
  L_11059:
  move $v0, $s1
  beqz $v0, L_11058
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11066: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11067: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11065
  j L_11065
  #final label in binaryExp
  L_11065: 
  #jumpToAllOnlyIf
  L_11064:
  move $v0, $s1
  beqz $v0, L_11063
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11072: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_11073: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11071
  j L_11071
  #final label in binaryExp
  L_11071: 
  #final label in codeGenAssignmentExpression
  L_11070: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11069: 
  #final label in statem expression
  L_11068: 
  #if finish label = 11063
  L_11063:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11078: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_0_46
  move $s4, $v0
  L_11079: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11077
  j L_11077
  #final label in binaryExp
  L_11077: 
  #final label in codeGenAssignmentExpression
  L_11076: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11075: 
  #final label in statem expression
  L_11074: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11083: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11084: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11082
  j L_11082
  #final label in binaryExp
  L_11082: 
  #jumpToAllOnlyIf
  L_11081:
  move $v0, $s1
  beqz $v0, L_11080
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11089: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_1_47
  move $s4, $v0
  L_11090: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11088
  j L_11088
  #final label in binaryExp
  L_11088: 
  #final label in codeGenAssignmentExpression
  L_11087: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11086: 
  #final label in statem expression
  L_11085: 
  #if finish label = 11080
  L_11080:
  #if finish label = 11058
  L_11058:
  j L_10997
  #inside else
  L_10999:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11095: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_11096: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11094
  j L_11094
  #final label in binaryExp
  L_11094: 
  #jumpToAllOnlyIf
  L_11092:
  move $v0, $s1
  beqz $v0, L_11093
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11100: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11101: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11099
  j L_11099
  #final label in binaryExp
  L_11099: 
  #jumpToAllOnlyIf
  L_11098:
  move $v0, $s1
  beqz $v0, L_11097
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_11105: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11106: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11104
  j L_11104
  #final label in binaryExp
  L_11104: 
  #jumpToAllOnlyIf
  L_11103:
  move $v0, $s1
  beqz $v0, L_11102
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11111: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_0_26
  move $s4, $v0
  L_11112: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11110
  j L_11110
  #final label in binaryExp
  L_11110: 
  #final label in codeGenAssignmentExpression
  L_11109: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11108: 
  #final label in statem expression
  L_11107: 
  #if finish label = 11102
  L_11102:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11117: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_1_27
  move $s4, $v0
  L_11118: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11116
  j L_11116
  #final label in binaryExp
  L_11116: 
  #final label in codeGenAssignmentExpression
  L_11115: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11114: 
  #final label in statem expression
  L_11113: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_11122: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11123: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11121
  j L_11121
  #final label in binaryExp
  L_11121: 
  #jumpToAllOnlyIf
  L_11120:
  move $v0, $s1
  beqz $v0, L_11119
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11128: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_2_28
  move $s4, $v0
  L_11129: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11127
  j L_11127
  #final label in binaryExp
  L_11127: 
  #final label in codeGenAssignmentExpression
  L_11126: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11125: 
  #final label in statem expression
  L_11124: 
  #if finish label = 11119
  L_11119:
  #if finish label = 11097
  L_11097:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_11133: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11134: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11132
  j L_11132
  #final label in binaryExp
  L_11132: 
  #jumpToAllOnlyIf
  L_11131:
  move $v0, $s1
  beqz $v0, L_11130
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11139: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_0_36
  move $s4, $v0
  L_11140: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11138
  j L_11138
  #final label in binaryExp
  L_11138: 
  #final label in codeGenAssignmentExpression
  L_11137: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11136: 
  #final label in statem expression
  L_11135: 
  #if finish label = 11130
  L_11130:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_11144: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11145: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11143
  j L_11143
  #final label in binaryExp
  L_11143: 
  #jumpToAllOnlyIf
  L_11142:
  move $v0, $s1
  beqz $v0, L_11141
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11150: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_2_38
  move $s4, $v0
  L_11151: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11149
  j L_11149
  #final label in binaryExp
  L_11149: 
  #final label in codeGenAssignmentExpression
  L_11148: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11147: 
  #final label in statem expression
  L_11146: 
  #if finish label = 11141
  L_11141:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11155: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11156: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11154
  j L_11154
  #final label in binaryExp
  L_11154: 
  #jumpToAllOnlyIf
  L_11153:
  move $v0, $s1
  beqz $v0, L_11152
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_11160: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11161: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11159
  j L_11159
  #final label in binaryExp
  L_11159: 
  #jumpToAllOnlyIf
  L_11158:
  move $v0, $s1
  beqz $v0, L_11157
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11166: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_0_46
  move $s4, $v0
  L_11167: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11165
  j L_11165
  #final label in binaryExp
  L_11165: 
  #final label in codeGenAssignmentExpression
  L_11164: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11163: 
  #final label in statem expression
  L_11162: 
  #if finish label = 11157
  L_11157:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11172: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_1_47
  move $s4, $v0
  L_11173: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11171
  j L_11171
  #final label in binaryExp
  L_11171: 
  #final label in codeGenAssignmentExpression
  L_11170: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11169: 
  #final label in statem expression
  L_11168: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_11177: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11178: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11176
  j L_11176
  #final label in binaryExp
  L_11176: 
  #jumpToAllOnlyIf
  L_11175:
  move $v0, $s1
  beqz $v0, L_11174
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11183: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_2_48
  move $s4, $v0
  L_11184: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11182
  j L_11182
  #final label in binaryExp
  L_11182: 
  #final label in codeGenAssignmentExpression
  L_11181: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11180: 
  #final label in statem expression
  L_11179: 
  #if finish label = 11174
  L_11174:
  #if finish label = 11152
  L_11152:
  j L_11091
  #inside else
  L_11093:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11189: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_11190: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11188
  j L_11188
  #final label in binaryExp
  L_11188: 
  #jumpToAllOnlyIf
  L_11186:
  move $v0, $s1
  beqz $v0, L_11187
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11194: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11195: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11193
  j L_11193
  #final label in binaryExp
  L_11193: 
  #jumpToAllOnlyIf
  L_11192:
  move $v0, $s1
  beqz $v0, L_11191
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_11199: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11200: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11198
  j L_11198
  #final label in binaryExp
  L_11198: 
  #jumpToAllOnlyIf
  L_11197:
  move $v0, $s1
  beqz $v0, L_11196
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11205: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_1_27
  move $s4, $v0
  L_11206: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11204
  j L_11204
  #final label in binaryExp
  L_11204: 
  #final label in codeGenAssignmentExpression
  L_11203: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11202: 
  #final label in statem expression
  L_11201: 
  #if finish label = 11196
  L_11196:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11211: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_2_28
  move $s4, $v0
  L_11212: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11210
  j L_11210
  #final label in binaryExp
  L_11210: 
  #final label in codeGenAssignmentExpression
  L_11209: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11208: 
  #final label in statem expression
  L_11207: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_11216: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11217: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11215
  j L_11215
  #final label in binaryExp
  L_11215: 
  #jumpToAllOnlyIf
  L_11214:
  move $v0, $s1
  beqz $v0, L_11213
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11222: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_3_29
  move $s4, $v0
  L_11223: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11221
  j L_11221
  #final label in binaryExp
  L_11221: 
  #final label in codeGenAssignmentExpression
  L_11220: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11219: 
  #final label in statem expression
  L_11218: 
  #if finish label = 11213
  L_11213:
  #if finish label = 11191
  L_11191:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_11227: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11228: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11226
  j L_11226
  #final label in binaryExp
  L_11226: 
  #jumpToAllOnlyIf
  L_11225:
  move $v0, $s1
  beqz $v0, L_11224
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11233: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_1_37
  move $s4, $v0
  L_11234: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11232
  j L_11232
  #final label in binaryExp
  L_11232: 
  #final label in codeGenAssignmentExpression
  L_11231: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11230: 
  #final label in statem expression
  L_11229: 
  #if finish label = 11224
  L_11224:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_11238: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11239: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11237
  j L_11237
  #final label in binaryExp
  L_11237: 
  #jumpToAllOnlyIf
  L_11236:
  move $v0, $s1
  beqz $v0, L_11235
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11244: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_3_39
  move $s4, $v0
  L_11245: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11243
  j L_11243
  #final label in binaryExp
  L_11243: 
  #final label in codeGenAssignmentExpression
  L_11242: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11241: 
  #final label in statem expression
  L_11240: 
  #if finish label = 11235
  L_11235:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11249: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11250: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11248
  j L_11248
  #final label in binaryExp
  L_11248: 
  #jumpToAllOnlyIf
  L_11247:
  move $v0, $s1
  beqz $v0, L_11246
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_11254: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11255: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11253
  j L_11253
  #final label in binaryExp
  L_11253: 
  #jumpToAllOnlyIf
  L_11252:
  move $v0, $s1
  beqz $v0, L_11251
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11260: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_1_47
  move $s4, $v0
  L_11261: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11259
  j L_11259
  #final label in binaryExp
  L_11259: 
  #final label in codeGenAssignmentExpression
  L_11258: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11257: 
  #final label in statem expression
  L_11256: 
  #if finish label = 11251
  L_11251:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11266: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_2_48
  move $s4, $v0
  L_11267: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11265
  j L_11265
  #final label in binaryExp
  L_11265: 
  #final label in codeGenAssignmentExpression
  L_11264: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11263: 
  #final label in statem expression
  L_11262: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_11271: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11272: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11270
  j L_11270
  #final label in binaryExp
  L_11270: 
  #jumpToAllOnlyIf
  L_11269:
  move $v0, $s1
  beqz $v0, L_11268
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11277: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_3_49
  move $s4, $v0
  L_11278: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11276
  j L_11276
  #final label in binaryExp
  L_11276: 
  #final label in codeGenAssignmentExpression
  L_11275: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11274: 
  #final label in statem expression
  L_11273: 
  #if finish label = 11268
  L_11268:
  #if finish label = 11246
  L_11246:
  j L_11185
  #inside else
  L_11187:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11283: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_11284: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11282
  j L_11282
  #final label in binaryExp
  L_11282: 
  #jumpToAllOnlyIf
  L_11280:
  move $v0, $s1
  beqz $v0, L_11281
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11288: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11289: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11287
  j L_11287
  #final label in binaryExp
  L_11287: 
  #jumpToAllOnlyIf
  L_11286:
  move $v0, $s1
  beqz $v0, L_11285
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11293: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11294: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11292
  j L_11292
  #final label in binaryExp
  L_11292: 
  #jumpToAllOnlyIf
  L_11291:
  move $v0, $s1
  beqz $v0, L_11290
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11299: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_2_28
  move $s4, $v0
  L_11300: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11298
  j L_11298
  #final label in binaryExp
  L_11298: 
  #final label in codeGenAssignmentExpression
  L_11297: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11296: 
  #final label in statem expression
  L_11295: 
  #if finish label = 11290
  L_11290:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11305: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_3_29
  move $s4, $v0
  L_11306: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11304
  j L_11304
  #final label in binaryExp
  L_11304: 
  #final label in codeGenAssignmentExpression
  L_11303: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11302: 
  #final label in statem expression
  L_11301: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11310: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11311: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11309
  j L_11309
  #final label in binaryExp
  L_11309: 
  #jumpToAllOnlyIf
  L_11308:
  move $v0, $s1
  beqz $v0, L_11307
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11316: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_4_30
  move $s4, $v0
  L_11317: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11315
  j L_11315
  #final label in binaryExp
  L_11315: 
  #final label in codeGenAssignmentExpression
  L_11314: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11313: 
  #final label in statem expression
  L_11312: 
  #if finish label = 11307
  L_11307:
  #if finish label = 11285
  L_11285:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11321: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11322: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11320
  j L_11320
  #final label in binaryExp
  L_11320: 
  #jumpToAllOnlyIf
  L_11319:
  move $v0, $s1
  beqz $v0, L_11318
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11327: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_2_38
  move $s4, $v0
  L_11328: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11326
  j L_11326
  #final label in binaryExp
  L_11326: 
  #final label in codeGenAssignmentExpression
  L_11325: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11324: 
  #final label in statem expression
  L_11323: 
  #if finish label = 11318
  L_11318:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11332: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11333: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11331
  j L_11331
  #final label in binaryExp
  L_11331: 
  #jumpToAllOnlyIf
  L_11330:
  move $v0, $s1
  beqz $v0, L_11329
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11338: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_4_40
  move $s4, $v0
  L_11339: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11337
  j L_11337
  #final label in binaryExp
  L_11337: 
  #final label in codeGenAssignmentExpression
  L_11336: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11335: 
  #final label in statem expression
  L_11334: 
  #if finish label = 11329
  L_11329:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11343: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11344: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11342
  j L_11342
  #final label in binaryExp
  L_11342: 
  #jumpToAllOnlyIf
  L_11341:
  move $v0, $s1
  beqz $v0, L_11340
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11348: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11349: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11347
  j L_11347
  #final label in binaryExp
  L_11347: 
  #jumpToAllOnlyIf
  L_11346:
  move $v0, $s1
  beqz $v0, L_11345
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11354: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_2_48
  move $s4, $v0
  L_11355: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11353
  j L_11353
  #final label in binaryExp
  L_11353: 
  #final label in codeGenAssignmentExpression
  L_11352: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11351: 
  #final label in statem expression
  L_11350: 
  #if finish label = 11345
  L_11345:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11360: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_3_49
  move $s4, $v0
  L_11361: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11359
  j L_11359
  #final label in binaryExp
  L_11359: 
  #final label in codeGenAssignmentExpression
  L_11358: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11357: 
  #final label in statem expression
  L_11356: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11365: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11366: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11364
  j L_11364
  #final label in binaryExp
  L_11364: 
  #jumpToAllOnlyIf
  L_11363:
  move $v0, $s1
  beqz $v0, L_11362
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11371: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_4_50
  move $s4, $v0
  L_11372: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11370
  j L_11370
  #final label in binaryExp
  L_11370: 
  #final label in codeGenAssignmentExpression
  L_11369: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11368: 
  #final label in statem expression
  L_11367: 
  #if finish label = 11362
  L_11362:
  #if finish label = 11340
  L_11340:
  j L_11279
  #inside else
  L_11281:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11377: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_11378: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11376
  j L_11376
  #final label in binaryExp
  L_11376: 
  #jumpToAllOnlyIf
  L_11374:
  move $v0, $s1
  beqz $v0, L_11375
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11382: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11383: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11381
  j L_11381
  #final label in binaryExp
  L_11381: 
  #jumpToAllOnlyIf
  L_11380:
  move $v0, $s1
  beqz $v0, L_11379
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_11387: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11388: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11386
  j L_11386
  #final label in binaryExp
  L_11386: 
  #jumpToAllOnlyIf
  L_11385:
  move $v0, $s1
  beqz $v0, L_11384
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11393: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_3_29
  move $s4, $v0
  L_11394: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11392
  j L_11392
  #final label in binaryExp
  L_11392: 
  #final label in codeGenAssignmentExpression
  L_11391: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11390: 
  #final label in statem expression
  L_11389: 
  #if finish label = 11384
  L_11384:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11399: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_4_30
  move $s4, $v0
  L_11400: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11398
  j L_11398
  #final label in binaryExp
  L_11398: 
  #final label in codeGenAssignmentExpression
  L_11397: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11396: 
  #final label in statem expression
  L_11395: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_11404: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11405: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11403
  j L_11403
  #final label in binaryExp
  L_11403: 
  #jumpToAllOnlyIf
  L_11402:
  move $v0, $s1
  beqz $v0, L_11401
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11410: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_5_31
  move $s4, $v0
  L_11411: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11409
  j L_11409
  #final label in binaryExp
  L_11409: 
  #final label in codeGenAssignmentExpression
  L_11408: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11407: 
  #final label in statem expression
  L_11406: 
  #if finish label = 11401
  L_11401:
  #if finish label = 11379
  L_11379:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_11415: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11416: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11414
  j L_11414
  #final label in binaryExp
  L_11414: 
  #jumpToAllOnlyIf
  L_11413:
  move $v0, $s1
  beqz $v0, L_11412
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11421: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_3_39
  move $s4, $v0
  L_11422: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11420
  j L_11420
  #final label in binaryExp
  L_11420: 
  #final label in codeGenAssignmentExpression
  L_11419: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11418: 
  #final label in statem expression
  L_11417: 
  #if finish label = 11412
  L_11412:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_11426: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11427: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11425
  j L_11425
  #final label in binaryExp
  L_11425: 
  #jumpToAllOnlyIf
  L_11424:
  move $v0, $s1
  beqz $v0, L_11423
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11432: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_5_41
  move $s4, $v0
  L_11433: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11431
  j L_11431
  #final label in binaryExp
  L_11431: 
  #final label in codeGenAssignmentExpression
  L_11430: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11429: 
  #final label in statem expression
  L_11428: 
  #if finish label = 11423
  L_11423:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11437: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11438: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11436
  j L_11436
  #final label in binaryExp
  L_11436: 
  #jumpToAllOnlyIf
  L_11435:
  move $v0, $s1
  beqz $v0, L_11434
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_11442: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11443: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11441
  j L_11441
  #final label in binaryExp
  L_11441: 
  #jumpToAllOnlyIf
  L_11440:
  move $v0, $s1
  beqz $v0, L_11439
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11448: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_3_49
  move $s4, $v0
  L_11449: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11447
  j L_11447
  #final label in binaryExp
  L_11447: 
  #final label in codeGenAssignmentExpression
  L_11446: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11445: 
  #final label in statem expression
  L_11444: 
  #if finish label = 11439
  L_11439:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11454: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_4_50
  move $s4, $v0
  L_11455: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11453
  j L_11453
  #final label in binaryExp
  L_11453: 
  #final label in codeGenAssignmentExpression
  L_11452: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11451: 
  #final label in statem expression
  L_11450: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_11459: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11460: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11458
  j L_11458
  #final label in binaryExp
  L_11458: 
  #jumpToAllOnlyIf
  L_11457:
  move $v0, $s1
  beqz $v0, L_11456
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11465: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_5_51
  move $s4, $v0
  L_11466: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11464
  j L_11464
  #final label in binaryExp
  L_11464: 
  #final label in codeGenAssignmentExpression
  L_11463: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11462: 
  #final label in statem expression
  L_11461: 
  #if finish label = 11456
  L_11456:
  #if finish label = 11434
  L_11434:
  j L_11373
  #inside else
  L_11375:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11471: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_11472: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11470
  j L_11470
  #final label in binaryExp
  L_11470: 
  #jumpToAllOnlyIf
  L_11468:
  move $v0, $s1
  beqz $v0, L_11469
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11476: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11477: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11475
  j L_11475
  #final label in binaryExp
  L_11475: 
  #jumpToAllOnlyIf
  L_11474:
  move $v0, $s1
  beqz $v0, L_11473
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_11481: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11482: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11480
  j L_11480
  #final label in binaryExp
  L_11480: 
  #jumpToAllOnlyIf
  L_11479:
  move $v0, $s1
  beqz $v0, L_11478
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11487: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_4_30
  move $s4, $v0
  L_11488: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11486
  j L_11486
  #final label in binaryExp
  L_11486: 
  #final label in codeGenAssignmentExpression
  L_11485: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11484: 
  #final label in statem expression
  L_11483: 
  #if finish label = 11478
  L_11478:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11493: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_5_31
  move $s4, $v0
  L_11494: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11492
  j L_11492
  #final label in binaryExp
  L_11492: 
  #final label in codeGenAssignmentExpression
  L_11491: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11490: 
  #final label in statem expression
  L_11489: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_11498: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11499: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11497
  j L_11497
  #final label in binaryExp
  L_11497: 
  #jumpToAllOnlyIf
  L_11496:
  move $v0, $s1
  beqz $v0, L_11495
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11504: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_6_32
  move $s4, $v0
  L_11505: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11503
  j L_11503
  #final label in binaryExp
  L_11503: 
  #final label in codeGenAssignmentExpression
  L_11502: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11501: 
  #final label in statem expression
  L_11500: 
  #if finish label = 11495
  L_11495:
  #if finish label = 11473
  L_11473:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_11509: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11510: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11508
  j L_11508
  #final label in binaryExp
  L_11508: 
  #jumpToAllOnlyIf
  L_11507:
  move $v0, $s1
  beqz $v0, L_11506
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11515: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_4_40
  move $s4, $v0
  L_11516: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11514
  j L_11514
  #final label in binaryExp
  L_11514: 
  #final label in codeGenAssignmentExpression
  L_11513: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11512: 
  #final label in statem expression
  L_11511: 
  #if finish label = 11506
  L_11506:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_11520: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11521: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11519
  j L_11519
  #final label in binaryExp
  L_11519: 
  #jumpToAllOnlyIf
  L_11518:
  move $v0, $s1
  beqz $v0, L_11517
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11526: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_6_42
  move $s4, $v0
  L_11527: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11525
  j L_11525
  #final label in binaryExp
  L_11525: 
  #final label in codeGenAssignmentExpression
  L_11524: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11523: 
  #final label in statem expression
  L_11522: 
  #if finish label = 11517
  L_11517:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11531: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11532: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11530
  j L_11530
  #final label in binaryExp
  L_11530: 
  #jumpToAllOnlyIf
  L_11529:
  move $v0, $s1
  beqz $v0, L_11528
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_11536: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11537: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11535
  j L_11535
  #final label in binaryExp
  L_11535: 
  #jumpToAllOnlyIf
  L_11534:
  move $v0, $s1
  beqz $v0, L_11533
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11542: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_4_50
  move $s4, $v0
  L_11543: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11541
  j L_11541
  #final label in binaryExp
  L_11541: 
  #final label in codeGenAssignmentExpression
  L_11540: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11539: 
  #final label in statem expression
  L_11538: 
  #if finish label = 11533
  L_11533:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11548: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_5_51
  move $s4, $v0
  L_11549: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11547
  j L_11547
  #final label in binaryExp
  L_11547: 
  #final label in codeGenAssignmentExpression
  L_11546: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11545: 
  #final label in statem expression
  L_11544: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_11553: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11554: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11552
  j L_11552
  #final label in binaryExp
  L_11552: 
  #jumpToAllOnlyIf
  L_11551:
  move $v0, $s1
  beqz $v0, L_11550
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11559: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_6_52
  move $s4, $v0
  L_11560: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11558
  j L_11558
  #final label in binaryExp
  L_11558: 
  #final label in codeGenAssignmentExpression
  L_11557: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11556: 
  #final label in statem expression
  L_11555: 
  #if finish label = 11550
  L_11550:
  #if finish label = 11528
  L_11528:
  j L_11467
  #inside else
  L_11469:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11565: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_11566: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11564
  j L_11564
  #final label in binaryExp
  L_11564: 
  #jumpToAllOnlyIf
  L_11562:
  move $v0, $s1
  beqz $v0, L_11563
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11570: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11571: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11569
  j L_11569
  #final label in binaryExp
  L_11569: 
  #jumpToAllOnlyIf
  L_11568:
  move $v0, $s1
  beqz $v0, L_11567
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_11575: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11576: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11574
  j L_11574
  #final label in binaryExp
  L_11574: 
  #jumpToAllOnlyIf
  L_11573:
  move $v0, $s1
  beqz $v0, L_11572
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11581: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_5_31
  move $s4, $v0
  L_11582: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11580
  j L_11580
  #final label in binaryExp
  L_11580: 
  #final label in codeGenAssignmentExpression
  L_11579: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11578: 
  #final label in statem expression
  L_11577: 
  #if finish label = 11572
  L_11572:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11587: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_6_32
  move $s4, $v0
  L_11588: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11586
  j L_11586
  #final label in binaryExp
  L_11586: 
  #final label in codeGenAssignmentExpression
  L_11585: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11584: 
  #final label in statem expression
  L_11583: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_11592: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11593: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11591
  j L_11591
  #final label in binaryExp
  L_11591: 
  #jumpToAllOnlyIf
  L_11590:
  move $v0, $s1
  beqz $v0, L_11589
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11598: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_7_33
  move $s4, $v0
  L_11599: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11597
  j L_11597
  #final label in binaryExp
  L_11597: 
  #final label in codeGenAssignmentExpression
  L_11596: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11595: 
  #final label in statem expression
  L_11594: 
  #if finish label = 11589
  L_11589:
  #if finish label = 11567
  L_11567:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_11603: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11604: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11602
  j L_11602
  #final label in binaryExp
  L_11602: 
  #jumpToAllOnlyIf
  L_11601:
  move $v0, $s1
  beqz $v0, L_11600
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11609: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_5_41
  move $s4, $v0
  L_11610: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11608
  j L_11608
  #final label in binaryExp
  L_11608: 
  #final label in codeGenAssignmentExpression
  L_11607: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11606: 
  #final label in statem expression
  L_11605: 
  #if finish label = 11600
  L_11600:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_11614: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11615: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11613
  j L_11613
  #final label in binaryExp
  L_11613: 
  #jumpToAllOnlyIf
  L_11612:
  move $v0, $s1
  beqz $v0, L_11611
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11620: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_7_43
  move $s4, $v0
  L_11621: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11619
  j L_11619
  #final label in binaryExp
  L_11619: 
  #final label in codeGenAssignmentExpression
  L_11618: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11617: 
  #final label in statem expression
  L_11616: 
  #if finish label = 11611
  L_11611:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11625: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11626: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11624
  j L_11624
  #final label in binaryExp
  L_11624: 
  #jumpToAllOnlyIf
  L_11623:
  move $v0, $s1
  beqz $v0, L_11622
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_11630: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11631: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11629
  j L_11629
  #final label in binaryExp
  L_11629: 
  #jumpToAllOnlyIf
  L_11628:
  move $v0, $s1
  beqz $v0, L_11627
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11636: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_5_51
  move $s4, $v0
  L_11637: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11635
  j L_11635
  #final label in binaryExp
  L_11635: 
  #final label in codeGenAssignmentExpression
  L_11634: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11633: 
  #final label in statem expression
  L_11632: 
  #if finish label = 11627
  L_11627:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11642: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_6_52
  move $s4, $v0
  L_11643: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11641
  j L_11641
  #final label in binaryExp
  L_11641: 
  #final label in codeGenAssignmentExpression
  L_11640: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11639: 
  #final label in statem expression
  L_11638: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_11647: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11648: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11646
  j L_11646
  #final label in binaryExp
  L_11646: 
  #jumpToAllOnlyIf
  L_11645:
  move $v0, $s1
  beqz $v0, L_11644
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11653: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_7_53
  move $s4, $v0
  L_11654: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11652
  j L_11652
  #final label in binaryExp
  L_11652: 
  #final label in codeGenAssignmentExpression
  L_11651: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11650: 
  #final label in statem expression
  L_11649: 
  #if finish label = 11644
  L_11644:
  #if finish label = 11622
  L_11622:
  j L_11561
  #inside else
  L_11563:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11659: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_11660: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11658
  j L_11658
  #final label in binaryExp
  L_11658: 
  #jumpToAllOnlyIf
  L_11656:
  move $v0, $s1
  beqz $v0, L_11657
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11664: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11665: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11663
  j L_11663
  #final label in binaryExp
  L_11663: 
  #jumpToAllOnlyIf
  L_11662:
  move $v0, $s1
  beqz $v0, L_11661
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_11669: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11670: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11668
  j L_11668
  #final label in binaryExp
  L_11668: 
  #jumpToAllOnlyIf
  L_11667:
  move $v0, $s1
  beqz $v0, L_11666
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11675: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_6_32
  move $s4, $v0
  L_11676: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11674
  j L_11674
  #final label in binaryExp
  L_11674: 
  #final label in codeGenAssignmentExpression
  L_11673: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11672: 
  #final label in statem expression
  L_11671: 
  #if finish label = 11666
  L_11666:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11681: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_7_33
  move $s4, $v0
  L_11682: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11680
  j L_11680
  #final label in binaryExp
  L_11680: 
  #final label in codeGenAssignmentExpression
  L_11679: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11678: 
  #final label in statem expression
  L_11677: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_11686: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11687: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11685
  j L_11685
  #final label in binaryExp
  L_11685: 
  #jumpToAllOnlyIf
  L_11684:
  move $v0, $s1
  beqz $v0, L_11683
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11692: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_8_34
  move $s4, $v0
  L_11693: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11691
  j L_11691
  #final label in binaryExp
  L_11691: 
  #final label in codeGenAssignmentExpression
  L_11690: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11689: 
  #final label in statem expression
  L_11688: 
  #if finish label = 11683
  L_11683:
  #if finish label = 11661
  L_11661:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_11697: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11698: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11696
  j L_11696
  #final label in binaryExp
  L_11696: 
  #jumpToAllOnlyIf
  L_11695:
  move $v0, $s1
  beqz $v0, L_11694
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11703: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_6_42
  move $s4, $v0
  L_11704: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11702
  j L_11702
  #final label in binaryExp
  L_11702: 
  #final label in codeGenAssignmentExpression
  L_11701: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11700: 
  #final label in statem expression
  L_11699: 
  #if finish label = 11694
  L_11694:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_11708: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11709: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11707
  j L_11707
  #final label in binaryExp
  L_11707: 
  #jumpToAllOnlyIf
  L_11706:
  move $v0, $s1
  beqz $v0, L_11705
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11714: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_8_44
  move $s4, $v0
  L_11715: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11713
  j L_11713
  #final label in binaryExp
  L_11713: 
  #final label in codeGenAssignmentExpression
  L_11712: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11711: 
  #final label in statem expression
  L_11710: 
  #if finish label = 11705
  L_11705:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11719: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11720: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11718
  j L_11718
  #final label in binaryExp
  L_11718: 
  #jumpToAllOnlyIf
  L_11717:
  move $v0, $s1
  beqz $v0, L_11716
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_11724: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11725: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11723
  j L_11723
  #final label in binaryExp
  L_11723: 
  #jumpToAllOnlyIf
  L_11722:
  move $v0, $s1
  beqz $v0, L_11721
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11730: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_6_52
  move $s4, $v0
  L_11731: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11729
  j L_11729
  #final label in binaryExp
  L_11729: 
  #final label in codeGenAssignmentExpression
  L_11728: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11727: 
  #final label in statem expression
  L_11726: 
  #if finish label = 11721
  L_11721:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11736: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_7_53
  move $s4, $v0
  L_11737: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11735
  j L_11735
  #final label in binaryExp
  L_11735: 
  #final label in codeGenAssignmentExpression
  L_11734: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11733: 
  #final label in statem expression
  L_11732: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_11741: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11742: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11740
  j L_11740
  #final label in binaryExp
  L_11740: 
  #jumpToAllOnlyIf
  L_11739:
  move $v0, $s1
  beqz $v0, L_11738
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11747: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_8_54
  move $s4, $v0
  L_11748: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11746
  j L_11746
  #final label in binaryExp
  L_11746: 
  #final label in codeGenAssignmentExpression
  L_11745: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11744: 
  #final label in statem expression
  L_11743: 
  #if finish label = 11738
  L_11738:
  #if finish label = 11716
  L_11716:
  j L_11655
  #inside else
  L_11657:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11753: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_11754: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11752
  j L_11752
  #final label in binaryExp
  L_11752: 
  #jumpToAllOnlyIf
  L_11750:
  move $v0, $s1
  beqz $v0, L_11751
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11758: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11759: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11757
  j L_11757
  #final label in binaryExp
  L_11757: 
  #jumpToAllOnlyIf
  L_11756:
  move $v0, $s1
  beqz $v0, L_11755
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_11763: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11764: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11762
  j L_11762
  #final label in binaryExp
  L_11762: 
  #jumpToAllOnlyIf
  L_11761:
  move $v0, $s1
  beqz $v0, L_11760
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11769: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_7_33
  move $s4, $v0
  L_11770: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11768
  j L_11768
  #final label in binaryExp
  L_11768: 
  #final label in codeGenAssignmentExpression
  L_11767: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11766: 
  #final label in statem expression
  L_11765: 
  #if finish label = 11760
  L_11760:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11775: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_8_34
  move $s4, $v0
  L_11776: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11774
  j L_11774
  #final label in binaryExp
  L_11774: 
  #final label in codeGenAssignmentExpression
  L_11773: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11772: 
  #final label in statem expression
  L_11771: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_11780: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11781: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11779
  j L_11779
  #final label in binaryExp
  L_11779: 
  #jumpToAllOnlyIf
  L_11778:
  move $v0, $s1
  beqz $v0, L_11777
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11786: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_9_35
  move $s4, $v0
  L_11787: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11785
  j L_11785
  #final label in binaryExp
  L_11785: 
  #final label in codeGenAssignmentExpression
  L_11784: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11783: 
  #final label in statem expression
  L_11782: 
  #if finish label = 11777
  L_11777:
  #if finish label = 11755
  L_11755:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_11791: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11792: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11790
  j L_11790
  #final label in binaryExp
  L_11790: 
  #jumpToAllOnlyIf
  L_11789:
  move $v0, $s1
  beqz $v0, L_11788
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11797: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_7_43
  move $s4, $v0
  L_11798: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11796
  j L_11796
  #final label in binaryExp
  L_11796: 
  #final label in codeGenAssignmentExpression
  L_11795: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11794: 
  #final label in statem expression
  L_11793: 
  #if finish label = 11788
  L_11788:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_11802: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11803: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11801
  j L_11801
  #final label in binaryExp
  L_11801: 
  #jumpToAllOnlyIf
  L_11800:
  move $v0, $s1
  beqz $v0, L_11799
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11808: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_9_45
  move $s4, $v0
  L_11809: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11807
  j L_11807
  #final label in binaryExp
  L_11807: 
  #final label in codeGenAssignmentExpression
  L_11806: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11805: 
  #final label in statem expression
  L_11804: 
  #if finish label = 11799
  L_11799:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11813: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11814: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11812
  j L_11812
  #final label in binaryExp
  L_11812: 
  #jumpToAllOnlyIf
  L_11811:
  move $v0, $s1
  beqz $v0, L_11810
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_11818: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11819: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11817
  j L_11817
  #final label in binaryExp
  L_11817: 
  #jumpToAllOnlyIf
  L_11816:
  move $v0, $s1
  beqz $v0, L_11815
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11824: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_7_53
  move $s4, $v0
  L_11825: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11823
  j L_11823
  #final label in binaryExp
  L_11823: 
  #final label in codeGenAssignmentExpression
  L_11822: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11821: 
  #final label in statem expression
  L_11820: 
  #if finish label = 11815
  L_11815:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11830: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_8_54
  move $s4, $v0
  L_11831: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11829
  j L_11829
  #final label in binaryExp
  L_11829: 
  #final label in codeGenAssignmentExpression
  L_11828: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11827: 
  #final label in statem expression
  L_11826: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_11835: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11836: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11834
  j L_11834
  #final label in binaryExp
  L_11834: 
  #jumpToAllOnlyIf
  L_11833:
  move $v0, $s1
  beqz $v0, L_11832
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11841: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_9_55
  move $s4, $v0
  L_11842: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11840
  j L_11840
  #final label in binaryExp
  L_11840: 
  #final label in codeGenAssignmentExpression
  L_11839: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11838: 
  #final label in statem expression
  L_11837: 
  #if finish label = 11832
  L_11832:
  #if finish label = 11810
  L_11810:
  j L_11749
  #inside else
  L_11751:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11846: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11847: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11845
  j L_11845
  #final label in binaryExp
  L_11845: 
  #jumpToAllOnlyIf
  L_11844:
  move $v0, $s1
  beqz $v0, L_11843
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11851: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11852: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11850
  j L_11850
  #final label in binaryExp
  L_11850: 
  #jumpToAllOnlyIf
  L_11849:
  move $v0, $s1
  beqz $v0, L_11848
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_11856: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11857: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11855
  j L_11855
  #final label in binaryExp
  L_11855: 
  #jumpToAllOnlyIf
  L_11854:
  move $v0, $s1
  beqz $v0, L_11853
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11862: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_8_34
  move $s4, $v0
  L_11863: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11861
  j L_11861
  #final label in binaryExp
  L_11861: 
  #final label in codeGenAssignmentExpression
  L_11860: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11859: 
  #final label in statem expression
  L_11858: 
  #if finish label = 11853
  L_11853:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11868: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_2_9_35
  move $s4, $v0
  L_11869: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11867
  j L_11867
  #final label in binaryExp
  L_11867: 
  #final label in codeGenAssignmentExpression
  L_11866: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11865: 
  #final label in statem expression
  L_11864: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_11873: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11874: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11872
  j L_11872
  #final label in binaryExp
  L_11872: 
  #jumpToAllOnlyIf
  L_11871:
  move $v0, $s1
  beqz $v0, L_11870
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11879: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_11880: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11878
  j L_11878
  #final label in binaryExp
  L_11878: 
  #final label in codeGenAssignmentExpression
  L_11877: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11876: 
  #final label in statem expression
  L_11875: 
  #if finish label = 11870
  L_11870:
  #if finish label = 11848
  L_11848:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_11884: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11885: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11883
  j L_11883
  #final label in binaryExp
  L_11883: 
  #jumpToAllOnlyIf
  L_11882:
  move $v0, $s1
  beqz $v0, L_11881
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11890: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_8_44
  move $s4, $v0
  L_11891: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11889
  j L_11889
  #final label in binaryExp
  L_11889: 
  #final label in codeGenAssignmentExpression
  L_11888: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11887: 
  #final label in statem expression
  L_11886: 
  #if finish label = 11881
  L_11881:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_11895: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11896: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11894
  j L_11894
  #final label in binaryExp
  L_11894: 
  #jumpToAllOnlyIf
  L_11893:
  move $v0, $s1
  beqz $v0, L_11892
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11901: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_11902: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11900
  j L_11900
  #final label in binaryExp
  L_11900: 
  #final label in codeGenAssignmentExpression
  L_11899: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11898: 
  #final label in statem expression
  L_11897: 
  #if finish label = 11892
  L_11892:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_11906: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11907: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11905
  j L_11905
  #final label in binaryExp
  L_11905: 
  #jumpToAllOnlyIf
  L_11904:
  move $v0, $s1
  beqz $v0, L_11903
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_11911: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11912: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11910
  j L_11910
  #final label in binaryExp
  L_11910: 
  #jumpToAllOnlyIf
  L_11909:
  move $v0, $s1
  beqz $v0, L_11908
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11917: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_8_54
  move $s4, $v0
  L_11918: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11916
  j L_11916
  #final label in binaryExp
  L_11916: 
  #final label in codeGenAssignmentExpression
  L_11915: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11914: 
  #final label in statem expression
  L_11913: 
  #if finish label = 11908
  L_11908:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11923: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_9_55
  move $s4, $v0
  L_11924: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11922
  j L_11922
  #final label in binaryExp
  L_11922: 
  #final label in codeGenAssignmentExpression
  L_11921: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11920: 
  #final label in statem expression
  L_11919: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_11928: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11929: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11927
  j L_11927
  #final label in binaryExp
  L_11927: 
  #jumpToAllOnlyIf
  L_11926:
  move $v0, $s1
  beqz $v0, L_11925
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11934: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_11935: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11933
  j L_11933
  #final label in binaryExp
  L_11933: 
  #final label in codeGenAssignmentExpression
  L_11932: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11931: 
  #final label in statem expression
  L_11930: 
  #if finish label = 11925
  L_11925:
  #if finish label = 11903
  L_11903:
  #if finish label = 11843
  L_11843:
  #if finish label = 11749
  L_11749:
  #if finish label = 11655
  L_11655:
  #if finish label = 11561
  L_11561:
  #if finish label = 11467
  L_11467:
  #if finish label = 11373
  L_11373:
  #if finish label = 11279
  L_11279:
  #if finish label = 11185
  L_11185:
  #if finish label = 11091
  L_11091:
  #if finish label = 10997
  L_10997:
  j L_10991
  #inside else
  L_10993:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_11940: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_11941: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11939
  j L_11939
  #final label in binaryExp
  L_11939: 
  #jumpToAllOnlyIf
  L_11937:
  move $v0, $s1
  beqz $v0, L_11938
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_11946: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11947: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11945
  j L_11945
  #final label in binaryExp
  L_11945: 
  #jumpToAllOnlyIf
  L_11943:
  move $v0, $s1
  beqz $v0, L_11944
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_11951: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11952: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11950
  j L_11950
  #final label in binaryExp
  L_11950: 
  #jumpToAllOnlyIf
  L_11949:
  move $v0, $s1
  beqz $v0, L_11948
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11956: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11957: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11955
  j L_11955
  #final label in binaryExp
  L_11955: 
  #jumpToAllOnlyIf
  L_11954:
  move $v0, $s1
  beqz $v0, L_11953
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11962: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_11963: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11961
  j L_11961
  #final label in binaryExp
  L_11961: 
  #final label in codeGenAssignmentExpression
  L_11960: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11959: 
  #final label in statem expression
  L_11958: 
  #if finish label = 11953
  L_11953:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11968: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_0_36
  move $s4, $v0
  L_11969: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11967
  j L_11967
  #final label in binaryExp
  L_11967: 
  #final label in codeGenAssignmentExpression
  L_11966: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11965: 
  #final label in statem expression
  L_11964: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11973: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11974: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11972
  j L_11972
  #final label in binaryExp
  L_11972: 
  #jumpToAllOnlyIf
  L_11971:
  move $v0, $s1
  beqz $v0, L_11970
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11979: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_1_37
  move $s4, $v0
  L_11980: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11978
  j L_11978
  #final label in binaryExp
  L_11978: 
  #final label in codeGenAssignmentExpression
  L_11977: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11976: 
  #final label in statem expression
  L_11975: 
  #if finish label = 11970
  L_11970:
  #if finish label = 11948
  L_11948:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11984: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_11985: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11983
  j L_11983
  #final label in binaryExp
  L_11983: 
  #jumpToAllOnlyIf
  L_11982:
  move $v0, $s1
  beqz $v0, L_11981
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_11990: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_11991: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_11989
  j L_11989
  #final label in binaryExp
  L_11989: 
  #final label in codeGenAssignmentExpression
  L_11988: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11987: 
  #final label in statem expression
  L_11986: 
  #if finish label = 11981
  L_11981:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_11995: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_11996: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_11994
  j L_11994
  #final label in binaryExp
  L_11994: 
  #jumpToAllOnlyIf
  L_11993:
  move $v0, $s1
  beqz $v0, L_11992
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12001: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_1_47
  move $s4, $v0
  L_12002: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12000
  j L_12000
  #final label in binaryExp
  L_12000: 
  #final label in codeGenAssignmentExpression
  L_11999: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_11998: 
  #final label in statem expression
  L_11997: 
  #if finish label = 11992
  L_11992:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12006: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12007: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12005
  j L_12005
  #final label in binaryExp
  L_12005: 
  #jumpToAllOnlyIf
  L_12004:
  move $v0, $s1
  beqz $v0, L_12003
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_12011: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12012: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12010
  j L_12010
  #final label in binaryExp
  L_12010: 
  #jumpToAllOnlyIf
  L_12009:
  move $v0, $s1
  beqz $v0, L_12008
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12017: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_12018: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12016
  j L_12016
  #final label in binaryExp
  L_12016: 
  #final label in codeGenAssignmentExpression
  L_12015: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12014: 
  #final label in statem expression
  L_12013: 
  #if finish label = 12008
  L_12008:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12023: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_0_56
  move $s4, $v0
  L_12024: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12022
  j L_12022
  #final label in binaryExp
  L_12022: 
  #final label in codeGenAssignmentExpression
  L_12021: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12020: 
  #final label in statem expression
  L_12019: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_12028: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12029: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12027
  j L_12027
  #final label in binaryExp
  L_12027: 
  #jumpToAllOnlyIf
  L_12026:
  move $v0, $s1
  beqz $v0, L_12025
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12034: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_1_57
  move $s4, $v0
  L_12035: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12033
  j L_12033
  #final label in binaryExp
  L_12033: 
  #final label in codeGenAssignmentExpression
  L_12032: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12031: 
  #final label in statem expression
  L_12030: 
  #if finish label = 12025
  L_12025:
  #if finish label = 12003
  L_12003:
  j L_11942
  #inside else
  L_11944:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12040: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_12041: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12039
  j L_12039
  #final label in binaryExp
  L_12039: 
  #jumpToAllOnlyIf
  L_12037:
  move $v0, $s1
  beqz $v0, L_12038
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12045: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12046: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12044
  j L_12044
  #final label in binaryExp
  L_12044: 
  #jumpToAllOnlyIf
  L_12043:
  move $v0, $s1
  beqz $v0, L_12042
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_12050: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12051: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12049
  j L_12049
  #final label in binaryExp
  L_12049: 
  #jumpToAllOnlyIf
  L_12048:
  move $v0, $s1
  beqz $v0, L_12047
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12056: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_0_36
  move $s4, $v0
  L_12057: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12055
  j L_12055
  #final label in binaryExp
  L_12055: 
  #final label in codeGenAssignmentExpression
  L_12054: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12053: 
  #final label in statem expression
  L_12052: 
  #if finish label = 12047
  L_12047:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12062: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_1_37
  move $s4, $v0
  L_12063: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12061
  j L_12061
  #final label in binaryExp
  L_12061: 
  #final label in codeGenAssignmentExpression
  L_12060: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12059: 
  #final label in statem expression
  L_12058: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_12067: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12068: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12066
  j L_12066
  #final label in binaryExp
  L_12066: 
  #jumpToAllOnlyIf
  L_12065:
  move $v0, $s1
  beqz $v0, L_12064
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12073: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_2_38
  move $s4, $v0
  L_12074: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12072
  j L_12072
  #final label in binaryExp
  L_12072: 
  #final label in codeGenAssignmentExpression
  L_12071: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12070: 
  #final label in statem expression
  L_12069: 
  #if finish label = 12064
  L_12064:
  #if finish label = 12042
  L_12042:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_12078: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12079: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12077
  j L_12077
  #final label in binaryExp
  L_12077: 
  #jumpToAllOnlyIf
  L_12076:
  move $v0, $s1
  beqz $v0, L_12075
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12084: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_0_46
  move $s4, $v0
  L_12085: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12083
  j L_12083
  #final label in binaryExp
  L_12083: 
  #final label in codeGenAssignmentExpression
  L_12082: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12081: 
  #final label in statem expression
  L_12080: 
  #if finish label = 12075
  L_12075:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_12089: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12090: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12088
  j L_12088
  #final label in binaryExp
  L_12088: 
  #jumpToAllOnlyIf
  L_12087:
  move $v0, $s1
  beqz $v0, L_12086
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12095: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_2_48
  move $s4, $v0
  L_12096: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12094
  j L_12094
  #final label in binaryExp
  L_12094: 
  #final label in codeGenAssignmentExpression
  L_12093: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12092: 
  #final label in statem expression
  L_12091: 
  #if finish label = 12086
  L_12086:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12100: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12101: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12099
  j L_12099
  #final label in binaryExp
  L_12099: 
  #jumpToAllOnlyIf
  L_12098:
  move $v0, $s1
  beqz $v0, L_12097
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_12105: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12106: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12104
  j L_12104
  #final label in binaryExp
  L_12104: 
  #jumpToAllOnlyIf
  L_12103:
  move $v0, $s1
  beqz $v0, L_12102
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12111: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_0_56
  move $s4, $v0
  L_12112: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12110
  j L_12110
  #final label in binaryExp
  L_12110: 
  #final label in codeGenAssignmentExpression
  L_12109: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12108: 
  #final label in statem expression
  L_12107: 
  #if finish label = 12102
  L_12102:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12117: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_1_57
  move $s4, $v0
  L_12118: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12116
  j L_12116
  #final label in binaryExp
  L_12116: 
  #final label in codeGenAssignmentExpression
  L_12115: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12114: 
  #final label in statem expression
  L_12113: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_12122: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12123: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12121
  j L_12121
  #final label in binaryExp
  L_12121: 
  #jumpToAllOnlyIf
  L_12120:
  move $v0, $s1
  beqz $v0, L_12119
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12128: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_2_58
  move $s4, $v0
  L_12129: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12127
  j L_12127
  #final label in binaryExp
  L_12127: 
  #final label in codeGenAssignmentExpression
  L_12126: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12125: 
  #final label in statem expression
  L_12124: 
  #if finish label = 12119
  L_12119:
  #if finish label = 12097
  L_12097:
  j L_12036
  #inside else
  L_12038:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12134: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_12135: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12133
  j L_12133
  #final label in binaryExp
  L_12133: 
  #jumpToAllOnlyIf
  L_12131:
  move $v0, $s1
  beqz $v0, L_12132
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12139: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12140: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12138
  j L_12138
  #final label in binaryExp
  L_12138: 
  #jumpToAllOnlyIf
  L_12137:
  move $v0, $s1
  beqz $v0, L_12136
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_12144: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12145: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12143
  j L_12143
  #final label in binaryExp
  L_12143: 
  #jumpToAllOnlyIf
  L_12142:
  move $v0, $s1
  beqz $v0, L_12141
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12150: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_1_37
  move $s4, $v0
  L_12151: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12149
  j L_12149
  #final label in binaryExp
  L_12149: 
  #final label in codeGenAssignmentExpression
  L_12148: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12147: 
  #final label in statem expression
  L_12146: 
  #if finish label = 12141
  L_12141:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12156: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_2_38
  move $s4, $v0
  L_12157: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12155
  j L_12155
  #final label in binaryExp
  L_12155: 
  #final label in codeGenAssignmentExpression
  L_12154: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12153: 
  #final label in statem expression
  L_12152: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_12161: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12162: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12160
  j L_12160
  #final label in binaryExp
  L_12160: 
  #jumpToAllOnlyIf
  L_12159:
  move $v0, $s1
  beqz $v0, L_12158
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12167: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_3_39
  move $s4, $v0
  L_12168: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12166
  j L_12166
  #final label in binaryExp
  L_12166: 
  #final label in codeGenAssignmentExpression
  L_12165: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12164: 
  #final label in statem expression
  L_12163: 
  #if finish label = 12158
  L_12158:
  #if finish label = 12136
  L_12136:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_12172: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12173: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12171
  j L_12171
  #final label in binaryExp
  L_12171: 
  #jumpToAllOnlyIf
  L_12170:
  move $v0, $s1
  beqz $v0, L_12169
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12178: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_1_47
  move $s4, $v0
  L_12179: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12177
  j L_12177
  #final label in binaryExp
  L_12177: 
  #final label in codeGenAssignmentExpression
  L_12176: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12175: 
  #final label in statem expression
  L_12174: 
  #if finish label = 12169
  L_12169:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_12183: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12184: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12182
  j L_12182
  #final label in binaryExp
  L_12182: 
  #jumpToAllOnlyIf
  L_12181:
  move $v0, $s1
  beqz $v0, L_12180
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12189: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_3_49
  move $s4, $v0
  L_12190: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12188
  j L_12188
  #final label in binaryExp
  L_12188: 
  #final label in codeGenAssignmentExpression
  L_12187: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12186: 
  #final label in statem expression
  L_12185: 
  #if finish label = 12180
  L_12180:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12194: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12195: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12193
  j L_12193
  #final label in binaryExp
  L_12193: 
  #jumpToAllOnlyIf
  L_12192:
  move $v0, $s1
  beqz $v0, L_12191
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_12199: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12200: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12198
  j L_12198
  #final label in binaryExp
  L_12198: 
  #jumpToAllOnlyIf
  L_12197:
  move $v0, $s1
  beqz $v0, L_12196
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12205: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_1_57
  move $s4, $v0
  L_12206: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12204
  j L_12204
  #final label in binaryExp
  L_12204: 
  #final label in codeGenAssignmentExpression
  L_12203: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12202: 
  #final label in statem expression
  L_12201: 
  #if finish label = 12196
  L_12196:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12211: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_2_58
  move $s4, $v0
  L_12212: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12210
  j L_12210
  #final label in binaryExp
  L_12210: 
  #final label in codeGenAssignmentExpression
  L_12209: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12208: 
  #final label in statem expression
  L_12207: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_12216: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12217: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12215
  j L_12215
  #final label in binaryExp
  L_12215: 
  #jumpToAllOnlyIf
  L_12214:
  move $v0, $s1
  beqz $v0, L_12213
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12222: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_3_59
  move $s4, $v0
  L_12223: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12221
  j L_12221
  #final label in binaryExp
  L_12221: 
  #final label in codeGenAssignmentExpression
  L_12220: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12219: 
  #final label in statem expression
  L_12218: 
  #if finish label = 12213
  L_12213:
  #if finish label = 12191
  L_12191:
  j L_12130
  #inside else
  L_12132:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12228: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_12229: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12227
  j L_12227
  #final label in binaryExp
  L_12227: 
  #jumpToAllOnlyIf
  L_12225:
  move $v0, $s1
  beqz $v0, L_12226
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12233: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12234: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12232
  j L_12232
  #final label in binaryExp
  L_12232: 
  #jumpToAllOnlyIf
  L_12231:
  move $v0, $s1
  beqz $v0, L_12230
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_12238: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12239: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12237
  j L_12237
  #final label in binaryExp
  L_12237: 
  #jumpToAllOnlyIf
  L_12236:
  move $v0, $s1
  beqz $v0, L_12235
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12244: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_2_38
  move $s4, $v0
  L_12245: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12243
  j L_12243
  #final label in binaryExp
  L_12243: 
  #final label in codeGenAssignmentExpression
  L_12242: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12241: 
  #final label in statem expression
  L_12240: 
  #if finish label = 12235
  L_12235:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12250: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_3_39
  move $s4, $v0
  L_12251: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12249
  j L_12249
  #final label in binaryExp
  L_12249: 
  #final label in codeGenAssignmentExpression
  L_12248: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12247: 
  #final label in statem expression
  L_12246: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_12255: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12256: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12254
  j L_12254
  #final label in binaryExp
  L_12254: 
  #jumpToAllOnlyIf
  L_12253:
  move $v0, $s1
  beqz $v0, L_12252
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12261: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_4_40
  move $s4, $v0
  L_12262: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12260
  j L_12260
  #final label in binaryExp
  L_12260: 
  #final label in codeGenAssignmentExpression
  L_12259: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12258: 
  #final label in statem expression
  L_12257: 
  #if finish label = 12252
  L_12252:
  #if finish label = 12230
  L_12230:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_12266: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12267: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12265
  j L_12265
  #final label in binaryExp
  L_12265: 
  #jumpToAllOnlyIf
  L_12264:
  move $v0, $s1
  beqz $v0, L_12263
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12272: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_2_48
  move $s4, $v0
  L_12273: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12271
  j L_12271
  #final label in binaryExp
  L_12271: 
  #final label in codeGenAssignmentExpression
  L_12270: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12269: 
  #final label in statem expression
  L_12268: 
  #if finish label = 12263
  L_12263:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_12277: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12278: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12276
  j L_12276
  #final label in binaryExp
  L_12276: 
  #jumpToAllOnlyIf
  L_12275:
  move $v0, $s1
  beqz $v0, L_12274
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12283: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_4_50
  move $s4, $v0
  L_12284: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12282
  j L_12282
  #final label in binaryExp
  L_12282: 
  #final label in codeGenAssignmentExpression
  L_12281: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12280: 
  #final label in statem expression
  L_12279: 
  #if finish label = 12274
  L_12274:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12288: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12289: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12287
  j L_12287
  #final label in binaryExp
  L_12287: 
  #jumpToAllOnlyIf
  L_12286:
  move $v0, $s1
  beqz $v0, L_12285
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_12293: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12294: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12292
  j L_12292
  #final label in binaryExp
  L_12292: 
  #jumpToAllOnlyIf
  L_12291:
  move $v0, $s1
  beqz $v0, L_12290
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12299: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_2_58
  move $s4, $v0
  L_12300: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12298
  j L_12298
  #final label in binaryExp
  L_12298: 
  #final label in codeGenAssignmentExpression
  L_12297: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12296: 
  #final label in statem expression
  L_12295: 
  #if finish label = 12290
  L_12290:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12305: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_3_59
  move $s4, $v0
  L_12306: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12304
  j L_12304
  #final label in binaryExp
  L_12304: 
  #final label in codeGenAssignmentExpression
  L_12303: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12302: 
  #final label in statem expression
  L_12301: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_12310: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12311: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12309
  j L_12309
  #final label in binaryExp
  L_12309: 
  #jumpToAllOnlyIf
  L_12308:
  move $v0, $s1
  beqz $v0, L_12307
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12316: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_4_60
  move $s4, $v0
  L_12317: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12315
  j L_12315
  #final label in binaryExp
  L_12315: 
  #final label in codeGenAssignmentExpression
  L_12314: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12313: 
  #final label in statem expression
  L_12312: 
  #if finish label = 12307
  L_12307:
  #if finish label = 12285
  L_12285:
  j L_12224
  #inside else
  L_12226:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12322: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_12323: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12321
  j L_12321
  #final label in binaryExp
  L_12321: 
  #jumpToAllOnlyIf
  L_12319:
  move $v0, $s1
  beqz $v0, L_12320
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12327: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12328: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12326
  j L_12326
  #final label in binaryExp
  L_12326: 
  #jumpToAllOnlyIf
  L_12325:
  move $v0, $s1
  beqz $v0, L_12324
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12332: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12333: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12331
  j L_12331
  #final label in binaryExp
  L_12331: 
  #jumpToAllOnlyIf
  L_12330:
  move $v0, $s1
  beqz $v0, L_12329
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12338: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_3_39
  move $s4, $v0
  L_12339: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12337
  j L_12337
  #final label in binaryExp
  L_12337: 
  #final label in codeGenAssignmentExpression
  L_12336: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12335: 
  #final label in statem expression
  L_12334: 
  #if finish label = 12329
  L_12329:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12344: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_4_40
  move $s4, $v0
  L_12345: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12343
  j L_12343
  #final label in binaryExp
  L_12343: 
  #final label in codeGenAssignmentExpression
  L_12342: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12341: 
  #final label in statem expression
  L_12340: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12349: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12350: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12348
  j L_12348
  #final label in binaryExp
  L_12348: 
  #jumpToAllOnlyIf
  L_12347:
  move $v0, $s1
  beqz $v0, L_12346
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12355: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_5_41
  move $s4, $v0
  L_12356: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12354
  j L_12354
  #final label in binaryExp
  L_12354: 
  #final label in codeGenAssignmentExpression
  L_12353: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12352: 
  #final label in statem expression
  L_12351: 
  #if finish label = 12346
  L_12346:
  #if finish label = 12324
  L_12324:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12360: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12361: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12359
  j L_12359
  #final label in binaryExp
  L_12359: 
  #jumpToAllOnlyIf
  L_12358:
  move $v0, $s1
  beqz $v0, L_12357
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12366: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_3_49
  move $s4, $v0
  L_12367: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12365
  j L_12365
  #final label in binaryExp
  L_12365: 
  #final label in codeGenAssignmentExpression
  L_12364: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12363: 
  #final label in statem expression
  L_12362: 
  #if finish label = 12357
  L_12357:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12371: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12372: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12370
  j L_12370
  #final label in binaryExp
  L_12370: 
  #jumpToAllOnlyIf
  L_12369:
  move $v0, $s1
  beqz $v0, L_12368
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12377: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_5_51
  move $s4, $v0
  L_12378: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12376
  j L_12376
  #final label in binaryExp
  L_12376: 
  #final label in codeGenAssignmentExpression
  L_12375: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12374: 
  #final label in statem expression
  L_12373: 
  #if finish label = 12368
  L_12368:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12382: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12383: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12381
  j L_12381
  #final label in binaryExp
  L_12381: 
  #jumpToAllOnlyIf
  L_12380:
  move $v0, $s1
  beqz $v0, L_12379
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12387: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12388: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12386
  j L_12386
  #final label in binaryExp
  L_12386: 
  #jumpToAllOnlyIf
  L_12385:
  move $v0, $s1
  beqz $v0, L_12384
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12393: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_3_59
  move $s4, $v0
  L_12394: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12392
  j L_12392
  #final label in binaryExp
  L_12392: 
  #final label in codeGenAssignmentExpression
  L_12391: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12390: 
  #final label in statem expression
  L_12389: 
  #if finish label = 12384
  L_12384:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12399: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_4_60
  move $s4, $v0
  L_12400: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12398
  j L_12398
  #final label in binaryExp
  L_12398: 
  #final label in codeGenAssignmentExpression
  L_12397: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12396: 
  #final label in statem expression
  L_12395: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12404: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12405: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12403
  j L_12403
  #final label in binaryExp
  L_12403: 
  #jumpToAllOnlyIf
  L_12402:
  move $v0, $s1
  beqz $v0, L_12401
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12410: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_5_61
  move $s4, $v0
  L_12411: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12409
  j L_12409
  #final label in binaryExp
  L_12409: 
  #final label in codeGenAssignmentExpression
  L_12408: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12407: 
  #final label in statem expression
  L_12406: 
  #if finish label = 12401
  L_12401:
  #if finish label = 12379
  L_12379:
  j L_12318
  #inside else
  L_12320:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12416: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_12417: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12415
  j L_12415
  #final label in binaryExp
  L_12415: 
  #jumpToAllOnlyIf
  L_12413:
  move $v0, $s1
  beqz $v0, L_12414
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12421: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12422: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12420
  j L_12420
  #final label in binaryExp
  L_12420: 
  #jumpToAllOnlyIf
  L_12419:
  move $v0, $s1
  beqz $v0, L_12418
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12426: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12427: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12425
  j L_12425
  #final label in binaryExp
  L_12425: 
  #jumpToAllOnlyIf
  L_12424:
  move $v0, $s1
  beqz $v0, L_12423
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12432: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_4_40
  move $s4, $v0
  L_12433: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12431
  j L_12431
  #final label in binaryExp
  L_12431: 
  #final label in codeGenAssignmentExpression
  L_12430: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12429: 
  #final label in statem expression
  L_12428: 
  #if finish label = 12423
  L_12423:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12438: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_5_41
  move $s4, $v0
  L_12439: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12437
  j L_12437
  #final label in binaryExp
  L_12437: 
  #final label in codeGenAssignmentExpression
  L_12436: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12435: 
  #final label in statem expression
  L_12434: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12443: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12444: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12442
  j L_12442
  #final label in binaryExp
  L_12442: 
  #jumpToAllOnlyIf
  L_12441:
  move $v0, $s1
  beqz $v0, L_12440
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12449: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_6_42
  move $s4, $v0
  L_12450: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12448
  j L_12448
  #final label in binaryExp
  L_12448: 
  #final label in codeGenAssignmentExpression
  L_12447: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12446: 
  #final label in statem expression
  L_12445: 
  #if finish label = 12440
  L_12440:
  #if finish label = 12418
  L_12418:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12454: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12455: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12453
  j L_12453
  #final label in binaryExp
  L_12453: 
  #jumpToAllOnlyIf
  L_12452:
  move $v0, $s1
  beqz $v0, L_12451
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12460: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_4_50
  move $s4, $v0
  L_12461: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12459
  j L_12459
  #final label in binaryExp
  L_12459: 
  #final label in codeGenAssignmentExpression
  L_12458: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12457: 
  #final label in statem expression
  L_12456: 
  #if finish label = 12451
  L_12451:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12465: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12466: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12464
  j L_12464
  #final label in binaryExp
  L_12464: 
  #jumpToAllOnlyIf
  L_12463:
  move $v0, $s1
  beqz $v0, L_12462
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12471: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_6_52
  move $s4, $v0
  L_12472: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12470
  j L_12470
  #final label in binaryExp
  L_12470: 
  #final label in codeGenAssignmentExpression
  L_12469: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12468: 
  #final label in statem expression
  L_12467: 
  #if finish label = 12462
  L_12462:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12476: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12477: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12475
  j L_12475
  #final label in binaryExp
  L_12475: 
  #jumpToAllOnlyIf
  L_12474:
  move $v0, $s1
  beqz $v0, L_12473
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12481: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12482: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12480
  j L_12480
  #final label in binaryExp
  L_12480: 
  #jumpToAllOnlyIf
  L_12479:
  move $v0, $s1
  beqz $v0, L_12478
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12487: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_4_60
  move $s4, $v0
  L_12488: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12486
  j L_12486
  #final label in binaryExp
  L_12486: 
  #final label in codeGenAssignmentExpression
  L_12485: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12484: 
  #final label in statem expression
  L_12483: 
  #if finish label = 12478
  L_12478:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12493: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_5_61
  move $s4, $v0
  L_12494: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12492
  j L_12492
  #final label in binaryExp
  L_12492: 
  #final label in codeGenAssignmentExpression
  L_12491: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12490: 
  #final label in statem expression
  L_12489: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12498: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12499: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12497
  j L_12497
  #final label in binaryExp
  L_12497: 
  #jumpToAllOnlyIf
  L_12496:
  move $v0, $s1
  beqz $v0, L_12495
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12504: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_6_62
  move $s4, $v0
  L_12505: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12503
  j L_12503
  #final label in binaryExp
  L_12503: 
  #final label in codeGenAssignmentExpression
  L_12502: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12501: 
  #final label in statem expression
  L_12500: 
  #if finish label = 12495
  L_12495:
  #if finish label = 12473
  L_12473:
  j L_12412
  #inside else
  L_12414:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12510: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_12511: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12509
  j L_12509
  #final label in binaryExp
  L_12509: 
  #jumpToAllOnlyIf
  L_12507:
  move $v0, $s1
  beqz $v0, L_12508
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12515: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12516: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12514
  j L_12514
  #final label in binaryExp
  L_12514: 
  #jumpToAllOnlyIf
  L_12513:
  move $v0, $s1
  beqz $v0, L_12512
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_12520: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12521: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12519
  j L_12519
  #final label in binaryExp
  L_12519: 
  #jumpToAllOnlyIf
  L_12518:
  move $v0, $s1
  beqz $v0, L_12517
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12526: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_5_41
  move $s4, $v0
  L_12527: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12525
  j L_12525
  #final label in binaryExp
  L_12525: 
  #final label in codeGenAssignmentExpression
  L_12524: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12523: 
  #final label in statem expression
  L_12522: 
  #if finish label = 12517
  L_12517:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12532: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_6_42
  move $s4, $v0
  L_12533: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12531
  j L_12531
  #final label in binaryExp
  L_12531: 
  #final label in codeGenAssignmentExpression
  L_12530: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12529: 
  #final label in statem expression
  L_12528: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_12537: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12538: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12536
  j L_12536
  #final label in binaryExp
  L_12536: 
  #jumpToAllOnlyIf
  L_12535:
  move $v0, $s1
  beqz $v0, L_12534
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12543: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_7_43
  move $s4, $v0
  L_12544: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12542
  j L_12542
  #final label in binaryExp
  L_12542: 
  #final label in codeGenAssignmentExpression
  L_12541: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12540: 
  #final label in statem expression
  L_12539: 
  #if finish label = 12534
  L_12534:
  #if finish label = 12512
  L_12512:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_12548: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12549: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12547
  j L_12547
  #final label in binaryExp
  L_12547: 
  #jumpToAllOnlyIf
  L_12546:
  move $v0, $s1
  beqz $v0, L_12545
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12554: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_5_51
  move $s4, $v0
  L_12555: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12553
  j L_12553
  #final label in binaryExp
  L_12553: 
  #final label in codeGenAssignmentExpression
  L_12552: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12551: 
  #final label in statem expression
  L_12550: 
  #if finish label = 12545
  L_12545:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_12559: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12560: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12558
  j L_12558
  #final label in binaryExp
  L_12558: 
  #jumpToAllOnlyIf
  L_12557:
  move $v0, $s1
  beqz $v0, L_12556
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12565: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_7_53
  move $s4, $v0
  L_12566: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12564
  j L_12564
  #final label in binaryExp
  L_12564: 
  #final label in codeGenAssignmentExpression
  L_12563: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12562: 
  #final label in statem expression
  L_12561: 
  #if finish label = 12556
  L_12556:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12570: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12571: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12569
  j L_12569
  #final label in binaryExp
  L_12569: 
  #jumpToAllOnlyIf
  L_12568:
  move $v0, $s1
  beqz $v0, L_12567
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_12575: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12576: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12574
  j L_12574
  #final label in binaryExp
  L_12574: 
  #jumpToAllOnlyIf
  L_12573:
  move $v0, $s1
  beqz $v0, L_12572
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12581: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_5_61
  move $s4, $v0
  L_12582: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12580
  j L_12580
  #final label in binaryExp
  L_12580: 
  #final label in codeGenAssignmentExpression
  L_12579: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12578: 
  #final label in statem expression
  L_12577: 
  #if finish label = 12572
  L_12572:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12587: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_6_62
  move $s4, $v0
  L_12588: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12586
  j L_12586
  #final label in binaryExp
  L_12586: 
  #final label in codeGenAssignmentExpression
  L_12585: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12584: 
  #final label in statem expression
  L_12583: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_12592: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12593: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12591
  j L_12591
  #final label in binaryExp
  L_12591: 
  #jumpToAllOnlyIf
  L_12590:
  move $v0, $s1
  beqz $v0, L_12589
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12598: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_7_63
  move $s4, $v0
  L_12599: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12597
  j L_12597
  #final label in binaryExp
  L_12597: 
  #final label in codeGenAssignmentExpression
  L_12596: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12595: 
  #final label in statem expression
  L_12594: 
  #if finish label = 12589
  L_12589:
  #if finish label = 12567
  L_12567:
  j L_12506
  #inside else
  L_12508:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12604: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_12605: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12603
  j L_12603
  #final label in binaryExp
  L_12603: 
  #jumpToAllOnlyIf
  L_12601:
  move $v0, $s1
  beqz $v0, L_12602
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12609: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12610: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12608
  j L_12608
  #final label in binaryExp
  L_12608: 
  #jumpToAllOnlyIf
  L_12607:
  move $v0, $s1
  beqz $v0, L_12606
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_12614: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12615: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12613
  j L_12613
  #final label in binaryExp
  L_12613: 
  #jumpToAllOnlyIf
  L_12612:
  move $v0, $s1
  beqz $v0, L_12611
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12620: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_6_42
  move $s4, $v0
  L_12621: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12619
  j L_12619
  #final label in binaryExp
  L_12619: 
  #final label in codeGenAssignmentExpression
  L_12618: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12617: 
  #final label in statem expression
  L_12616: 
  #if finish label = 12611
  L_12611:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12626: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_7_43
  move $s4, $v0
  L_12627: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12625
  j L_12625
  #final label in binaryExp
  L_12625: 
  #final label in codeGenAssignmentExpression
  L_12624: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12623: 
  #final label in statem expression
  L_12622: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_12631: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12632: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12630
  j L_12630
  #final label in binaryExp
  L_12630: 
  #jumpToAllOnlyIf
  L_12629:
  move $v0, $s1
  beqz $v0, L_12628
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12637: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_8_44
  move $s4, $v0
  L_12638: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12636
  j L_12636
  #final label in binaryExp
  L_12636: 
  #final label in codeGenAssignmentExpression
  L_12635: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12634: 
  #final label in statem expression
  L_12633: 
  #if finish label = 12628
  L_12628:
  #if finish label = 12606
  L_12606:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_12642: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12643: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12641
  j L_12641
  #final label in binaryExp
  L_12641: 
  #jumpToAllOnlyIf
  L_12640:
  move $v0, $s1
  beqz $v0, L_12639
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12648: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_6_52
  move $s4, $v0
  L_12649: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12647
  j L_12647
  #final label in binaryExp
  L_12647: 
  #final label in codeGenAssignmentExpression
  L_12646: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12645: 
  #final label in statem expression
  L_12644: 
  #if finish label = 12639
  L_12639:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_12653: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12654: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12652
  j L_12652
  #final label in binaryExp
  L_12652: 
  #jumpToAllOnlyIf
  L_12651:
  move $v0, $s1
  beqz $v0, L_12650
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12659: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_8_54
  move $s4, $v0
  L_12660: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12658
  j L_12658
  #final label in binaryExp
  L_12658: 
  #final label in codeGenAssignmentExpression
  L_12657: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12656: 
  #final label in statem expression
  L_12655: 
  #if finish label = 12650
  L_12650:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12664: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12665: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12663
  j L_12663
  #final label in binaryExp
  L_12663: 
  #jumpToAllOnlyIf
  L_12662:
  move $v0, $s1
  beqz $v0, L_12661
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_12669: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12670: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12668
  j L_12668
  #final label in binaryExp
  L_12668: 
  #jumpToAllOnlyIf
  L_12667:
  move $v0, $s1
  beqz $v0, L_12666
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12675: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_6_62
  move $s4, $v0
  L_12676: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12674
  j L_12674
  #final label in binaryExp
  L_12674: 
  #final label in codeGenAssignmentExpression
  L_12673: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12672: 
  #final label in statem expression
  L_12671: 
  #if finish label = 12666
  L_12666:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12681: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_7_63
  move $s4, $v0
  L_12682: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12680
  j L_12680
  #final label in binaryExp
  L_12680: 
  #final label in codeGenAssignmentExpression
  L_12679: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12678: 
  #final label in statem expression
  L_12677: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_12686: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12687: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12685
  j L_12685
  #final label in binaryExp
  L_12685: 
  #jumpToAllOnlyIf
  L_12684:
  move $v0, $s1
  beqz $v0, L_12683
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12692: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_8_64
  move $s4, $v0
  L_12693: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12691
  j L_12691
  #final label in binaryExp
  L_12691: 
  #final label in codeGenAssignmentExpression
  L_12690: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12689: 
  #final label in statem expression
  L_12688: 
  #if finish label = 12683
  L_12683:
  #if finish label = 12661
  L_12661:
  j L_12600
  #inside else
  L_12602:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12698: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_12699: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12697
  j L_12697
  #final label in binaryExp
  L_12697: 
  #jumpToAllOnlyIf
  L_12695:
  move $v0, $s1
  beqz $v0, L_12696
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12703: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12704: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12702
  j L_12702
  #final label in binaryExp
  L_12702: 
  #jumpToAllOnlyIf
  L_12701:
  move $v0, $s1
  beqz $v0, L_12700
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_12708: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12709: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12707
  j L_12707
  #final label in binaryExp
  L_12707: 
  #jumpToAllOnlyIf
  L_12706:
  move $v0, $s1
  beqz $v0, L_12705
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12714: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_7_43
  move $s4, $v0
  L_12715: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12713
  j L_12713
  #final label in binaryExp
  L_12713: 
  #final label in codeGenAssignmentExpression
  L_12712: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12711: 
  #final label in statem expression
  L_12710: 
  #if finish label = 12705
  L_12705:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12720: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_8_44
  move $s4, $v0
  L_12721: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12719
  j L_12719
  #final label in binaryExp
  L_12719: 
  #final label in codeGenAssignmentExpression
  L_12718: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12717: 
  #final label in statem expression
  L_12716: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_12725: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12726: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12724
  j L_12724
  #final label in binaryExp
  L_12724: 
  #jumpToAllOnlyIf
  L_12723:
  move $v0, $s1
  beqz $v0, L_12722
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12731: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_9_45
  move $s4, $v0
  L_12732: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12730
  j L_12730
  #final label in binaryExp
  L_12730: 
  #final label in codeGenAssignmentExpression
  L_12729: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12728: 
  #final label in statem expression
  L_12727: 
  #if finish label = 12722
  L_12722:
  #if finish label = 12700
  L_12700:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_12736: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12737: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12735
  j L_12735
  #final label in binaryExp
  L_12735: 
  #jumpToAllOnlyIf
  L_12734:
  move $v0, $s1
  beqz $v0, L_12733
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12742: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_7_53
  move $s4, $v0
  L_12743: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12741
  j L_12741
  #final label in binaryExp
  L_12741: 
  #final label in codeGenAssignmentExpression
  L_12740: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12739: 
  #final label in statem expression
  L_12738: 
  #if finish label = 12733
  L_12733:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_12747: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12748: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12746
  j L_12746
  #final label in binaryExp
  L_12746: 
  #jumpToAllOnlyIf
  L_12745:
  move $v0, $s1
  beqz $v0, L_12744
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12753: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_9_55
  move $s4, $v0
  L_12754: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12752
  j L_12752
  #final label in binaryExp
  L_12752: 
  #final label in codeGenAssignmentExpression
  L_12751: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12750: 
  #final label in statem expression
  L_12749: 
  #if finish label = 12744
  L_12744:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12758: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12759: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12757
  j L_12757
  #final label in binaryExp
  L_12757: 
  #jumpToAllOnlyIf
  L_12756:
  move $v0, $s1
  beqz $v0, L_12755
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_12763: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12764: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12762
  j L_12762
  #final label in binaryExp
  L_12762: 
  #jumpToAllOnlyIf
  L_12761:
  move $v0, $s1
  beqz $v0, L_12760
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12769: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_7_63
  move $s4, $v0
  L_12770: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12768
  j L_12768
  #final label in binaryExp
  L_12768: 
  #final label in codeGenAssignmentExpression
  L_12767: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12766: 
  #final label in statem expression
  L_12765: 
  #if finish label = 12760
  L_12760:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12775: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_8_64
  move $s4, $v0
  L_12776: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12774
  j L_12774
  #final label in binaryExp
  L_12774: 
  #final label in codeGenAssignmentExpression
  L_12773: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12772: 
  #final label in statem expression
  L_12771: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_12780: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12781: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12779
  j L_12779
  #final label in binaryExp
  L_12779: 
  #jumpToAllOnlyIf
  L_12778:
  move $v0, $s1
  beqz $v0, L_12777
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12786: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_9_65
  move $s4, $v0
  L_12787: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12785
  j L_12785
  #final label in binaryExp
  L_12785: 
  #final label in codeGenAssignmentExpression
  L_12784: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12783: 
  #final label in statem expression
  L_12782: 
  #if finish label = 12777
  L_12777:
  #if finish label = 12755
  L_12755:
  j L_12694
  #inside else
  L_12696:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12791: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12792: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12790
  j L_12790
  #final label in binaryExp
  L_12790: 
  #jumpToAllOnlyIf
  L_12789:
  move $v0, $s1
  beqz $v0, L_12788
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12796: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12797: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12795
  j L_12795
  #final label in binaryExp
  L_12795: 
  #jumpToAllOnlyIf
  L_12794:
  move $v0, $s1
  beqz $v0, L_12793
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_12801: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12802: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12800
  j L_12800
  #final label in binaryExp
  L_12800: 
  #jumpToAllOnlyIf
  L_12799:
  move $v0, $s1
  beqz $v0, L_12798
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12807: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_8_44
  move $s4, $v0
  L_12808: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12806
  j L_12806
  #final label in binaryExp
  L_12806: 
  #final label in codeGenAssignmentExpression
  L_12805: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12804: 
  #final label in statem expression
  L_12803: 
  #if finish label = 12798
  L_12798:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12813: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_3_9_45
  move $s4, $v0
  L_12814: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12812
  j L_12812
  #final label in binaryExp
  L_12812: 
  #final label in codeGenAssignmentExpression
  L_12811: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12810: 
  #final label in statem expression
  L_12809: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_12818: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12819: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12817
  j L_12817
  #final label in binaryExp
  L_12817: 
  #jumpToAllOnlyIf
  L_12816:
  move $v0, $s1
  beqz $v0, L_12815
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12824: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_12825: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12823
  j L_12823
  #final label in binaryExp
  L_12823: 
  #final label in codeGenAssignmentExpression
  L_12822: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12821: 
  #final label in statem expression
  L_12820: 
  #if finish label = 12815
  L_12815:
  #if finish label = 12793
  L_12793:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_12829: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12830: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12828
  j L_12828
  #final label in binaryExp
  L_12828: 
  #jumpToAllOnlyIf
  L_12827:
  move $v0, $s1
  beqz $v0, L_12826
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12835: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_8_54
  move $s4, $v0
  L_12836: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12834
  j L_12834
  #final label in binaryExp
  L_12834: 
  #final label in codeGenAssignmentExpression
  L_12833: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12832: 
  #final label in statem expression
  L_12831: 
  #if finish label = 12826
  L_12826:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_12840: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12841: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12839
  j L_12839
  #final label in binaryExp
  L_12839: 
  #jumpToAllOnlyIf
  L_12838:
  move $v0, $s1
  beqz $v0, L_12837
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12846: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_12847: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12845
  j L_12845
  #final label in binaryExp
  L_12845: 
  #final label in codeGenAssignmentExpression
  L_12844: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12843: 
  #final label in statem expression
  L_12842: 
  #if finish label = 12837
  L_12837:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_12851: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12852: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12850
  j L_12850
  #final label in binaryExp
  L_12850: 
  #jumpToAllOnlyIf
  L_12849:
  move $v0, $s1
  beqz $v0, L_12848
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_12856: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12857: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12855
  j L_12855
  #final label in binaryExp
  L_12855: 
  #jumpToAllOnlyIf
  L_12854:
  move $v0, $s1
  beqz $v0, L_12853
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12862: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_8_64
  move $s4, $v0
  L_12863: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12861
  j L_12861
  #final label in binaryExp
  L_12861: 
  #final label in codeGenAssignmentExpression
  L_12860: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12859: 
  #final label in statem expression
  L_12858: 
  #if finish label = 12853
  L_12853:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12868: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_9_65
  move $s4, $v0
  L_12869: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12867
  j L_12867
  #final label in binaryExp
  L_12867: 
  #final label in codeGenAssignmentExpression
  L_12866: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12865: 
  #final label in statem expression
  L_12864: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_12873: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12874: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12872
  j L_12872
  #final label in binaryExp
  L_12872: 
  #jumpToAllOnlyIf
  L_12871:
  move $v0, $s1
  beqz $v0, L_12870
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12879: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_12880: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12878
  j L_12878
  #final label in binaryExp
  L_12878: 
  #final label in codeGenAssignmentExpression
  L_12877: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12876: 
  #final label in statem expression
  L_12875: 
  #if finish label = 12870
  L_12870:
  #if finish label = 12848
  L_12848:
  #if finish label = 12788
  L_12788:
  #if finish label = 12694
  L_12694:
  #if finish label = 12600
  L_12600:
  #if finish label = 12506
  L_12506:
  #if finish label = 12412
  L_12412:
  #if finish label = 12318
  L_12318:
  #if finish label = 12224
  L_12224:
  #if finish label = 12130
  L_12130:
  #if finish label = 12036
  L_12036:
  #if finish label = 11942
  L_11942:
  j L_11936
  #inside else
  L_11938:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_12885: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_12886: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12884
  j L_12884
  #final label in binaryExp
  L_12884: 
  #jumpToAllOnlyIf
  L_12882:
  move $v0, $s1
  beqz $v0, L_12883
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12891: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12892: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12890
  j L_12890
  #final label in binaryExp
  L_12890: 
  #jumpToAllOnlyIf
  L_12888:
  move $v0, $s1
  beqz $v0, L_12889
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12896: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12897: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12895
  j L_12895
  #final label in binaryExp
  L_12895: 
  #jumpToAllOnlyIf
  L_12894:
  move $v0, $s1
  beqz $v0, L_12893
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_12901: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12902: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12900
  j L_12900
  #final label in binaryExp
  L_12900: 
  #jumpToAllOnlyIf
  L_12899:
  move $v0, $s1
  beqz $v0, L_12898
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12907: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_12908: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12906
  j L_12906
  #final label in binaryExp
  L_12906: 
  #final label in codeGenAssignmentExpression
  L_12905: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12904: 
  #final label in statem expression
  L_12903: 
  #if finish label = 12898
  L_12898:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12913: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_0_46
  move $s4, $v0
  L_12914: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12912
  j L_12912
  #final label in binaryExp
  L_12912: 
  #final label in codeGenAssignmentExpression
  L_12911: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12910: 
  #final label in statem expression
  L_12909: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_12918: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12919: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12917
  j L_12917
  #final label in binaryExp
  L_12917: 
  #jumpToAllOnlyIf
  L_12916:
  move $v0, $s1
  beqz $v0, L_12915
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12924: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_1_47
  move $s4, $v0
  L_12925: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12923
  j L_12923
  #final label in binaryExp
  L_12923: 
  #final label in codeGenAssignmentExpression
  L_12922: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12921: 
  #final label in statem expression
  L_12920: 
  #if finish label = 12915
  L_12915:
  #if finish label = 12893
  L_12893:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_12929: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12930: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12928
  j L_12928
  #final label in binaryExp
  L_12928: 
  #jumpToAllOnlyIf
  L_12927:
  move $v0, $s1
  beqz $v0, L_12926
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12935: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_12936: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12934
  j L_12934
  #final label in binaryExp
  L_12934: 
  #final label in codeGenAssignmentExpression
  L_12933: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12932: 
  #final label in statem expression
  L_12931: 
  #if finish label = 12926
  L_12926:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_12940: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12941: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12939
  j L_12939
  #final label in binaryExp
  L_12939: 
  #jumpToAllOnlyIf
  L_12938:
  move $v0, $s1
  beqz $v0, L_12937
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12946: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_1_57
  move $s4, $v0
  L_12947: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12945
  j L_12945
  #final label in binaryExp
  L_12945: 
  #final label in codeGenAssignmentExpression
  L_12944: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12943: 
  #final label in statem expression
  L_12942: 
  #if finish label = 12937
  L_12937:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12951: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12952: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12950
  j L_12950
  #final label in binaryExp
  L_12950: 
  #jumpToAllOnlyIf
  L_12949:
  move $v0, $s1
  beqz $v0, L_12948
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_12956: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12957: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12955
  j L_12955
  #final label in binaryExp
  L_12955: 
  #jumpToAllOnlyIf
  L_12954:
  move $v0, $s1
  beqz $v0, L_12953
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12962: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_12963: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12961
  j L_12961
  #final label in binaryExp
  L_12961: 
  #final label in codeGenAssignmentExpression
  L_12960: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12959: 
  #final label in statem expression
  L_12958: 
  #if finish label = 12953
  L_12953:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12968: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_0_66
  move $s4, $v0
  L_12969: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12967
  j L_12967
  #final label in binaryExp
  L_12967: 
  #final label in codeGenAssignmentExpression
  L_12966: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12965: 
  #final label in statem expression
  L_12964: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_12973: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_12974: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12972
  j L_12972
  #final label in binaryExp
  L_12972: 
  #jumpToAllOnlyIf
  L_12971:
  move $v0, $s1
  beqz $v0, L_12970
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_12979: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_1_67
  move $s4, $v0
  L_12980: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_12978
  j L_12978
  #final label in binaryExp
  L_12978: 
  #final label in codeGenAssignmentExpression
  L_12977: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12976: 
  #final label in statem expression
  L_12975: 
  #if finish label = 12970
  L_12970:
  #if finish label = 12948
  L_12948:
  j L_12887
  #inside else
  L_12889:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_12985: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_12986: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12984
  j L_12984
  #final label in binaryExp
  L_12984: 
  #jumpToAllOnlyIf
  L_12982:
  move $v0, $s1
  beqz $v0, L_12983
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_12990: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12991: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12989
  j L_12989
  #final label in binaryExp
  L_12989: 
  #jumpToAllOnlyIf
  L_12988:
  move $v0, $s1
  beqz $v0, L_12987
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_12995: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_12996: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_12994
  j L_12994
  #final label in binaryExp
  L_12994: 
  #jumpToAllOnlyIf
  L_12993:
  move $v0, $s1
  beqz $v0, L_12992
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13001: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_0_46
  move $s4, $v0
  L_13002: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13000
  j L_13000
  #final label in binaryExp
  L_13000: 
  #final label in codeGenAssignmentExpression
  L_12999: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_12998: 
  #final label in statem expression
  L_12997: 
  #if finish label = 12992
  L_12992:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13007: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_1_47
  move $s4, $v0
  L_13008: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13006
  j L_13006
  #final label in binaryExp
  L_13006: 
  #final label in codeGenAssignmentExpression
  L_13005: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13004: 
  #final label in statem expression
  L_13003: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13012: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13013: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13011
  j L_13011
  #final label in binaryExp
  L_13011: 
  #jumpToAllOnlyIf
  L_13010:
  move $v0, $s1
  beqz $v0, L_13009
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13018: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_2_48
  move $s4, $v0
  L_13019: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13017
  j L_13017
  #final label in binaryExp
  L_13017: 
  #final label in codeGenAssignmentExpression
  L_13016: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13015: 
  #final label in statem expression
  L_13014: 
  #if finish label = 13009
  L_13009:
  #if finish label = 12987
  L_12987:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13023: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13024: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13022
  j L_13022
  #final label in binaryExp
  L_13022: 
  #jumpToAllOnlyIf
  L_13021:
  move $v0, $s1
  beqz $v0, L_13020
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13029: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_0_56
  move $s4, $v0
  L_13030: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13028
  j L_13028
  #final label in binaryExp
  L_13028: 
  #final label in codeGenAssignmentExpression
  L_13027: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13026: 
  #final label in statem expression
  L_13025: 
  #if finish label = 13020
  L_13020:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13034: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13035: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13033
  j L_13033
  #final label in binaryExp
  L_13033: 
  #jumpToAllOnlyIf
  L_13032:
  move $v0, $s1
  beqz $v0, L_13031
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13040: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_2_58
  move $s4, $v0
  L_13041: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13039
  j L_13039
  #final label in binaryExp
  L_13039: 
  #final label in codeGenAssignmentExpression
  L_13038: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13037: 
  #final label in statem expression
  L_13036: 
  #if finish label = 13031
  L_13031:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13045: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13046: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13044
  j L_13044
  #final label in binaryExp
  L_13044: 
  #jumpToAllOnlyIf
  L_13043:
  move $v0, $s1
  beqz $v0, L_13042
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13050: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13051: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13049
  j L_13049
  #final label in binaryExp
  L_13049: 
  #jumpToAllOnlyIf
  L_13048:
  move $v0, $s1
  beqz $v0, L_13047
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13056: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_0_66
  move $s4, $v0
  L_13057: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13055
  j L_13055
  #final label in binaryExp
  L_13055: 
  #final label in codeGenAssignmentExpression
  L_13054: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13053: 
  #final label in statem expression
  L_13052: 
  #if finish label = 13047
  L_13047:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13062: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_1_67
  move $s4, $v0
  L_13063: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13061
  j L_13061
  #final label in binaryExp
  L_13061: 
  #final label in codeGenAssignmentExpression
  L_13060: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13059: 
  #final label in statem expression
  L_13058: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13067: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13068: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13066
  j L_13066
  #final label in binaryExp
  L_13066: 
  #jumpToAllOnlyIf
  L_13065:
  move $v0, $s1
  beqz $v0, L_13064
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13073: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_2_68
  move $s4, $v0
  L_13074: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13072
  j L_13072
  #final label in binaryExp
  L_13072: 
  #final label in codeGenAssignmentExpression
  L_13071: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13070: 
  #final label in statem expression
  L_13069: 
  #if finish label = 13064
  L_13064:
  #if finish label = 13042
  L_13042:
  j L_12981
  #inside else
  L_12983:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13079: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_13080: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13078
  j L_13078
  #final label in binaryExp
  L_13078: 
  #jumpToAllOnlyIf
  L_13076:
  move $v0, $s1
  beqz $v0, L_13077
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13084: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13085: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13083
  j L_13083
  #final label in binaryExp
  L_13083: 
  #jumpToAllOnlyIf
  L_13082:
  move $v0, $s1
  beqz $v0, L_13081
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_13089: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13090: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13088
  j L_13088
  #final label in binaryExp
  L_13088: 
  #jumpToAllOnlyIf
  L_13087:
  move $v0, $s1
  beqz $v0, L_13086
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13095: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_1_47
  move $s4, $v0
  L_13096: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13094
  j L_13094
  #final label in binaryExp
  L_13094: 
  #final label in codeGenAssignmentExpression
  L_13093: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13092: 
  #final label in statem expression
  L_13091: 
  #if finish label = 13086
  L_13086:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13101: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_2_48
  move $s4, $v0
  L_13102: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13100
  j L_13100
  #final label in binaryExp
  L_13100: 
  #final label in codeGenAssignmentExpression
  L_13099: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13098: 
  #final label in statem expression
  L_13097: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_13106: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13107: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13105
  j L_13105
  #final label in binaryExp
  L_13105: 
  #jumpToAllOnlyIf
  L_13104:
  move $v0, $s1
  beqz $v0, L_13103
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13112: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_3_49
  move $s4, $v0
  L_13113: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13111
  j L_13111
  #final label in binaryExp
  L_13111: 
  #final label in codeGenAssignmentExpression
  L_13110: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13109: 
  #final label in statem expression
  L_13108: 
  #if finish label = 13103
  L_13103:
  #if finish label = 13081
  L_13081:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_13117: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13118: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13116
  j L_13116
  #final label in binaryExp
  L_13116: 
  #jumpToAllOnlyIf
  L_13115:
  move $v0, $s1
  beqz $v0, L_13114
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13123: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_1_57
  move $s4, $v0
  L_13124: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13122
  j L_13122
  #final label in binaryExp
  L_13122: 
  #final label in codeGenAssignmentExpression
  L_13121: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13120: 
  #final label in statem expression
  L_13119: 
  #if finish label = 13114
  L_13114:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_13128: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13129: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13127
  j L_13127
  #final label in binaryExp
  L_13127: 
  #jumpToAllOnlyIf
  L_13126:
  move $v0, $s1
  beqz $v0, L_13125
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13134: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_3_59
  move $s4, $v0
  L_13135: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13133
  j L_13133
  #final label in binaryExp
  L_13133: 
  #final label in codeGenAssignmentExpression
  L_13132: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13131: 
  #final label in statem expression
  L_13130: 
  #if finish label = 13125
  L_13125:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13139: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13140: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13138
  j L_13138
  #final label in binaryExp
  L_13138: 
  #jumpToAllOnlyIf
  L_13137:
  move $v0, $s1
  beqz $v0, L_13136
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_13144: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13145: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13143
  j L_13143
  #final label in binaryExp
  L_13143: 
  #jumpToAllOnlyIf
  L_13142:
  move $v0, $s1
  beqz $v0, L_13141
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13150: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_1_67
  move $s4, $v0
  L_13151: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13149
  j L_13149
  #final label in binaryExp
  L_13149: 
  #final label in codeGenAssignmentExpression
  L_13148: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13147: 
  #final label in statem expression
  L_13146: 
  #if finish label = 13141
  L_13141:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13156: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_2_68
  move $s4, $v0
  L_13157: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13155
  j L_13155
  #final label in binaryExp
  L_13155: 
  #final label in codeGenAssignmentExpression
  L_13154: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13153: 
  #final label in statem expression
  L_13152: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_13161: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13162: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13160
  j L_13160
  #final label in binaryExp
  L_13160: 
  #jumpToAllOnlyIf
  L_13159:
  move $v0, $s1
  beqz $v0, L_13158
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13167: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_3_69
  move $s4, $v0
  L_13168: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13166
  j L_13166
  #final label in binaryExp
  L_13166: 
  #final label in codeGenAssignmentExpression
  L_13165: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13164: 
  #final label in statem expression
  L_13163: 
  #if finish label = 13158
  L_13158:
  #if finish label = 13136
  L_13136:
  j L_13075
  #inside else
  L_13077:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13173: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_13174: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13172
  j L_13172
  #final label in binaryExp
  L_13172: 
  #jumpToAllOnlyIf
  L_13170:
  move $v0, $s1
  beqz $v0, L_13171
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13178: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13179: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13177
  j L_13177
  #final label in binaryExp
  L_13177: 
  #jumpToAllOnlyIf
  L_13176:
  move $v0, $s1
  beqz $v0, L_13175
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_13183: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13184: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13182
  j L_13182
  #final label in binaryExp
  L_13182: 
  #jumpToAllOnlyIf
  L_13181:
  move $v0, $s1
  beqz $v0, L_13180
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13189: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_2_48
  move $s4, $v0
  L_13190: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13188
  j L_13188
  #final label in binaryExp
  L_13188: 
  #final label in codeGenAssignmentExpression
  L_13187: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13186: 
  #final label in statem expression
  L_13185: 
  #if finish label = 13180
  L_13180:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13195: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_3_49
  move $s4, $v0
  L_13196: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13194
  j L_13194
  #final label in binaryExp
  L_13194: 
  #final label in codeGenAssignmentExpression
  L_13193: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13192: 
  #final label in statem expression
  L_13191: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_13200: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13201: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13199
  j L_13199
  #final label in binaryExp
  L_13199: 
  #jumpToAllOnlyIf
  L_13198:
  move $v0, $s1
  beqz $v0, L_13197
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13206: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_4_50
  move $s4, $v0
  L_13207: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13205
  j L_13205
  #final label in binaryExp
  L_13205: 
  #final label in codeGenAssignmentExpression
  L_13204: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13203: 
  #final label in statem expression
  L_13202: 
  #if finish label = 13197
  L_13197:
  #if finish label = 13175
  L_13175:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_13211: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13212: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13210
  j L_13210
  #final label in binaryExp
  L_13210: 
  #jumpToAllOnlyIf
  L_13209:
  move $v0, $s1
  beqz $v0, L_13208
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13217: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_2_58
  move $s4, $v0
  L_13218: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13216
  j L_13216
  #final label in binaryExp
  L_13216: 
  #final label in codeGenAssignmentExpression
  L_13215: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13214: 
  #final label in statem expression
  L_13213: 
  #if finish label = 13208
  L_13208:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_13222: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13223: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13221
  j L_13221
  #final label in binaryExp
  L_13221: 
  #jumpToAllOnlyIf
  L_13220:
  move $v0, $s1
  beqz $v0, L_13219
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13228: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_4_60
  move $s4, $v0
  L_13229: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13227
  j L_13227
  #final label in binaryExp
  L_13227: 
  #final label in codeGenAssignmentExpression
  L_13226: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13225: 
  #final label in statem expression
  L_13224: 
  #if finish label = 13219
  L_13219:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13233: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13234: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13232
  j L_13232
  #final label in binaryExp
  L_13232: 
  #jumpToAllOnlyIf
  L_13231:
  move $v0, $s1
  beqz $v0, L_13230
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_13238: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13239: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13237
  j L_13237
  #final label in binaryExp
  L_13237: 
  #jumpToAllOnlyIf
  L_13236:
  move $v0, $s1
  beqz $v0, L_13235
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13244: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_2_68
  move $s4, $v0
  L_13245: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13243
  j L_13243
  #final label in binaryExp
  L_13243: 
  #final label in codeGenAssignmentExpression
  L_13242: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13241: 
  #final label in statem expression
  L_13240: 
  #if finish label = 13235
  L_13235:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13250: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_3_69
  move $s4, $v0
  L_13251: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13249
  j L_13249
  #final label in binaryExp
  L_13249: 
  #final label in codeGenAssignmentExpression
  L_13248: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13247: 
  #final label in statem expression
  L_13246: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_13255: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13256: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13254
  j L_13254
  #final label in binaryExp
  L_13254: 
  #jumpToAllOnlyIf
  L_13253:
  move $v0, $s1
  beqz $v0, L_13252
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13261: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_4_70
  move $s4, $v0
  L_13262: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13260
  j L_13260
  #final label in binaryExp
  L_13260: 
  #final label in codeGenAssignmentExpression
  L_13259: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13258: 
  #final label in statem expression
  L_13257: 
  #if finish label = 13252
  L_13252:
  #if finish label = 13230
  L_13230:
  j L_13169
  #inside else
  L_13171:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13267: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_13268: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13266
  j L_13266
  #final label in binaryExp
  L_13266: 
  #jumpToAllOnlyIf
  L_13264:
  move $v0, $s1
  beqz $v0, L_13265
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13272: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13273: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13271
  j L_13271
  #final label in binaryExp
  L_13271: 
  #jumpToAllOnlyIf
  L_13270:
  move $v0, $s1
  beqz $v0, L_13269
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_13277: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13278: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13276
  j L_13276
  #final label in binaryExp
  L_13276: 
  #jumpToAllOnlyIf
  L_13275:
  move $v0, $s1
  beqz $v0, L_13274
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13283: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_3_49
  move $s4, $v0
  L_13284: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13282
  j L_13282
  #final label in binaryExp
  L_13282: 
  #final label in codeGenAssignmentExpression
  L_13281: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13280: 
  #final label in statem expression
  L_13279: 
  #if finish label = 13274
  L_13274:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13289: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_4_50
  move $s4, $v0
  L_13290: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13288
  j L_13288
  #final label in binaryExp
  L_13288: 
  #final label in codeGenAssignmentExpression
  L_13287: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13286: 
  #final label in statem expression
  L_13285: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_13294: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13295: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13293
  j L_13293
  #final label in binaryExp
  L_13293: 
  #jumpToAllOnlyIf
  L_13292:
  move $v0, $s1
  beqz $v0, L_13291
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13300: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_5_51
  move $s4, $v0
  L_13301: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13299
  j L_13299
  #final label in binaryExp
  L_13299: 
  #final label in codeGenAssignmentExpression
  L_13298: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13297: 
  #final label in statem expression
  L_13296: 
  #if finish label = 13291
  L_13291:
  #if finish label = 13269
  L_13269:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_13305: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13306: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13304
  j L_13304
  #final label in binaryExp
  L_13304: 
  #jumpToAllOnlyIf
  L_13303:
  move $v0, $s1
  beqz $v0, L_13302
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13311: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_3_59
  move $s4, $v0
  L_13312: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13310
  j L_13310
  #final label in binaryExp
  L_13310: 
  #final label in codeGenAssignmentExpression
  L_13309: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13308: 
  #final label in statem expression
  L_13307: 
  #if finish label = 13302
  L_13302:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_13316: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13317: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13315
  j L_13315
  #final label in binaryExp
  L_13315: 
  #jumpToAllOnlyIf
  L_13314:
  move $v0, $s1
  beqz $v0, L_13313
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13322: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_5_61
  move $s4, $v0
  L_13323: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13321
  j L_13321
  #final label in binaryExp
  L_13321: 
  #final label in codeGenAssignmentExpression
  L_13320: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13319: 
  #final label in statem expression
  L_13318: 
  #if finish label = 13313
  L_13313:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13327: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13328: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13326
  j L_13326
  #final label in binaryExp
  L_13326: 
  #jumpToAllOnlyIf
  L_13325:
  move $v0, $s1
  beqz $v0, L_13324
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_13332: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13333: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13331
  j L_13331
  #final label in binaryExp
  L_13331: 
  #jumpToAllOnlyIf
  L_13330:
  move $v0, $s1
  beqz $v0, L_13329
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13338: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_3_69
  move $s4, $v0
  L_13339: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13337
  j L_13337
  #final label in binaryExp
  L_13337: 
  #final label in codeGenAssignmentExpression
  L_13336: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13335: 
  #final label in statem expression
  L_13334: 
  #if finish label = 13329
  L_13329:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13344: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_4_70
  move $s4, $v0
  L_13345: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13343
  j L_13343
  #final label in binaryExp
  L_13343: 
  #final label in codeGenAssignmentExpression
  L_13342: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13341: 
  #final label in statem expression
  L_13340: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_13349: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13350: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13348
  j L_13348
  #final label in binaryExp
  L_13348: 
  #jumpToAllOnlyIf
  L_13347:
  move $v0, $s1
  beqz $v0, L_13346
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13355: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_5_71
  move $s4, $v0
  L_13356: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13354
  j L_13354
  #final label in binaryExp
  L_13354: 
  #final label in codeGenAssignmentExpression
  L_13353: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13352: 
  #final label in statem expression
  L_13351: 
  #if finish label = 13346
  L_13346:
  #if finish label = 13324
  L_13324:
  j L_13263
  #inside else
  L_13265:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13361: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_13362: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13360
  j L_13360
  #final label in binaryExp
  L_13360: 
  #jumpToAllOnlyIf
  L_13358:
  move $v0, $s1
  beqz $v0, L_13359
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13366: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13367: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13365
  j L_13365
  #final label in binaryExp
  L_13365: 
  #jumpToAllOnlyIf
  L_13364:
  move $v0, $s1
  beqz $v0, L_13363
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13371: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13372: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13370
  j L_13370
  #final label in binaryExp
  L_13370: 
  #jumpToAllOnlyIf
  L_13369:
  move $v0, $s1
  beqz $v0, L_13368
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13377: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_4_50
  move $s4, $v0
  L_13378: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13376
  j L_13376
  #final label in binaryExp
  L_13376: 
  #final label in codeGenAssignmentExpression
  L_13375: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13374: 
  #final label in statem expression
  L_13373: 
  #if finish label = 13368
  L_13368:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13383: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_5_51
  move $s4, $v0
  L_13384: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13382
  j L_13382
  #final label in binaryExp
  L_13382: 
  #final label in codeGenAssignmentExpression
  L_13381: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13380: 
  #final label in statem expression
  L_13379: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13388: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13389: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13387
  j L_13387
  #final label in binaryExp
  L_13387: 
  #jumpToAllOnlyIf
  L_13386:
  move $v0, $s1
  beqz $v0, L_13385
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13394: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_6_52
  move $s4, $v0
  L_13395: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13393
  j L_13393
  #final label in binaryExp
  L_13393: 
  #final label in codeGenAssignmentExpression
  L_13392: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13391: 
  #final label in statem expression
  L_13390: 
  #if finish label = 13385
  L_13385:
  #if finish label = 13363
  L_13363:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13399: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13400: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13398
  j L_13398
  #final label in binaryExp
  L_13398: 
  #jumpToAllOnlyIf
  L_13397:
  move $v0, $s1
  beqz $v0, L_13396
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13405: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_4_60
  move $s4, $v0
  L_13406: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13404
  j L_13404
  #final label in binaryExp
  L_13404: 
  #final label in codeGenAssignmentExpression
  L_13403: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13402: 
  #final label in statem expression
  L_13401: 
  #if finish label = 13396
  L_13396:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13410: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13411: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13409
  j L_13409
  #final label in binaryExp
  L_13409: 
  #jumpToAllOnlyIf
  L_13408:
  move $v0, $s1
  beqz $v0, L_13407
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13416: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_6_62
  move $s4, $v0
  L_13417: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13415
  j L_13415
  #final label in binaryExp
  L_13415: 
  #final label in codeGenAssignmentExpression
  L_13414: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13413: 
  #final label in statem expression
  L_13412: 
  #if finish label = 13407
  L_13407:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13421: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13422: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13420
  j L_13420
  #final label in binaryExp
  L_13420: 
  #jumpToAllOnlyIf
  L_13419:
  move $v0, $s1
  beqz $v0, L_13418
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13426: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13427: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13425
  j L_13425
  #final label in binaryExp
  L_13425: 
  #jumpToAllOnlyIf
  L_13424:
  move $v0, $s1
  beqz $v0, L_13423
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13432: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_4_70
  move $s4, $v0
  L_13433: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13431
  j L_13431
  #final label in binaryExp
  L_13431: 
  #final label in codeGenAssignmentExpression
  L_13430: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13429: 
  #final label in statem expression
  L_13428: 
  #if finish label = 13423
  L_13423:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13438: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_5_71
  move $s4, $v0
  L_13439: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13437
  j L_13437
  #final label in binaryExp
  L_13437: 
  #final label in codeGenAssignmentExpression
  L_13436: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13435: 
  #final label in statem expression
  L_13434: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13443: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13444: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13442
  j L_13442
  #final label in binaryExp
  L_13442: 
  #jumpToAllOnlyIf
  L_13441:
  move $v0, $s1
  beqz $v0, L_13440
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13449: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_6_72
  move $s4, $v0
  L_13450: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13448
  j L_13448
  #final label in binaryExp
  L_13448: 
  #final label in codeGenAssignmentExpression
  L_13447: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13446: 
  #final label in statem expression
  L_13445: 
  #if finish label = 13440
  L_13440:
  #if finish label = 13418
  L_13418:
  j L_13357
  #inside else
  L_13359:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13455: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_13456: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13454
  j L_13454
  #final label in binaryExp
  L_13454: 
  #jumpToAllOnlyIf
  L_13452:
  move $v0, $s1
  beqz $v0, L_13453
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13460: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13461: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13459
  j L_13459
  #final label in binaryExp
  L_13459: 
  #jumpToAllOnlyIf
  L_13458:
  move $v0, $s1
  beqz $v0, L_13457
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13465: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13466: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13464
  j L_13464
  #final label in binaryExp
  L_13464: 
  #jumpToAllOnlyIf
  L_13463:
  move $v0, $s1
  beqz $v0, L_13462
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13471: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_5_51
  move $s4, $v0
  L_13472: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13470
  j L_13470
  #final label in binaryExp
  L_13470: 
  #final label in codeGenAssignmentExpression
  L_13469: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13468: 
  #final label in statem expression
  L_13467: 
  #if finish label = 13462
  L_13462:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13477: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_6_52
  move $s4, $v0
  L_13478: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13476
  j L_13476
  #final label in binaryExp
  L_13476: 
  #final label in codeGenAssignmentExpression
  L_13475: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13474: 
  #final label in statem expression
  L_13473: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13482: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13483: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13481
  j L_13481
  #final label in binaryExp
  L_13481: 
  #jumpToAllOnlyIf
  L_13480:
  move $v0, $s1
  beqz $v0, L_13479
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13488: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_7_53
  move $s4, $v0
  L_13489: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13487
  j L_13487
  #final label in binaryExp
  L_13487: 
  #final label in codeGenAssignmentExpression
  L_13486: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13485: 
  #final label in statem expression
  L_13484: 
  #if finish label = 13479
  L_13479:
  #if finish label = 13457
  L_13457:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13493: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13494: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13492
  j L_13492
  #final label in binaryExp
  L_13492: 
  #jumpToAllOnlyIf
  L_13491:
  move $v0, $s1
  beqz $v0, L_13490
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13499: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_5_61
  move $s4, $v0
  L_13500: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13498
  j L_13498
  #final label in binaryExp
  L_13498: 
  #final label in codeGenAssignmentExpression
  L_13497: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13496: 
  #final label in statem expression
  L_13495: 
  #if finish label = 13490
  L_13490:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13504: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13505: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13503
  j L_13503
  #final label in binaryExp
  L_13503: 
  #jumpToAllOnlyIf
  L_13502:
  move $v0, $s1
  beqz $v0, L_13501
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13510: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_7_63
  move $s4, $v0
  L_13511: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13509
  j L_13509
  #final label in binaryExp
  L_13509: 
  #final label in codeGenAssignmentExpression
  L_13508: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13507: 
  #final label in statem expression
  L_13506: 
  #if finish label = 13501
  L_13501:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13515: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13516: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13514
  j L_13514
  #final label in binaryExp
  L_13514: 
  #jumpToAllOnlyIf
  L_13513:
  move $v0, $s1
  beqz $v0, L_13512
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13520: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13521: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13519
  j L_13519
  #final label in binaryExp
  L_13519: 
  #jumpToAllOnlyIf
  L_13518:
  move $v0, $s1
  beqz $v0, L_13517
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13526: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_5_71
  move $s4, $v0
  L_13527: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13525
  j L_13525
  #final label in binaryExp
  L_13525: 
  #final label in codeGenAssignmentExpression
  L_13524: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13523: 
  #final label in statem expression
  L_13522: 
  #if finish label = 13517
  L_13517:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13532: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_6_72
  move $s4, $v0
  L_13533: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13531
  j L_13531
  #final label in binaryExp
  L_13531: 
  #final label in codeGenAssignmentExpression
  L_13530: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13529: 
  #final label in statem expression
  L_13528: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13537: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13538: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13536
  j L_13536
  #final label in binaryExp
  L_13536: 
  #jumpToAllOnlyIf
  L_13535:
  move $v0, $s1
  beqz $v0, L_13534
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13543: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_7_73
  move $s4, $v0
  L_13544: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13542
  j L_13542
  #final label in binaryExp
  L_13542: 
  #final label in codeGenAssignmentExpression
  L_13541: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13540: 
  #final label in statem expression
  L_13539: 
  #if finish label = 13534
  L_13534:
  #if finish label = 13512
  L_13512:
  j L_13451
  #inside else
  L_13453:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13549: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_13550: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13548
  j L_13548
  #final label in binaryExp
  L_13548: 
  #jumpToAllOnlyIf
  L_13546:
  move $v0, $s1
  beqz $v0, L_13547
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13554: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13555: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13553
  j L_13553
  #final label in binaryExp
  L_13553: 
  #jumpToAllOnlyIf
  L_13552:
  move $v0, $s1
  beqz $v0, L_13551
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_13559: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13560: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13558
  j L_13558
  #final label in binaryExp
  L_13558: 
  #jumpToAllOnlyIf
  L_13557:
  move $v0, $s1
  beqz $v0, L_13556
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13565: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_6_52
  move $s4, $v0
  L_13566: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13564
  j L_13564
  #final label in binaryExp
  L_13564: 
  #final label in codeGenAssignmentExpression
  L_13563: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13562: 
  #final label in statem expression
  L_13561: 
  #if finish label = 13556
  L_13556:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13571: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_7_53
  move $s4, $v0
  L_13572: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13570
  j L_13570
  #final label in binaryExp
  L_13570: 
  #final label in codeGenAssignmentExpression
  L_13569: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13568: 
  #final label in statem expression
  L_13567: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_13576: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13577: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13575
  j L_13575
  #final label in binaryExp
  L_13575: 
  #jumpToAllOnlyIf
  L_13574:
  move $v0, $s1
  beqz $v0, L_13573
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13582: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_8_54
  move $s4, $v0
  L_13583: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13581
  j L_13581
  #final label in binaryExp
  L_13581: 
  #final label in codeGenAssignmentExpression
  L_13580: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13579: 
  #final label in statem expression
  L_13578: 
  #if finish label = 13573
  L_13573:
  #if finish label = 13551
  L_13551:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_13587: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13588: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13586
  j L_13586
  #final label in binaryExp
  L_13586: 
  #jumpToAllOnlyIf
  L_13585:
  move $v0, $s1
  beqz $v0, L_13584
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13593: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_6_62
  move $s4, $v0
  L_13594: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13592
  j L_13592
  #final label in binaryExp
  L_13592: 
  #final label in codeGenAssignmentExpression
  L_13591: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13590: 
  #final label in statem expression
  L_13589: 
  #if finish label = 13584
  L_13584:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_13598: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13599: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13597
  j L_13597
  #final label in binaryExp
  L_13597: 
  #jumpToAllOnlyIf
  L_13596:
  move $v0, $s1
  beqz $v0, L_13595
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13604: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_8_64
  move $s4, $v0
  L_13605: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13603
  j L_13603
  #final label in binaryExp
  L_13603: 
  #final label in codeGenAssignmentExpression
  L_13602: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13601: 
  #final label in statem expression
  L_13600: 
  #if finish label = 13595
  L_13595:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13609: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13610: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13608
  j L_13608
  #final label in binaryExp
  L_13608: 
  #jumpToAllOnlyIf
  L_13607:
  move $v0, $s1
  beqz $v0, L_13606
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_13614: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13615: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13613
  j L_13613
  #final label in binaryExp
  L_13613: 
  #jumpToAllOnlyIf
  L_13612:
  move $v0, $s1
  beqz $v0, L_13611
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13620: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_6_72
  move $s4, $v0
  L_13621: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13619
  j L_13619
  #final label in binaryExp
  L_13619: 
  #final label in codeGenAssignmentExpression
  L_13618: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13617: 
  #final label in statem expression
  L_13616: 
  #if finish label = 13611
  L_13611:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13626: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_7_73
  move $s4, $v0
  L_13627: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13625
  j L_13625
  #final label in binaryExp
  L_13625: 
  #final label in codeGenAssignmentExpression
  L_13624: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13623: 
  #final label in statem expression
  L_13622: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_13631: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13632: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13630
  j L_13630
  #final label in binaryExp
  L_13630: 
  #jumpToAllOnlyIf
  L_13629:
  move $v0, $s1
  beqz $v0, L_13628
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13637: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_8_74
  move $s4, $v0
  L_13638: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13636
  j L_13636
  #final label in binaryExp
  L_13636: 
  #final label in codeGenAssignmentExpression
  L_13635: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13634: 
  #final label in statem expression
  L_13633: 
  #if finish label = 13628
  L_13628:
  #if finish label = 13606
  L_13606:
  j L_13545
  #inside else
  L_13547:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13643: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_13644: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13642
  j L_13642
  #final label in binaryExp
  L_13642: 
  #jumpToAllOnlyIf
  L_13640:
  move $v0, $s1
  beqz $v0, L_13641
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13648: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13649: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13647
  j L_13647
  #final label in binaryExp
  L_13647: 
  #jumpToAllOnlyIf
  L_13646:
  move $v0, $s1
  beqz $v0, L_13645
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_13653: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13654: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13652
  j L_13652
  #final label in binaryExp
  L_13652: 
  #jumpToAllOnlyIf
  L_13651:
  move $v0, $s1
  beqz $v0, L_13650
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13659: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_7_53
  move $s4, $v0
  L_13660: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13658
  j L_13658
  #final label in binaryExp
  L_13658: 
  #final label in codeGenAssignmentExpression
  L_13657: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13656: 
  #final label in statem expression
  L_13655: 
  #if finish label = 13650
  L_13650:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13665: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_8_54
  move $s4, $v0
  L_13666: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13664
  j L_13664
  #final label in binaryExp
  L_13664: 
  #final label in codeGenAssignmentExpression
  L_13663: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13662: 
  #final label in statem expression
  L_13661: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_13670: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13671: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13669
  j L_13669
  #final label in binaryExp
  L_13669: 
  #jumpToAllOnlyIf
  L_13668:
  move $v0, $s1
  beqz $v0, L_13667
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13676: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_9_55
  move $s4, $v0
  L_13677: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13675
  j L_13675
  #final label in binaryExp
  L_13675: 
  #final label in codeGenAssignmentExpression
  L_13674: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13673: 
  #final label in statem expression
  L_13672: 
  #if finish label = 13667
  L_13667:
  #if finish label = 13645
  L_13645:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_13681: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13682: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13680
  j L_13680
  #final label in binaryExp
  L_13680: 
  #jumpToAllOnlyIf
  L_13679:
  move $v0, $s1
  beqz $v0, L_13678
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13687: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_7_63
  move $s4, $v0
  L_13688: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13686
  j L_13686
  #final label in binaryExp
  L_13686: 
  #final label in codeGenAssignmentExpression
  L_13685: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13684: 
  #final label in statem expression
  L_13683: 
  #if finish label = 13678
  L_13678:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_13692: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13693: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13691
  j L_13691
  #final label in binaryExp
  L_13691: 
  #jumpToAllOnlyIf
  L_13690:
  move $v0, $s1
  beqz $v0, L_13689
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13698: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_9_65
  move $s4, $v0
  L_13699: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13697
  j L_13697
  #final label in binaryExp
  L_13697: 
  #final label in codeGenAssignmentExpression
  L_13696: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13695: 
  #final label in statem expression
  L_13694: 
  #if finish label = 13689
  L_13689:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13703: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13704: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13702
  j L_13702
  #final label in binaryExp
  L_13702: 
  #jumpToAllOnlyIf
  L_13701:
  move $v0, $s1
  beqz $v0, L_13700
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_13708: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13709: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13707
  j L_13707
  #final label in binaryExp
  L_13707: 
  #jumpToAllOnlyIf
  L_13706:
  move $v0, $s1
  beqz $v0, L_13705
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13714: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_7_73
  move $s4, $v0
  L_13715: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13713
  j L_13713
  #final label in binaryExp
  L_13713: 
  #final label in codeGenAssignmentExpression
  L_13712: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13711: 
  #final label in statem expression
  L_13710: 
  #if finish label = 13705
  L_13705:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13720: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_8_74
  move $s4, $v0
  L_13721: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13719
  j L_13719
  #final label in binaryExp
  L_13719: 
  #final label in codeGenAssignmentExpression
  L_13718: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13717: 
  #final label in statem expression
  L_13716: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_13725: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13726: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13724
  j L_13724
  #final label in binaryExp
  L_13724: 
  #jumpToAllOnlyIf
  L_13723:
  move $v0, $s1
  beqz $v0, L_13722
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13731: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_9_75
  move $s4, $v0
  L_13732: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13730
  j L_13730
  #final label in binaryExp
  L_13730: 
  #final label in codeGenAssignmentExpression
  L_13729: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13728: 
  #final label in statem expression
  L_13727: 
  #if finish label = 13722
  L_13722:
  #if finish label = 13700
  L_13700:
  j L_13639
  #inside else
  L_13641:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13736: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13737: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13735
  j L_13735
  #final label in binaryExp
  L_13735: 
  #jumpToAllOnlyIf
  L_13734:
  move $v0, $s1
  beqz $v0, L_13733
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13741: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13742: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13740
  j L_13740
  #final label in binaryExp
  L_13740: 
  #jumpToAllOnlyIf
  L_13739:
  move $v0, $s1
  beqz $v0, L_13738
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_13746: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13747: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13745
  j L_13745
  #final label in binaryExp
  L_13745: 
  #jumpToAllOnlyIf
  L_13744:
  move $v0, $s1
  beqz $v0, L_13743
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13752: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_8_54
  move $s4, $v0
  L_13753: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13751
  j L_13751
  #final label in binaryExp
  L_13751: 
  #final label in codeGenAssignmentExpression
  L_13750: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13749: 
  #final label in statem expression
  L_13748: 
  #if finish label = 13743
  L_13743:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13758: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_4_9_55
  move $s4, $v0
  L_13759: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13757
  j L_13757
  #final label in binaryExp
  L_13757: 
  #final label in codeGenAssignmentExpression
  L_13756: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13755: 
  #final label in statem expression
  L_13754: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_13763: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13764: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13762
  j L_13762
  #final label in binaryExp
  L_13762: 
  #jumpToAllOnlyIf
  L_13761:
  move $v0, $s1
  beqz $v0, L_13760
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13769: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_13770: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13768
  j L_13768
  #final label in binaryExp
  L_13768: 
  #final label in codeGenAssignmentExpression
  L_13767: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13766: 
  #final label in statem expression
  L_13765: 
  #if finish label = 13760
  L_13760:
  #if finish label = 13738
  L_13738:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_13774: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13775: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13773
  j L_13773
  #final label in binaryExp
  L_13773: 
  #jumpToAllOnlyIf
  L_13772:
  move $v0, $s1
  beqz $v0, L_13771
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13780: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_8_64
  move $s4, $v0
  L_13781: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13779
  j L_13779
  #final label in binaryExp
  L_13779: 
  #final label in codeGenAssignmentExpression
  L_13778: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13777: 
  #final label in statem expression
  L_13776: 
  #if finish label = 13771
  L_13771:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_13785: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13786: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13784
  j L_13784
  #final label in binaryExp
  L_13784: 
  #jumpToAllOnlyIf
  L_13783:
  move $v0, $s1
  beqz $v0, L_13782
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13791: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_13792: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13790
  j L_13790
  #final label in binaryExp
  L_13790: 
  #final label in codeGenAssignmentExpression
  L_13789: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13788: 
  #final label in statem expression
  L_13787: 
  #if finish label = 13782
  L_13782:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_13796: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13797: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13795
  j L_13795
  #final label in binaryExp
  L_13795: 
  #jumpToAllOnlyIf
  L_13794:
  move $v0, $s1
  beqz $v0, L_13793
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_13801: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13802: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13800
  j L_13800
  #final label in binaryExp
  L_13800: 
  #jumpToAllOnlyIf
  L_13799:
  move $v0, $s1
  beqz $v0, L_13798
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13807: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_8_74
  move $s4, $v0
  L_13808: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13806
  j L_13806
  #final label in binaryExp
  L_13806: 
  #final label in codeGenAssignmentExpression
  L_13805: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13804: 
  #final label in statem expression
  L_13803: 
  #if finish label = 13798
  L_13798:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13813: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_9_75
  move $s4, $v0
  L_13814: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13812
  j L_13812
  #final label in binaryExp
  L_13812: 
  #final label in codeGenAssignmentExpression
  L_13811: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13810: 
  #final label in statem expression
  L_13809: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_13818: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13819: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13817
  j L_13817
  #final label in binaryExp
  L_13817: 
  #jumpToAllOnlyIf
  L_13816:
  move $v0, $s1
  beqz $v0, L_13815
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13824: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_13825: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13823
  j L_13823
  #final label in binaryExp
  L_13823: 
  #final label in codeGenAssignmentExpression
  L_13822: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13821: 
  #final label in statem expression
  L_13820: 
  #if finish label = 13815
  L_13815:
  #if finish label = 13793
  L_13793:
  #if finish label = 13733
  L_13733:
  #if finish label = 13639
  L_13639:
  #if finish label = 13545
  L_13545:
  #if finish label = 13451
  L_13451:
  #if finish label = 13357
  L_13357:
  #if finish label = 13263
  L_13263:
  #if finish label = 13169
  L_13169:
  #if finish label = 13075
  L_13075:
  #if finish label = 12981
  L_12981:
  #if finish label = 12887
  L_12887:
  j L_12881
  #inside else
  L_12883:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_13830: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_13831: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13829
  j L_13829
  #final label in binaryExp
  L_13829: 
  #jumpToAllOnlyIf
  L_13827:
  move $v0, $s1
  beqz $v0, L_13828
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13836: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13837: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13835
  j L_13835
  #final label in binaryExp
  L_13835: 
  #jumpToAllOnlyIf
  L_13833:
  move $v0, $s1
  beqz $v0, L_13834
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13841: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13842: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13840
  j L_13840
  #final label in binaryExp
  L_13840: 
  #jumpToAllOnlyIf
  L_13839:
  move $v0, $s1
  beqz $v0, L_13838
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_13846: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13847: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13845
  j L_13845
  #final label in binaryExp
  L_13845: 
  #jumpToAllOnlyIf
  L_13844:
  move $v0, $s1
  beqz $v0, L_13843
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13852: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_13853: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13851
  j L_13851
  #final label in binaryExp
  L_13851: 
  #final label in codeGenAssignmentExpression
  L_13850: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13849: 
  #final label in statem expression
  L_13848: 
  #if finish label = 13843
  L_13843:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13858: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_0_56
  move $s4, $v0
  L_13859: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13857
  j L_13857
  #final label in binaryExp
  L_13857: 
  #final label in codeGenAssignmentExpression
  L_13856: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13855: 
  #final label in statem expression
  L_13854: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_13863: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13864: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13862
  j L_13862
  #final label in binaryExp
  L_13862: 
  #jumpToAllOnlyIf
  L_13861:
  move $v0, $s1
  beqz $v0, L_13860
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13869: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_1_57
  move $s4, $v0
  L_13870: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13868
  j L_13868
  #final label in binaryExp
  L_13868: 
  #final label in codeGenAssignmentExpression
  L_13867: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13866: 
  #final label in statem expression
  L_13865: 
  #if finish label = 13860
  L_13860:
  #if finish label = 13838
  L_13838:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_13874: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13875: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13873
  j L_13873
  #final label in binaryExp
  L_13873: 
  #jumpToAllOnlyIf
  L_13872:
  move $v0, $s1
  beqz $v0, L_13871
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13880: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_13881: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13879
  j L_13879
  #final label in binaryExp
  L_13879: 
  #final label in codeGenAssignmentExpression
  L_13878: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13877: 
  #final label in statem expression
  L_13876: 
  #if finish label = 13871
  L_13871:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_13885: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13886: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13884
  j L_13884
  #final label in binaryExp
  L_13884: 
  #jumpToAllOnlyIf
  L_13883:
  move $v0, $s1
  beqz $v0, L_13882
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13891: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_1_67
  move $s4, $v0
  L_13892: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13890
  j L_13890
  #final label in binaryExp
  L_13890: 
  #final label in codeGenAssignmentExpression
  L_13889: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13888: 
  #final label in statem expression
  L_13887: 
  #if finish label = 13882
  L_13882:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13896: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13897: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13895
  j L_13895
  #final label in binaryExp
  L_13895: 
  #jumpToAllOnlyIf
  L_13894:
  move $v0, $s1
  beqz $v0, L_13893
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_13901: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13902: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13900
  j L_13900
  #final label in binaryExp
  L_13900: 
  #jumpToAllOnlyIf
  L_13899:
  move $v0, $s1
  beqz $v0, L_13898
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13907: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_13908: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13906
  j L_13906
  #final label in binaryExp
  L_13906: 
  #final label in codeGenAssignmentExpression
  L_13905: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13904: 
  #final label in statem expression
  L_13903: 
  #if finish label = 13898
  L_13898:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13913: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_0_76
  move $s4, $v0
  L_13914: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13912
  j L_13912
  #final label in binaryExp
  L_13912: 
  #final label in codeGenAssignmentExpression
  L_13911: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13910: 
  #final label in statem expression
  L_13909: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_13918: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13919: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13917
  j L_13917
  #final label in binaryExp
  L_13917: 
  #jumpToAllOnlyIf
  L_13916:
  move $v0, $s1
  beqz $v0, L_13915
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13924: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_1_77
  move $s4, $v0
  L_13925: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13923
  j L_13923
  #final label in binaryExp
  L_13923: 
  #final label in codeGenAssignmentExpression
  L_13922: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13921: 
  #final label in statem expression
  L_13920: 
  #if finish label = 13915
  L_13915:
  #if finish label = 13893
  L_13893:
  j L_13832
  #inside else
  L_13834:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_13930: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_13931: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13929
  j L_13929
  #final label in binaryExp
  L_13929: 
  #jumpToAllOnlyIf
  L_13927:
  move $v0, $s1
  beqz $v0, L_13928
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13935: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13936: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13934
  j L_13934
  #final label in binaryExp
  L_13934: 
  #jumpToAllOnlyIf
  L_13933:
  move $v0, $s1
  beqz $v0, L_13932
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13940: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13941: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13939
  j L_13939
  #final label in binaryExp
  L_13939: 
  #jumpToAllOnlyIf
  L_13938:
  move $v0, $s1
  beqz $v0, L_13937
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13946: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_0_56
  move $s4, $v0
  L_13947: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13945
  j L_13945
  #final label in binaryExp
  L_13945: 
  #final label in codeGenAssignmentExpression
  L_13944: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13943: 
  #final label in statem expression
  L_13942: 
  #if finish label = 13937
  L_13937:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13952: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_1_57
  move $s4, $v0
  L_13953: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13951
  j L_13951
  #final label in binaryExp
  L_13951: 
  #final label in codeGenAssignmentExpression
  L_13950: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13949: 
  #final label in statem expression
  L_13948: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13957: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13958: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13956
  j L_13956
  #final label in binaryExp
  L_13956: 
  #jumpToAllOnlyIf
  L_13955:
  move $v0, $s1
  beqz $v0, L_13954
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13963: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_2_58
  move $s4, $v0
  L_13964: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13962
  j L_13962
  #final label in binaryExp
  L_13962: 
  #final label in codeGenAssignmentExpression
  L_13961: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13960: 
  #final label in statem expression
  L_13959: 
  #if finish label = 13954
  L_13954:
  #if finish label = 13932
  L_13932:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13968: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13969: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13967
  j L_13967
  #final label in binaryExp
  L_13967: 
  #jumpToAllOnlyIf
  L_13966:
  move $v0, $s1
  beqz $v0, L_13965
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13974: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_0_66
  move $s4, $v0
  L_13975: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13973
  j L_13973
  #final label in binaryExp
  L_13973: 
  #final label in codeGenAssignmentExpression
  L_13972: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13971: 
  #final label in statem expression
  L_13970: 
  #if finish label = 13965
  L_13965:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13979: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13980: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13978
  j L_13978
  #final label in binaryExp
  L_13978: 
  #jumpToAllOnlyIf
  L_13977:
  move $v0, $s1
  beqz $v0, L_13976
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_13985: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_2_68
  move $s4, $v0
  L_13986: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_13984
  j L_13984
  #final label in binaryExp
  L_13984: 
  #final label in codeGenAssignmentExpression
  L_13983: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13982: 
  #final label in statem expression
  L_13981: 
  #if finish label = 13976
  L_13976:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_13990: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_13991: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13989
  j L_13989
  #final label in binaryExp
  L_13989: 
  #jumpToAllOnlyIf
  L_13988:
  move $v0, $s1
  beqz $v0, L_13987
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_13995: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_13996: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_13994
  j L_13994
  #final label in binaryExp
  L_13994: 
  #jumpToAllOnlyIf
  L_13993:
  move $v0, $s1
  beqz $v0, L_13992
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14001: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_0_76
  move $s4, $v0
  L_14002: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14000
  j L_14000
  #final label in binaryExp
  L_14000: 
  #final label in codeGenAssignmentExpression
  L_13999: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_13998: 
  #final label in statem expression
  L_13997: 
  #if finish label = 13992
  L_13992:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14007: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_1_77
  move $s4, $v0
  L_14008: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14006
  j L_14006
  #final label in binaryExp
  L_14006: 
  #final label in codeGenAssignmentExpression
  L_14005: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14004: 
  #final label in statem expression
  L_14003: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_14012: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14013: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14011
  j L_14011
  #final label in binaryExp
  L_14011: 
  #jumpToAllOnlyIf
  L_14010:
  move $v0, $s1
  beqz $v0, L_14009
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14018: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_2_78
  move $s4, $v0
  L_14019: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14017
  j L_14017
  #final label in binaryExp
  L_14017: 
  #final label in codeGenAssignmentExpression
  L_14016: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14015: 
  #final label in statem expression
  L_14014: 
  #if finish label = 14009
  L_14009:
  #if finish label = 13987
  L_13987:
  j L_13926
  #inside else
  L_13928:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14024: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_14025: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14023
  j L_14023
  #final label in binaryExp
  L_14023: 
  #jumpToAllOnlyIf
  L_14021:
  move $v0, $s1
  beqz $v0, L_14022
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14029: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14030: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14028
  j L_14028
  #final label in binaryExp
  L_14028: 
  #jumpToAllOnlyIf
  L_14027:
  move $v0, $s1
  beqz $v0, L_14026
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_14034: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14035: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14033
  j L_14033
  #final label in binaryExp
  L_14033: 
  #jumpToAllOnlyIf
  L_14032:
  move $v0, $s1
  beqz $v0, L_14031
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14040: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_1_57
  move $s4, $v0
  L_14041: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14039
  j L_14039
  #final label in binaryExp
  L_14039: 
  #final label in codeGenAssignmentExpression
  L_14038: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14037: 
  #final label in statem expression
  L_14036: 
  #if finish label = 14031
  L_14031:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14046: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_2_58
  move $s4, $v0
  L_14047: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14045
  j L_14045
  #final label in binaryExp
  L_14045: 
  #final label in codeGenAssignmentExpression
  L_14044: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14043: 
  #final label in statem expression
  L_14042: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_14051: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14052: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14050
  j L_14050
  #final label in binaryExp
  L_14050: 
  #jumpToAllOnlyIf
  L_14049:
  move $v0, $s1
  beqz $v0, L_14048
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14057: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_3_59
  move $s4, $v0
  L_14058: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14056
  j L_14056
  #final label in binaryExp
  L_14056: 
  #final label in codeGenAssignmentExpression
  L_14055: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14054: 
  #final label in statem expression
  L_14053: 
  #if finish label = 14048
  L_14048:
  #if finish label = 14026
  L_14026:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_14062: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14063: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14061
  j L_14061
  #final label in binaryExp
  L_14061: 
  #jumpToAllOnlyIf
  L_14060:
  move $v0, $s1
  beqz $v0, L_14059
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14068: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_1_67
  move $s4, $v0
  L_14069: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14067
  j L_14067
  #final label in binaryExp
  L_14067: 
  #final label in codeGenAssignmentExpression
  L_14066: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14065: 
  #final label in statem expression
  L_14064: 
  #if finish label = 14059
  L_14059:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_14073: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14074: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14072
  j L_14072
  #final label in binaryExp
  L_14072: 
  #jumpToAllOnlyIf
  L_14071:
  move $v0, $s1
  beqz $v0, L_14070
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14079: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_3_69
  move $s4, $v0
  L_14080: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14078
  j L_14078
  #final label in binaryExp
  L_14078: 
  #final label in codeGenAssignmentExpression
  L_14077: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14076: 
  #final label in statem expression
  L_14075: 
  #if finish label = 14070
  L_14070:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14084: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14085: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14083
  j L_14083
  #final label in binaryExp
  L_14083: 
  #jumpToAllOnlyIf
  L_14082:
  move $v0, $s1
  beqz $v0, L_14081
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_14089: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14090: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14088
  j L_14088
  #final label in binaryExp
  L_14088: 
  #jumpToAllOnlyIf
  L_14087:
  move $v0, $s1
  beqz $v0, L_14086
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14095: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_1_77
  move $s4, $v0
  L_14096: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14094
  j L_14094
  #final label in binaryExp
  L_14094: 
  #final label in codeGenAssignmentExpression
  L_14093: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14092: 
  #final label in statem expression
  L_14091: 
  #if finish label = 14086
  L_14086:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14101: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_2_78
  move $s4, $v0
  L_14102: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14100
  j L_14100
  #final label in binaryExp
  L_14100: 
  #final label in codeGenAssignmentExpression
  L_14099: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14098: 
  #final label in statem expression
  L_14097: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_14106: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14107: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14105
  j L_14105
  #final label in binaryExp
  L_14105: 
  #jumpToAllOnlyIf
  L_14104:
  move $v0, $s1
  beqz $v0, L_14103
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14112: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_3_79
  move $s4, $v0
  L_14113: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14111
  j L_14111
  #final label in binaryExp
  L_14111: 
  #final label in codeGenAssignmentExpression
  L_14110: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14109: 
  #final label in statem expression
  L_14108: 
  #if finish label = 14103
  L_14103:
  #if finish label = 14081
  L_14081:
  j L_14020
  #inside else
  L_14022:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14118: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_14119: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14117
  j L_14117
  #final label in binaryExp
  L_14117: 
  #jumpToAllOnlyIf
  L_14115:
  move $v0, $s1
  beqz $v0, L_14116
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14123: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14124: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14122
  j L_14122
  #final label in binaryExp
  L_14122: 
  #jumpToAllOnlyIf
  L_14121:
  move $v0, $s1
  beqz $v0, L_14120
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_14128: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14129: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14127
  j L_14127
  #final label in binaryExp
  L_14127: 
  #jumpToAllOnlyIf
  L_14126:
  move $v0, $s1
  beqz $v0, L_14125
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14134: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_2_58
  move $s4, $v0
  L_14135: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14133
  j L_14133
  #final label in binaryExp
  L_14133: 
  #final label in codeGenAssignmentExpression
  L_14132: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14131: 
  #final label in statem expression
  L_14130: 
  #if finish label = 14125
  L_14125:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14140: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_3_59
  move $s4, $v0
  L_14141: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14139
  j L_14139
  #final label in binaryExp
  L_14139: 
  #final label in codeGenAssignmentExpression
  L_14138: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14137: 
  #final label in statem expression
  L_14136: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_14145: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14146: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14144
  j L_14144
  #final label in binaryExp
  L_14144: 
  #jumpToAllOnlyIf
  L_14143:
  move $v0, $s1
  beqz $v0, L_14142
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14151: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_4_60
  move $s4, $v0
  L_14152: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14150
  j L_14150
  #final label in binaryExp
  L_14150: 
  #final label in codeGenAssignmentExpression
  L_14149: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14148: 
  #final label in statem expression
  L_14147: 
  #if finish label = 14142
  L_14142:
  #if finish label = 14120
  L_14120:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_14156: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14157: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14155
  j L_14155
  #final label in binaryExp
  L_14155: 
  #jumpToAllOnlyIf
  L_14154:
  move $v0, $s1
  beqz $v0, L_14153
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14162: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_2_68
  move $s4, $v0
  L_14163: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14161
  j L_14161
  #final label in binaryExp
  L_14161: 
  #final label in codeGenAssignmentExpression
  L_14160: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14159: 
  #final label in statem expression
  L_14158: 
  #if finish label = 14153
  L_14153:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_14167: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14168: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14166
  j L_14166
  #final label in binaryExp
  L_14166: 
  #jumpToAllOnlyIf
  L_14165:
  move $v0, $s1
  beqz $v0, L_14164
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14173: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_4_70
  move $s4, $v0
  L_14174: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14172
  j L_14172
  #final label in binaryExp
  L_14172: 
  #final label in codeGenAssignmentExpression
  L_14171: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14170: 
  #final label in statem expression
  L_14169: 
  #if finish label = 14164
  L_14164:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14178: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14179: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14177
  j L_14177
  #final label in binaryExp
  L_14177: 
  #jumpToAllOnlyIf
  L_14176:
  move $v0, $s1
  beqz $v0, L_14175
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_14183: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14184: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14182
  j L_14182
  #final label in binaryExp
  L_14182: 
  #jumpToAllOnlyIf
  L_14181:
  move $v0, $s1
  beqz $v0, L_14180
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14189: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_2_78
  move $s4, $v0
  L_14190: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14188
  j L_14188
  #final label in binaryExp
  L_14188: 
  #final label in codeGenAssignmentExpression
  L_14187: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14186: 
  #final label in statem expression
  L_14185: 
  #if finish label = 14180
  L_14180:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14195: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_3_79
  move $s4, $v0
  L_14196: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14194
  j L_14194
  #final label in binaryExp
  L_14194: 
  #final label in codeGenAssignmentExpression
  L_14193: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14192: 
  #final label in statem expression
  L_14191: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_14200: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14201: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14199
  j L_14199
  #final label in binaryExp
  L_14199: 
  #jumpToAllOnlyIf
  L_14198:
  move $v0, $s1
  beqz $v0, L_14197
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14206: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_4_80
  move $s4, $v0
  L_14207: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14205
  j L_14205
  #final label in binaryExp
  L_14205: 
  #final label in codeGenAssignmentExpression
  L_14204: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14203: 
  #final label in statem expression
  L_14202: 
  #if finish label = 14197
  L_14197:
  #if finish label = 14175
  L_14175:
  j L_14114
  #inside else
  L_14116:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14212: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_14213: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14211
  j L_14211
  #final label in binaryExp
  L_14211: 
  #jumpToAllOnlyIf
  L_14209:
  move $v0, $s1
  beqz $v0, L_14210
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14217: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14218: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14216
  j L_14216
  #final label in binaryExp
  L_14216: 
  #jumpToAllOnlyIf
  L_14215:
  move $v0, $s1
  beqz $v0, L_14214
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_14222: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14223: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14221
  j L_14221
  #final label in binaryExp
  L_14221: 
  #jumpToAllOnlyIf
  L_14220:
  move $v0, $s1
  beqz $v0, L_14219
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14228: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_3_59
  move $s4, $v0
  L_14229: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14227
  j L_14227
  #final label in binaryExp
  L_14227: 
  #final label in codeGenAssignmentExpression
  L_14226: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14225: 
  #final label in statem expression
  L_14224: 
  #if finish label = 14219
  L_14219:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14234: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_4_60
  move $s4, $v0
  L_14235: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14233
  j L_14233
  #final label in binaryExp
  L_14233: 
  #final label in codeGenAssignmentExpression
  L_14232: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14231: 
  #final label in statem expression
  L_14230: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_14239: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14240: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14238
  j L_14238
  #final label in binaryExp
  L_14238: 
  #jumpToAllOnlyIf
  L_14237:
  move $v0, $s1
  beqz $v0, L_14236
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14245: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_5_61
  move $s4, $v0
  L_14246: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14244
  j L_14244
  #final label in binaryExp
  L_14244: 
  #final label in codeGenAssignmentExpression
  L_14243: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14242: 
  #final label in statem expression
  L_14241: 
  #if finish label = 14236
  L_14236:
  #if finish label = 14214
  L_14214:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_14250: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14251: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14249
  j L_14249
  #final label in binaryExp
  L_14249: 
  #jumpToAllOnlyIf
  L_14248:
  move $v0, $s1
  beqz $v0, L_14247
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14256: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_3_69
  move $s4, $v0
  L_14257: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14255
  j L_14255
  #final label in binaryExp
  L_14255: 
  #final label in codeGenAssignmentExpression
  L_14254: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14253: 
  #final label in statem expression
  L_14252: 
  #if finish label = 14247
  L_14247:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_14261: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14262: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14260
  j L_14260
  #final label in binaryExp
  L_14260: 
  #jumpToAllOnlyIf
  L_14259:
  move $v0, $s1
  beqz $v0, L_14258
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14267: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_5_71
  move $s4, $v0
  L_14268: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14266
  j L_14266
  #final label in binaryExp
  L_14266: 
  #final label in codeGenAssignmentExpression
  L_14265: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14264: 
  #final label in statem expression
  L_14263: 
  #if finish label = 14258
  L_14258:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14272: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14273: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14271
  j L_14271
  #final label in binaryExp
  L_14271: 
  #jumpToAllOnlyIf
  L_14270:
  move $v0, $s1
  beqz $v0, L_14269
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_14277: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14278: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14276
  j L_14276
  #final label in binaryExp
  L_14276: 
  #jumpToAllOnlyIf
  L_14275:
  move $v0, $s1
  beqz $v0, L_14274
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14283: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_3_79
  move $s4, $v0
  L_14284: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14282
  j L_14282
  #final label in binaryExp
  L_14282: 
  #final label in codeGenAssignmentExpression
  L_14281: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14280: 
  #final label in statem expression
  L_14279: 
  #if finish label = 14274
  L_14274:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14289: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_4_80
  move $s4, $v0
  L_14290: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14288
  j L_14288
  #final label in binaryExp
  L_14288: 
  #final label in codeGenAssignmentExpression
  L_14287: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14286: 
  #final label in statem expression
  L_14285: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_14294: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14295: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14293
  j L_14293
  #final label in binaryExp
  L_14293: 
  #jumpToAllOnlyIf
  L_14292:
  move $v0, $s1
  beqz $v0, L_14291
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14300: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_5_81
  move $s4, $v0
  L_14301: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14299
  j L_14299
  #final label in binaryExp
  L_14299: 
  #final label in codeGenAssignmentExpression
  L_14298: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14297: 
  #final label in statem expression
  L_14296: 
  #if finish label = 14291
  L_14291:
  #if finish label = 14269
  L_14269:
  j L_14208
  #inside else
  L_14210:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14306: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_14307: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14305
  j L_14305
  #final label in binaryExp
  L_14305: 
  #jumpToAllOnlyIf
  L_14303:
  move $v0, $s1
  beqz $v0, L_14304
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14311: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14312: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14310
  j L_14310
  #final label in binaryExp
  L_14310: 
  #jumpToAllOnlyIf
  L_14309:
  move $v0, $s1
  beqz $v0, L_14308
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_14316: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14317: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14315
  j L_14315
  #final label in binaryExp
  L_14315: 
  #jumpToAllOnlyIf
  L_14314:
  move $v0, $s1
  beqz $v0, L_14313
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14322: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_4_60
  move $s4, $v0
  L_14323: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14321
  j L_14321
  #final label in binaryExp
  L_14321: 
  #final label in codeGenAssignmentExpression
  L_14320: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14319: 
  #final label in statem expression
  L_14318: 
  #if finish label = 14313
  L_14313:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14328: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_5_61
  move $s4, $v0
  L_14329: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14327
  j L_14327
  #final label in binaryExp
  L_14327: 
  #final label in codeGenAssignmentExpression
  L_14326: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14325: 
  #final label in statem expression
  L_14324: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_14333: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14334: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14332
  j L_14332
  #final label in binaryExp
  L_14332: 
  #jumpToAllOnlyIf
  L_14331:
  move $v0, $s1
  beqz $v0, L_14330
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14339: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_6_62
  move $s4, $v0
  L_14340: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14338
  j L_14338
  #final label in binaryExp
  L_14338: 
  #final label in codeGenAssignmentExpression
  L_14337: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14336: 
  #final label in statem expression
  L_14335: 
  #if finish label = 14330
  L_14330:
  #if finish label = 14308
  L_14308:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_14344: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14345: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14343
  j L_14343
  #final label in binaryExp
  L_14343: 
  #jumpToAllOnlyIf
  L_14342:
  move $v0, $s1
  beqz $v0, L_14341
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14350: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_4_70
  move $s4, $v0
  L_14351: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14349
  j L_14349
  #final label in binaryExp
  L_14349: 
  #final label in codeGenAssignmentExpression
  L_14348: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14347: 
  #final label in statem expression
  L_14346: 
  #if finish label = 14341
  L_14341:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_14355: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14356: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14354
  j L_14354
  #final label in binaryExp
  L_14354: 
  #jumpToAllOnlyIf
  L_14353:
  move $v0, $s1
  beqz $v0, L_14352
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14361: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_6_72
  move $s4, $v0
  L_14362: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14360
  j L_14360
  #final label in binaryExp
  L_14360: 
  #final label in codeGenAssignmentExpression
  L_14359: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14358: 
  #final label in statem expression
  L_14357: 
  #if finish label = 14352
  L_14352:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14366: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14367: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14365
  j L_14365
  #final label in binaryExp
  L_14365: 
  #jumpToAllOnlyIf
  L_14364:
  move $v0, $s1
  beqz $v0, L_14363
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_14371: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14372: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14370
  j L_14370
  #final label in binaryExp
  L_14370: 
  #jumpToAllOnlyIf
  L_14369:
  move $v0, $s1
  beqz $v0, L_14368
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14377: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_4_80
  move $s4, $v0
  L_14378: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14376
  j L_14376
  #final label in binaryExp
  L_14376: 
  #final label in codeGenAssignmentExpression
  L_14375: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14374: 
  #final label in statem expression
  L_14373: 
  #if finish label = 14368
  L_14368:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14383: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_5_81
  move $s4, $v0
  L_14384: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14382
  j L_14382
  #final label in binaryExp
  L_14382: 
  #final label in codeGenAssignmentExpression
  L_14381: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14380: 
  #final label in statem expression
  L_14379: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_14388: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14389: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14387
  j L_14387
  #final label in binaryExp
  L_14387: 
  #jumpToAllOnlyIf
  L_14386:
  move $v0, $s1
  beqz $v0, L_14385
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14394: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_6_82
  move $s4, $v0
  L_14395: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14393
  j L_14393
  #final label in binaryExp
  L_14393: 
  #final label in codeGenAssignmentExpression
  L_14392: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14391: 
  #final label in statem expression
  L_14390: 
  #if finish label = 14385
  L_14385:
  #if finish label = 14363
  L_14363:
  j L_14302
  #inside else
  L_14304:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14400: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_14401: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14399
  j L_14399
  #final label in binaryExp
  L_14399: 
  #jumpToAllOnlyIf
  L_14397:
  move $v0, $s1
  beqz $v0, L_14398
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14405: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14406: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14404
  j L_14404
  #final label in binaryExp
  L_14404: 
  #jumpToAllOnlyIf
  L_14403:
  move $v0, $s1
  beqz $v0, L_14402
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14410: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14411: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14409
  j L_14409
  #final label in binaryExp
  L_14409: 
  #jumpToAllOnlyIf
  L_14408:
  move $v0, $s1
  beqz $v0, L_14407
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14416: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_5_61
  move $s4, $v0
  L_14417: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14415
  j L_14415
  #final label in binaryExp
  L_14415: 
  #final label in codeGenAssignmentExpression
  L_14414: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14413: 
  #final label in statem expression
  L_14412: 
  #if finish label = 14407
  L_14407:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14422: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_6_62
  move $s4, $v0
  L_14423: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14421
  j L_14421
  #final label in binaryExp
  L_14421: 
  #final label in codeGenAssignmentExpression
  L_14420: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14419: 
  #final label in statem expression
  L_14418: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14427: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14428: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14426
  j L_14426
  #final label in binaryExp
  L_14426: 
  #jumpToAllOnlyIf
  L_14425:
  move $v0, $s1
  beqz $v0, L_14424
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14433: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_7_63
  move $s4, $v0
  L_14434: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14432
  j L_14432
  #final label in binaryExp
  L_14432: 
  #final label in codeGenAssignmentExpression
  L_14431: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14430: 
  #final label in statem expression
  L_14429: 
  #if finish label = 14424
  L_14424:
  #if finish label = 14402
  L_14402:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14438: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14439: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14437
  j L_14437
  #final label in binaryExp
  L_14437: 
  #jumpToAllOnlyIf
  L_14436:
  move $v0, $s1
  beqz $v0, L_14435
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14444: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_5_71
  move $s4, $v0
  L_14445: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14443
  j L_14443
  #final label in binaryExp
  L_14443: 
  #final label in codeGenAssignmentExpression
  L_14442: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14441: 
  #final label in statem expression
  L_14440: 
  #if finish label = 14435
  L_14435:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14449: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14450: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14448
  j L_14448
  #final label in binaryExp
  L_14448: 
  #jumpToAllOnlyIf
  L_14447:
  move $v0, $s1
  beqz $v0, L_14446
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14455: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_7_73
  move $s4, $v0
  L_14456: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14454
  j L_14454
  #final label in binaryExp
  L_14454: 
  #final label in codeGenAssignmentExpression
  L_14453: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14452: 
  #final label in statem expression
  L_14451: 
  #if finish label = 14446
  L_14446:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14460: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14461: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14459
  j L_14459
  #final label in binaryExp
  L_14459: 
  #jumpToAllOnlyIf
  L_14458:
  move $v0, $s1
  beqz $v0, L_14457
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14465: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14466: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14464
  j L_14464
  #final label in binaryExp
  L_14464: 
  #jumpToAllOnlyIf
  L_14463:
  move $v0, $s1
  beqz $v0, L_14462
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14471: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_5_81
  move $s4, $v0
  L_14472: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14470
  j L_14470
  #final label in binaryExp
  L_14470: 
  #final label in codeGenAssignmentExpression
  L_14469: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14468: 
  #final label in statem expression
  L_14467: 
  #if finish label = 14462
  L_14462:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14477: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_6_82
  move $s4, $v0
  L_14478: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14476
  j L_14476
  #final label in binaryExp
  L_14476: 
  #final label in codeGenAssignmentExpression
  L_14475: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14474: 
  #final label in statem expression
  L_14473: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14482: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14483: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14481
  j L_14481
  #final label in binaryExp
  L_14481: 
  #jumpToAllOnlyIf
  L_14480:
  move $v0, $s1
  beqz $v0, L_14479
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14488: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_7_83
  move $s4, $v0
  L_14489: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14487
  j L_14487
  #final label in binaryExp
  L_14487: 
  #final label in codeGenAssignmentExpression
  L_14486: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14485: 
  #final label in statem expression
  L_14484: 
  #if finish label = 14479
  L_14479:
  #if finish label = 14457
  L_14457:
  j L_14396
  #inside else
  L_14398:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14494: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_14495: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14493
  j L_14493
  #final label in binaryExp
  L_14493: 
  #jumpToAllOnlyIf
  L_14491:
  move $v0, $s1
  beqz $v0, L_14492
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14499: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14500: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14498
  j L_14498
  #final label in binaryExp
  L_14498: 
  #jumpToAllOnlyIf
  L_14497:
  move $v0, $s1
  beqz $v0, L_14496
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14504: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14505: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14503
  j L_14503
  #final label in binaryExp
  L_14503: 
  #jumpToAllOnlyIf
  L_14502:
  move $v0, $s1
  beqz $v0, L_14501
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14510: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_6_62
  move $s4, $v0
  L_14511: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14509
  j L_14509
  #final label in binaryExp
  L_14509: 
  #final label in codeGenAssignmentExpression
  L_14508: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14507: 
  #final label in statem expression
  L_14506: 
  #if finish label = 14501
  L_14501:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14516: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_7_63
  move $s4, $v0
  L_14517: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14515
  j L_14515
  #final label in binaryExp
  L_14515: 
  #final label in codeGenAssignmentExpression
  L_14514: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14513: 
  #final label in statem expression
  L_14512: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14521: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14522: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14520
  j L_14520
  #final label in binaryExp
  L_14520: 
  #jumpToAllOnlyIf
  L_14519:
  move $v0, $s1
  beqz $v0, L_14518
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14527: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_8_64
  move $s4, $v0
  L_14528: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14526
  j L_14526
  #final label in binaryExp
  L_14526: 
  #final label in codeGenAssignmentExpression
  L_14525: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14524: 
  #final label in statem expression
  L_14523: 
  #if finish label = 14518
  L_14518:
  #if finish label = 14496
  L_14496:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14532: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14533: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14531
  j L_14531
  #final label in binaryExp
  L_14531: 
  #jumpToAllOnlyIf
  L_14530:
  move $v0, $s1
  beqz $v0, L_14529
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14538: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_6_72
  move $s4, $v0
  L_14539: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14537
  j L_14537
  #final label in binaryExp
  L_14537: 
  #final label in codeGenAssignmentExpression
  L_14536: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14535: 
  #final label in statem expression
  L_14534: 
  #if finish label = 14529
  L_14529:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14543: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14544: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14542
  j L_14542
  #final label in binaryExp
  L_14542: 
  #jumpToAllOnlyIf
  L_14541:
  move $v0, $s1
  beqz $v0, L_14540
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14549: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_8_74
  move $s4, $v0
  L_14550: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14548
  j L_14548
  #final label in binaryExp
  L_14548: 
  #final label in codeGenAssignmentExpression
  L_14547: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14546: 
  #final label in statem expression
  L_14545: 
  #if finish label = 14540
  L_14540:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14554: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14555: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14553
  j L_14553
  #final label in binaryExp
  L_14553: 
  #jumpToAllOnlyIf
  L_14552:
  move $v0, $s1
  beqz $v0, L_14551
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14559: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14560: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14558
  j L_14558
  #final label in binaryExp
  L_14558: 
  #jumpToAllOnlyIf
  L_14557:
  move $v0, $s1
  beqz $v0, L_14556
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14565: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_6_82
  move $s4, $v0
  L_14566: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14564
  j L_14564
  #final label in binaryExp
  L_14564: 
  #final label in codeGenAssignmentExpression
  L_14563: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14562: 
  #final label in statem expression
  L_14561: 
  #if finish label = 14556
  L_14556:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14571: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_7_83
  move $s4, $v0
  L_14572: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14570
  j L_14570
  #final label in binaryExp
  L_14570: 
  #final label in codeGenAssignmentExpression
  L_14569: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14568: 
  #final label in statem expression
  L_14567: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14576: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14577: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14575
  j L_14575
  #final label in binaryExp
  L_14575: 
  #jumpToAllOnlyIf
  L_14574:
  move $v0, $s1
  beqz $v0, L_14573
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14582: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_8_84
  move $s4, $v0
  L_14583: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14581
  j L_14581
  #final label in binaryExp
  L_14581: 
  #final label in codeGenAssignmentExpression
  L_14580: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14579: 
  #final label in statem expression
  L_14578: 
  #if finish label = 14573
  L_14573:
  #if finish label = 14551
  L_14551:
  j L_14490
  #inside else
  L_14492:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14588: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_14589: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14587
  j L_14587
  #final label in binaryExp
  L_14587: 
  #jumpToAllOnlyIf
  L_14585:
  move $v0, $s1
  beqz $v0, L_14586
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14593: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14594: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14592
  j L_14592
  #final label in binaryExp
  L_14592: 
  #jumpToAllOnlyIf
  L_14591:
  move $v0, $s1
  beqz $v0, L_14590
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_14598: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14599: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14597
  j L_14597
  #final label in binaryExp
  L_14597: 
  #jumpToAllOnlyIf
  L_14596:
  move $v0, $s1
  beqz $v0, L_14595
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14604: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_7_63
  move $s4, $v0
  L_14605: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14603
  j L_14603
  #final label in binaryExp
  L_14603: 
  #final label in codeGenAssignmentExpression
  L_14602: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14601: 
  #final label in statem expression
  L_14600: 
  #if finish label = 14595
  L_14595:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14610: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_8_64
  move $s4, $v0
  L_14611: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14609
  j L_14609
  #final label in binaryExp
  L_14609: 
  #final label in codeGenAssignmentExpression
  L_14608: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14607: 
  #final label in statem expression
  L_14606: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_14615: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14616: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14614
  j L_14614
  #final label in binaryExp
  L_14614: 
  #jumpToAllOnlyIf
  L_14613:
  move $v0, $s1
  beqz $v0, L_14612
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14621: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_9_65
  move $s4, $v0
  L_14622: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14620
  j L_14620
  #final label in binaryExp
  L_14620: 
  #final label in codeGenAssignmentExpression
  L_14619: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14618: 
  #final label in statem expression
  L_14617: 
  #if finish label = 14612
  L_14612:
  #if finish label = 14590
  L_14590:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_14626: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14627: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14625
  j L_14625
  #final label in binaryExp
  L_14625: 
  #jumpToAllOnlyIf
  L_14624:
  move $v0, $s1
  beqz $v0, L_14623
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14632: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_7_73
  move $s4, $v0
  L_14633: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14631
  j L_14631
  #final label in binaryExp
  L_14631: 
  #final label in codeGenAssignmentExpression
  L_14630: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14629: 
  #final label in statem expression
  L_14628: 
  #if finish label = 14623
  L_14623:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_14637: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14638: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14636
  j L_14636
  #final label in binaryExp
  L_14636: 
  #jumpToAllOnlyIf
  L_14635:
  move $v0, $s1
  beqz $v0, L_14634
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14643: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_9_75
  move $s4, $v0
  L_14644: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14642
  j L_14642
  #final label in binaryExp
  L_14642: 
  #final label in codeGenAssignmentExpression
  L_14641: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14640: 
  #final label in statem expression
  L_14639: 
  #if finish label = 14634
  L_14634:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14648: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14649: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14647
  j L_14647
  #final label in binaryExp
  L_14647: 
  #jumpToAllOnlyIf
  L_14646:
  move $v0, $s1
  beqz $v0, L_14645
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_14653: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14654: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14652
  j L_14652
  #final label in binaryExp
  L_14652: 
  #jumpToAllOnlyIf
  L_14651:
  move $v0, $s1
  beqz $v0, L_14650
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14659: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_7_83
  move $s4, $v0
  L_14660: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14658
  j L_14658
  #final label in binaryExp
  L_14658: 
  #final label in codeGenAssignmentExpression
  L_14657: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14656: 
  #final label in statem expression
  L_14655: 
  #if finish label = 14650
  L_14650:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14665: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_8_84
  move $s4, $v0
  L_14666: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14664
  j L_14664
  #final label in binaryExp
  L_14664: 
  #final label in codeGenAssignmentExpression
  L_14663: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14662: 
  #final label in statem expression
  L_14661: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_14670: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14671: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14669
  j L_14669
  #final label in binaryExp
  L_14669: 
  #jumpToAllOnlyIf
  L_14668:
  move $v0, $s1
  beqz $v0, L_14667
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14676: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_9_85
  move $s4, $v0
  L_14677: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14675
  j L_14675
  #final label in binaryExp
  L_14675: 
  #final label in codeGenAssignmentExpression
  L_14674: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14673: 
  #final label in statem expression
  L_14672: 
  #if finish label = 14667
  L_14667:
  #if finish label = 14645
  L_14645:
  j L_14584
  #inside else
  L_14586:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14681: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14682: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14680
  j L_14680
  #final label in binaryExp
  L_14680: 
  #jumpToAllOnlyIf
  L_14679:
  move $v0, $s1
  beqz $v0, L_14678
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14686: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14687: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14685
  j L_14685
  #final label in binaryExp
  L_14685: 
  #jumpToAllOnlyIf
  L_14684:
  move $v0, $s1
  beqz $v0, L_14683
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_14691: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14692: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14690
  j L_14690
  #final label in binaryExp
  L_14690: 
  #jumpToAllOnlyIf
  L_14689:
  move $v0, $s1
  beqz $v0, L_14688
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14697: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_8_64
  move $s4, $v0
  L_14698: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14696
  j L_14696
  #final label in binaryExp
  L_14696: 
  #final label in codeGenAssignmentExpression
  L_14695: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14694: 
  #final label in statem expression
  L_14693: 
  #if finish label = 14688
  L_14688:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14703: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_5_9_65
  move $s4, $v0
  L_14704: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14702
  j L_14702
  #final label in binaryExp
  L_14702: 
  #final label in codeGenAssignmentExpression
  L_14701: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14700: 
  #final label in statem expression
  L_14699: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_14708: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14709: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14707
  j L_14707
  #final label in binaryExp
  L_14707: 
  #jumpToAllOnlyIf
  L_14706:
  move $v0, $s1
  beqz $v0, L_14705
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14714: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_14715: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14713
  j L_14713
  #final label in binaryExp
  L_14713: 
  #final label in codeGenAssignmentExpression
  L_14712: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14711: 
  #final label in statem expression
  L_14710: 
  #if finish label = 14705
  L_14705:
  #if finish label = 14683
  L_14683:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_14719: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14720: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14718
  j L_14718
  #final label in binaryExp
  L_14718: 
  #jumpToAllOnlyIf
  L_14717:
  move $v0, $s1
  beqz $v0, L_14716
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14725: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_8_74
  move $s4, $v0
  L_14726: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14724
  j L_14724
  #final label in binaryExp
  L_14724: 
  #final label in codeGenAssignmentExpression
  L_14723: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14722: 
  #final label in statem expression
  L_14721: 
  #if finish label = 14716
  L_14716:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_14730: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14731: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14729
  j L_14729
  #final label in binaryExp
  L_14729: 
  #jumpToAllOnlyIf
  L_14728:
  move $v0, $s1
  beqz $v0, L_14727
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14736: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_14737: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14735
  j L_14735
  #final label in binaryExp
  L_14735: 
  #final label in codeGenAssignmentExpression
  L_14734: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14733: 
  #final label in statem expression
  L_14732: 
  #if finish label = 14727
  L_14727:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_14741: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14742: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14740
  j L_14740
  #final label in binaryExp
  L_14740: 
  #jumpToAllOnlyIf
  L_14739:
  move $v0, $s1
  beqz $v0, L_14738
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_14746: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14747: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14745
  j L_14745
  #final label in binaryExp
  L_14745: 
  #jumpToAllOnlyIf
  L_14744:
  move $v0, $s1
  beqz $v0, L_14743
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14752: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_8_84
  move $s4, $v0
  L_14753: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14751
  j L_14751
  #final label in binaryExp
  L_14751: 
  #final label in codeGenAssignmentExpression
  L_14750: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14749: 
  #final label in statem expression
  L_14748: 
  #if finish label = 14743
  L_14743:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14758: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_9_85
  move $s4, $v0
  L_14759: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14757
  j L_14757
  #final label in binaryExp
  L_14757: 
  #final label in codeGenAssignmentExpression
  L_14756: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14755: 
  #final label in statem expression
  L_14754: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_14763: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14764: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14762
  j L_14762
  #final label in binaryExp
  L_14762: 
  #jumpToAllOnlyIf
  L_14761:
  move $v0, $s1
  beqz $v0, L_14760
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14769: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_14770: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14768
  j L_14768
  #final label in binaryExp
  L_14768: 
  #final label in codeGenAssignmentExpression
  L_14767: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14766: 
  #final label in statem expression
  L_14765: 
  #if finish label = 14760
  L_14760:
  #if finish label = 14738
  L_14738:
  #if finish label = 14678
  L_14678:
  #if finish label = 14584
  L_14584:
  #if finish label = 14490
  L_14490:
  #if finish label = 14396
  L_14396:
  #if finish label = 14302
  L_14302:
  #if finish label = 14208
  L_14208:
  #if finish label = 14114
  L_14114:
  #if finish label = 14020
  L_14020:
  #if finish label = 13926
  L_13926:
  #if finish label = 13832
  L_13832:
  j L_13826
  #inside else
  L_13828:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_14775: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_14776: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14774
  j L_14774
  #final label in binaryExp
  L_14774: 
  #jumpToAllOnlyIf
  L_14772:
  move $v0, $s1
  beqz $v0, L_14773
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14781: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14782: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14780
  j L_14780
  #final label in binaryExp
  L_14780: 
  #jumpToAllOnlyIf
  L_14778:
  move $v0, $s1
  beqz $v0, L_14779
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14786: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14787: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14785
  j L_14785
  #final label in binaryExp
  L_14785: 
  #jumpToAllOnlyIf
  L_14784:
  move $v0, $s1
  beqz $v0, L_14783
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_14791: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14792: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14790
  j L_14790
  #final label in binaryExp
  L_14790: 
  #jumpToAllOnlyIf
  L_14789:
  move $v0, $s1
  beqz $v0, L_14788
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14797: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_14798: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14796
  j L_14796
  #final label in binaryExp
  L_14796: 
  #final label in codeGenAssignmentExpression
  L_14795: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14794: 
  #final label in statem expression
  L_14793: 
  #if finish label = 14788
  L_14788:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14803: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_0_66
  move $s4, $v0
  L_14804: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14802
  j L_14802
  #final label in binaryExp
  L_14802: 
  #final label in codeGenAssignmentExpression
  L_14801: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14800: 
  #final label in statem expression
  L_14799: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_14808: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14809: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14807
  j L_14807
  #final label in binaryExp
  L_14807: 
  #jumpToAllOnlyIf
  L_14806:
  move $v0, $s1
  beqz $v0, L_14805
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14814: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_1_67
  move $s4, $v0
  L_14815: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14813
  j L_14813
  #final label in binaryExp
  L_14813: 
  #final label in codeGenAssignmentExpression
  L_14812: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14811: 
  #final label in statem expression
  L_14810: 
  #if finish label = 14805
  L_14805:
  #if finish label = 14783
  L_14783:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_14819: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14820: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14818
  j L_14818
  #final label in binaryExp
  L_14818: 
  #jumpToAllOnlyIf
  L_14817:
  move $v0, $s1
  beqz $v0, L_14816
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14825: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_14826: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14824
  j L_14824
  #final label in binaryExp
  L_14824: 
  #final label in codeGenAssignmentExpression
  L_14823: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14822: 
  #final label in statem expression
  L_14821: 
  #if finish label = 14816
  L_14816:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_14830: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14831: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14829
  j L_14829
  #final label in binaryExp
  L_14829: 
  #jumpToAllOnlyIf
  L_14828:
  move $v0, $s1
  beqz $v0, L_14827
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14836: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_1_77
  move $s4, $v0
  L_14837: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14835
  j L_14835
  #final label in binaryExp
  L_14835: 
  #final label in codeGenAssignmentExpression
  L_14834: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14833: 
  #final label in statem expression
  L_14832: 
  #if finish label = 14827
  L_14827:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14841: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14842: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14840
  j L_14840
  #final label in binaryExp
  L_14840: 
  #jumpToAllOnlyIf
  L_14839:
  move $v0, $s1
  beqz $v0, L_14838
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_14846: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14847: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14845
  j L_14845
  #final label in binaryExp
  L_14845: 
  #jumpToAllOnlyIf
  L_14844:
  move $v0, $s1
  beqz $v0, L_14843
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14852: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_14853: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14851
  j L_14851
  #final label in binaryExp
  L_14851: 
  #final label in codeGenAssignmentExpression
  L_14850: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14849: 
  #final label in statem expression
  L_14848: 
  #if finish label = 14843
  L_14843:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14858: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_0_86
  move $s4, $v0
  L_14859: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14857
  j L_14857
  #final label in binaryExp
  L_14857: 
  #final label in codeGenAssignmentExpression
  L_14856: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14855: 
  #final label in statem expression
  L_14854: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_14863: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14864: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14862
  j L_14862
  #final label in binaryExp
  L_14862: 
  #jumpToAllOnlyIf
  L_14861:
  move $v0, $s1
  beqz $v0, L_14860
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14869: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_1_87
  move $s4, $v0
  L_14870: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14868
  j L_14868
  #final label in binaryExp
  L_14868: 
  #final label in codeGenAssignmentExpression
  L_14867: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14866: 
  #final label in statem expression
  L_14865: 
  #if finish label = 14860
  L_14860:
  #if finish label = 14838
  L_14838:
  j L_14777
  #inside else
  L_14779:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14875: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_14876: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14874
  j L_14874
  #final label in binaryExp
  L_14874: 
  #jumpToAllOnlyIf
  L_14872:
  move $v0, $s1
  beqz $v0, L_14873
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14880: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14881: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14879
  j L_14879
  #final label in binaryExp
  L_14879: 
  #jumpToAllOnlyIf
  L_14878:
  move $v0, $s1
  beqz $v0, L_14877
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_14885: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14886: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14884
  j L_14884
  #final label in binaryExp
  L_14884: 
  #jumpToAllOnlyIf
  L_14883:
  move $v0, $s1
  beqz $v0, L_14882
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14891: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_0_66
  move $s4, $v0
  L_14892: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14890
  j L_14890
  #final label in binaryExp
  L_14890: 
  #final label in codeGenAssignmentExpression
  L_14889: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14888: 
  #final label in statem expression
  L_14887: 
  #if finish label = 14882
  L_14882:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14897: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_1_67
  move $s4, $v0
  L_14898: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14896
  j L_14896
  #final label in binaryExp
  L_14896: 
  #final label in codeGenAssignmentExpression
  L_14895: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14894: 
  #final label in statem expression
  L_14893: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_14902: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14903: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14901
  j L_14901
  #final label in binaryExp
  L_14901: 
  #jumpToAllOnlyIf
  L_14900:
  move $v0, $s1
  beqz $v0, L_14899
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14908: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_2_68
  move $s4, $v0
  L_14909: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14907
  j L_14907
  #final label in binaryExp
  L_14907: 
  #final label in codeGenAssignmentExpression
  L_14906: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14905: 
  #final label in statem expression
  L_14904: 
  #if finish label = 14899
  L_14899:
  #if finish label = 14877
  L_14877:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_14913: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14914: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14912
  j L_14912
  #final label in binaryExp
  L_14912: 
  #jumpToAllOnlyIf
  L_14911:
  move $v0, $s1
  beqz $v0, L_14910
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14919: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_0_76
  move $s4, $v0
  L_14920: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14918
  j L_14918
  #final label in binaryExp
  L_14918: 
  #final label in codeGenAssignmentExpression
  L_14917: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14916: 
  #final label in statem expression
  L_14915: 
  #if finish label = 14910
  L_14910:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_14924: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14925: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14923
  j L_14923
  #final label in binaryExp
  L_14923: 
  #jumpToAllOnlyIf
  L_14922:
  move $v0, $s1
  beqz $v0, L_14921
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14930: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_2_78
  move $s4, $v0
  L_14931: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14929
  j L_14929
  #final label in binaryExp
  L_14929: 
  #final label in codeGenAssignmentExpression
  L_14928: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14927: 
  #final label in statem expression
  L_14926: 
  #if finish label = 14921
  L_14921:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14935: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14936: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14934
  j L_14934
  #final label in binaryExp
  L_14934: 
  #jumpToAllOnlyIf
  L_14933:
  move $v0, $s1
  beqz $v0, L_14932
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_14940: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14941: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14939
  j L_14939
  #final label in binaryExp
  L_14939: 
  #jumpToAllOnlyIf
  L_14938:
  move $v0, $s1
  beqz $v0, L_14937
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14946: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_0_86
  move $s4, $v0
  L_14947: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14945
  j L_14945
  #final label in binaryExp
  L_14945: 
  #final label in codeGenAssignmentExpression
  L_14944: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14943: 
  #final label in statem expression
  L_14942: 
  #if finish label = 14937
  L_14937:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14952: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_1_87
  move $s4, $v0
  L_14953: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14951
  j L_14951
  #final label in binaryExp
  L_14951: 
  #final label in codeGenAssignmentExpression
  L_14950: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14949: 
  #final label in statem expression
  L_14948: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_14957: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14958: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14956
  j L_14956
  #final label in binaryExp
  L_14956: 
  #jumpToAllOnlyIf
  L_14955:
  move $v0, $s1
  beqz $v0, L_14954
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14963: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_2_88
  move $s4, $v0
  L_14964: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14962
  j L_14962
  #final label in binaryExp
  L_14962: 
  #final label in codeGenAssignmentExpression
  L_14961: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14960: 
  #final label in statem expression
  L_14959: 
  #if finish label = 14954
  L_14954:
  #if finish label = 14932
  L_14932:
  j L_14871
  #inside else
  L_14873:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_14969: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_14970: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14968
  j L_14968
  #final label in binaryExp
  L_14968: 
  #jumpToAllOnlyIf
  L_14966:
  move $v0, $s1
  beqz $v0, L_14967
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_14974: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14975: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14973
  j L_14973
  #final label in binaryExp
  L_14973: 
  #jumpToAllOnlyIf
  L_14972:
  move $v0, $s1
  beqz $v0, L_14971
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_14979: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_14980: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14978
  j L_14978
  #final label in binaryExp
  L_14978: 
  #jumpToAllOnlyIf
  L_14977:
  move $v0, $s1
  beqz $v0, L_14976
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14985: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_1_67
  move $s4, $v0
  L_14986: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14984
  j L_14984
  #final label in binaryExp
  L_14984: 
  #final label in codeGenAssignmentExpression
  L_14983: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14982: 
  #final label in statem expression
  L_14981: 
  #if finish label = 14976
  L_14976:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_14991: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_2_68
  move $s4, $v0
  L_14992: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_14990
  j L_14990
  #final label in binaryExp
  L_14990: 
  #final label in codeGenAssignmentExpression
  L_14989: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14988: 
  #final label in statem expression
  L_14987: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_14996: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_14997: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_14995
  j L_14995
  #final label in binaryExp
  L_14995: 
  #jumpToAllOnlyIf
  L_14994:
  move $v0, $s1
  beqz $v0, L_14993
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15002: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_3_69
  move $s4, $v0
  L_15003: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15001
  j L_15001
  #final label in binaryExp
  L_15001: 
  #final label in codeGenAssignmentExpression
  L_15000: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_14999: 
  #final label in statem expression
  L_14998: 
  #if finish label = 14993
  L_14993:
  #if finish label = 14971
  L_14971:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15007: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15008: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15006
  j L_15006
  #final label in binaryExp
  L_15006: 
  #jumpToAllOnlyIf
  L_15005:
  move $v0, $s1
  beqz $v0, L_15004
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15013: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_1_77
  move $s4, $v0
  L_15014: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15012
  j L_15012
  #final label in binaryExp
  L_15012: 
  #final label in codeGenAssignmentExpression
  L_15011: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15010: 
  #final label in statem expression
  L_15009: 
  #if finish label = 15004
  L_15004:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15018: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15019: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15017
  j L_15017
  #final label in binaryExp
  L_15017: 
  #jumpToAllOnlyIf
  L_15016:
  move $v0, $s1
  beqz $v0, L_15015
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15024: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_3_79
  move $s4, $v0
  L_15025: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15023
  j L_15023
  #final label in binaryExp
  L_15023: 
  #final label in codeGenAssignmentExpression
  L_15022: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15021: 
  #final label in statem expression
  L_15020: 
  #if finish label = 15015
  L_15015:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15029: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15030: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15028
  j L_15028
  #final label in binaryExp
  L_15028: 
  #jumpToAllOnlyIf
  L_15027:
  move $v0, $s1
  beqz $v0, L_15026
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15034: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15035: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15033
  j L_15033
  #final label in binaryExp
  L_15033: 
  #jumpToAllOnlyIf
  L_15032:
  move $v0, $s1
  beqz $v0, L_15031
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15040: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_1_87
  move $s4, $v0
  L_15041: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15039
  j L_15039
  #final label in binaryExp
  L_15039: 
  #final label in codeGenAssignmentExpression
  L_15038: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15037: 
  #final label in statem expression
  L_15036: 
  #if finish label = 15031
  L_15031:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15046: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_2_88
  move $s4, $v0
  L_15047: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15045
  j L_15045
  #final label in binaryExp
  L_15045: 
  #final label in codeGenAssignmentExpression
  L_15044: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15043: 
  #final label in statem expression
  L_15042: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15051: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15052: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15050
  j L_15050
  #final label in binaryExp
  L_15050: 
  #jumpToAllOnlyIf
  L_15049:
  move $v0, $s1
  beqz $v0, L_15048
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15057: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_3_89
  move $s4, $v0
  L_15058: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15056
  j L_15056
  #final label in binaryExp
  L_15056: 
  #final label in codeGenAssignmentExpression
  L_15055: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15054: 
  #final label in statem expression
  L_15053: 
  #if finish label = 15048
  L_15048:
  #if finish label = 15026
  L_15026:
  j L_14965
  #inside else
  L_14967:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15063: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_15064: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15062
  j L_15062
  #final label in binaryExp
  L_15062: 
  #jumpToAllOnlyIf
  L_15060:
  move $v0, $s1
  beqz $v0, L_15061
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15068: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15069: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15067
  j L_15067
  #final label in binaryExp
  L_15067: 
  #jumpToAllOnlyIf
  L_15066:
  move $v0, $s1
  beqz $v0, L_15065
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_15073: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15074: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15072
  j L_15072
  #final label in binaryExp
  L_15072: 
  #jumpToAllOnlyIf
  L_15071:
  move $v0, $s1
  beqz $v0, L_15070
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15079: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_2_68
  move $s4, $v0
  L_15080: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15078
  j L_15078
  #final label in binaryExp
  L_15078: 
  #final label in codeGenAssignmentExpression
  L_15077: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15076: 
  #final label in statem expression
  L_15075: 
  #if finish label = 15070
  L_15070:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15085: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_3_69
  move $s4, $v0
  L_15086: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15084
  j L_15084
  #final label in binaryExp
  L_15084: 
  #final label in codeGenAssignmentExpression
  L_15083: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15082: 
  #final label in statem expression
  L_15081: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_15090: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15091: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15089
  j L_15089
  #final label in binaryExp
  L_15089: 
  #jumpToAllOnlyIf
  L_15088:
  move $v0, $s1
  beqz $v0, L_15087
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15096: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_4_70
  move $s4, $v0
  L_15097: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15095
  j L_15095
  #final label in binaryExp
  L_15095: 
  #final label in codeGenAssignmentExpression
  L_15094: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15093: 
  #final label in statem expression
  L_15092: 
  #if finish label = 15087
  L_15087:
  #if finish label = 15065
  L_15065:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_15101: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15102: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15100
  j L_15100
  #final label in binaryExp
  L_15100: 
  #jumpToAllOnlyIf
  L_15099:
  move $v0, $s1
  beqz $v0, L_15098
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15107: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_2_78
  move $s4, $v0
  L_15108: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15106
  j L_15106
  #final label in binaryExp
  L_15106: 
  #final label in codeGenAssignmentExpression
  L_15105: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15104: 
  #final label in statem expression
  L_15103: 
  #if finish label = 15098
  L_15098:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_15112: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15113: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15111
  j L_15111
  #final label in binaryExp
  L_15111: 
  #jumpToAllOnlyIf
  L_15110:
  move $v0, $s1
  beqz $v0, L_15109
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15118: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_4_80
  move $s4, $v0
  L_15119: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15117
  j L_15117
  #final label in binaryExp
  L_15117: 
  #final label in codeGenAssignmentExpression
  L_15116: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15115: 
  #final label in statem expression
  L_15114: 
  #if finish label = 15109
  L_15109:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15123: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15124: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15122
  j L_15122
  #final label in binaryExp
  L_15122: 
  #jumpToAllOnlyIf
  L_15121:
  move $v0, $s1
  beqz $v0, L_15120
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_15128: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15129: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15127
  j L_15127
  #final label in binaryExp
  L_15127: 
  #jumpToAllOnlyIf
  L_15126:
  move $v0, $s1
  beqz $v0, L_15125
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15134: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_2_88
  move $s4, $v0
  L_15135: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15133
  j L_15133
  #final label in binaryExp
  L_15133: 
  #final label in codeGenAssignmentExpression
  L_15132: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15131: 
  #final label in statem expression
  L_15130: 
  #if finish label = 15125
  L_15125:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15140: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_3_89
  move $s4, $v0
  L_15141: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15139
  j L_15139
  #final label in binaryExp
  L_15139: 
  #final label in codeGenAssignmentExpression
  L_15138: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15137: 
  #final label in statem expression
  L_15136: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_15145: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15146: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15144
  j L_15144
  #final label in binaryExp
  L_15144: 
  #jumpToAllOnlyIf
  L_15143:
  move $v0, $s1
  beqz $v0, L_15142
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15151: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_4_90
  move $s4, $v0
  L_15152: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15150
  j L_15150
  #final label in binaryExp
  L_15150: 
  #final label in codeGenAssignmentExpression
  L_15149: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15148: 
  #final label in statem expression
  L_15147: 
  #if finish label = 15142
  L_15142:
  #if finish label = 15120
  L_15120:
  j L_15059
  #inside else
  L_15061:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15157: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_15158: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15156
  j L_15156
  #final label in binaryExp
  L_15156: 
  #jumpToAllOnlyIf
  L_15154:
  move $v0, $s1
  beqz $v0, L_15155
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15162: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15163: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15161
  j L_15161
  #final label in binaryExp
  L_15161: 
  #jumpToAllOnlyIf
  L_15160:
  move $v0, $s1
  beqz $v0, L_15159
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_15167: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15168: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15166
  j L_15166
  #final label in binaryExp
  L_15166: 
  #jumpToAllOnlyIf
  L_15165:
  move $v0, $s1
  beqz $v0, L_15164
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15173: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_3_69
  move $s4, $v0
  L_15174: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15172
  j L_15172
  #final label in binaryExp
  L_15172: 
  #final label in codeGenAssignmentExpression
  L_15171: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15170: 
  #final label in statem expression
  L_15169: 
  #if finish label = 15164
  L_15164:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15179: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_4_70
  move $s4, $v0
  L_15180: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15178
  j L_15178
  #final label in binaryExp
  L_15178: 
  #final label in codeGenAssignmentExpression
  L_15177: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15176: 
  #final label in statem expression
  L_15175: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_15184: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15185: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15183
  j L_15183
  #final label in binaryExp
  L_15183: 
  #jumpToAllOnlyIf
  L_15182:
  move $v0, $s1
  beqz $v0, L_15181
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15190: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_5_71
  move $s4, $v0
  L_15191: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15189
  j L_15189
  #final label in binaryExp
  L_15189: 
  #final label in codeGenAssignmentExpression
  L_15188: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15187: 
  #final label in statem expression
  L_15186: 
  #if finish label = 15181
  L_15181:
  #if finish label = 15159
  L_15159:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_15195: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15196: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15194
  j L_15194
  #final label in binaryExp
  L_15194: 
  #jumpToAllOnlyIf
  L_15193:
  move $v0, $s1
  beqz $v0, L_15192
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15201: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_3_79
  move $s4, $v0
  L_15202: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15200
  j L_15200
  #final label in binaryExp
  L_15200: 
  #final label in codeGenAssignmentExpression
  L_15199: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15198: 
  #final label in statem expression
  L_15197: 
  #if finish label = 15192
  L_15192:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_15206: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15207: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15205
  j L_15205
  #final label in binaryExp
  L_15205: 
  #jumpToAllOnlyIf
  L_15204:
  move $v0, $s1
  beqz $v0, L_15203
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15212: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_5_81
  move $s4, $v0
  L_15213: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15211
  j L_15211
  #final label in binaryExp
  L_15211: 
  #final label in codeGenAssignmentExpression
  L_15210: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15209: 
  #final label in statem expression
  L_15208: 
  #if finish label = 15203
  L_15203:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15217: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15218: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15216
  j L_15216
  #final label in binaryExp
  L_15216: 
  #jumpToAllOnlyIf
  L_15215:
  move $v0, $s1
  beqz $v0, L_15214
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_15222: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15223: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15221
  j L_15221
  #final label in binaryExp
  L_15221: 
  #jumpToAllOnlyIf
  L_15220:
  move $v0, $s1
  beqz $v0, L_15219
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15228: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_3_89
  move $s4, $v0
  L_15229: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15227
  j L_15227
  #final label in binaryExp
  L_15227: 
  #final label in codeGenAssignmentExpression
  L_15226: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15225: 
  #final label in statem expression
  L_15224: 
  #if finish label = 15219
  L_15219:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15234: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_4_90
  move $s4, $v0
  L_15235: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15233
  j L_15233
  #final label in binaryExp
  L_15233: 
  #final label in codeGenAssignmentExpression
  L_15232: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15231: 
  #final label in statem expression
  L_15230: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_15239: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15240: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15238
  j L_15238
  #final label in binaryExp
  L_15238: 
  #jumpToAllOnlyIf
  L_15237:
  move $v0, $s1
  beqz $v0, L_15236
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15245: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_5_91
  move $s4, $v0
  L_15246: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15244
  j L_15244
  #final label in binaryExp
  L_15244: 
  #final label in codeGenAssignmentExpression
  L_15243: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15242: 
  #final label in statem expression
  L_15241: 
  #if finish label = 15236
  L_15236:
  #if finish label = 15214
  L_15214:
  j L_15153
  #inside else
  L_15155:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15251: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_15252: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15250
  j L_15250
  #final label in binaryExp
  L_15250: 
  #jumpToAllOnlyIf
  L_15248:
  move $v0, $s1
  beqz $v0, L_15249
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15256: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15257: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15255
  j L_15255
  #final label in binaryExp
  L_15255: 
  #jumpToAllOnlyIf
  L_15254:
  move $v0, $s1
  beqz $v0, L_15253
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_15261: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15262: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15260
  j L_15260
  #final label in binaryExp
  L_15260: 
  #jumpToAllOnlyIf
  L_15259:
  move $v0, $s1
  beqz $v0, L_15258
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15267: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_4_70
  move $s4, $v0
  L_15268: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15266
  j L_15266
  #final label in binaryExp
  L_15266: 
  #final label in codeGenAssignmentExpression
  L_15265: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15264: 
  #final label in statem expression
  L_15263: 
  #if finish label = 15258
  L_15258:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15273: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_5_71
  move $s4, $v0
  L_15274: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15272
  j L_15272
  #final label in binaryExp
  L_15272: 
  #final label in codeGenAssignmentExpression
  L_15271: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15270: 
  #final label in statem expression
  L_15269: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_15278: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15279: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15277
  j L_15277
  #final label in binaryExp
  L_15277: 
  #jumpToAllOnlyIf
  L_15276:
  move $v0, $s1
  beqz $v0, L_15275
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15284: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_6_72
  move $s4, $v0
  L_15285: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15283
  j L_15283
  #final label in binaryExp
  L_15283: 
  #final label in codeGenAssignmentExpression
  L_15282: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15281: 
  #final label in statem expression
  L_15280: 
  #if finish label = 15275
  L_15275:
  #if finish label = 15253
  L_15253:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_15289: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15290: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15288
  j L_15288
  #final label in binaryExp
  L_15288: 
  #jumpToAllOnlyIf
  L_15287:
  move $v0, $s1
  beqz $v0, L_15286
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15295: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_4_80
  move $s4, $v0
  L_15296: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15294
  j L_15294
  #final label in binaryExp
  L_15294: 
  #final label in codeGenAssignmentExpression
  L_15293: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15292: 
  #final label in statem expression
  L_15291: 
  #if finish label = 15286
  L_15286:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_15300: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15301: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15299
  j L_15299
  #final label in binaryExp
  L_15299: 
  #jumpToAllOnlyIf
  L_15298:
  move $v0, $s1
  beqz $v0, L_15297
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15306: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_6_82
  move $s4, $v0
  L_15307: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15305
  j L_15305
  #final label in binaryExp
  L_15305: 
  #final label in codeGenAssignmentExpression
  L_15304: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15303: 
  #final label in statem expression
  L_15302: 
  #if finish label = 15297
  L_15297:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15311: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15312: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15310
  j L_15310
  #final label in binaryExp
  L_15310: 
  #jumpToAllOnlyIf
  L_15309:
  move $v0, $s1
  beqz $v0, L_15308
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_15316: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15317: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15315
  j L_15315
  #final label in binaryExp
  L_15315: 
  #jumpToAllOnlyIf
  L_15314:
  move $v0, $s1
  beqz $v0, L_15313
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15322: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_4_90
  move $s4, $v0
  L_15323: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15321
  j L_15321
  #final label in binaryExp
  L_15321: 
  #final label in codeGenAssignmentExpression
  L_15320: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15319: 
  #final label in statem expression
  L_15318: 
  #if finish label = 15313
  L_15313:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15328: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_5_91
  move $s4, $v0
  L_15329: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15327
  j L_15327
  #final label in binaryExp
  L_15327: 
  #final label in codeGenAssignmentExpression
  L_15326: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15325: 
  #final label in statem expression
  L_15324: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_15333: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15334: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15332
  j L_15332
  #final label in binaryExp
  L_15332: 
  #jumpToAllOnlyIf
  L_15331:
  move $v0, $s1
  beqz $v0, L_15330
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15339: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_6_92
  move $s4, $v0
  L_15340: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15338
  j L_15338
  #final label in binaryExp
  L_15338: 
  #final label in codeGenAssignmentExpression
  L_15337: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15336: 
  #final label in statem expression
  L_15335: 
  #if finish label = 15330
  L_15330:
  #if finish label = 15308
  L_15308:
  j L_15247
  #inside else
  L_15249:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15345: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_15346: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15344
  j L_15344
  #final label in binaryExp
  L_15344: 
  #jumpToAllOnlyIf
  L_15342:
  move $v0, $s1
  beqz $v0, L_15343
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15350: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15351: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15349
  j L_15349
  #final label in binaryExp
  L_15349: 
  #jumpToAllOnlyIf
  L_15348:
  move $v0, $s1
  beqz $v0, L_15347
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_15355: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15356: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15354
  j L_15354
  #final label in binaryExp
  L_15354: 
  #jumpToAllOnlyIf
  L_15353:
  move $v0, $s1
  beqz $v0, L_15352
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15361: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_5_71
  move $s4, $v0
  L_15362: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15360
  j L_15360
  #final label in binaryExp
  L_15360: 
  #final label in codeGenAssignmentExpression
  L_15359: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15358: 
  #final label in statem expression
  L_15357: 
  #if finish label = 15352
  L_15352:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15367: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_6_72
  move $s4, $v0
  L_15368: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15366
  j L_15366
  #final label in binaryExp
  L_15366: 
  #final label in codeGenAssignmentExpression
  L_15365: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15364: 
  #final label in statem expression
  L_15363: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_15372: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15373: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15371
  j L_15371
  #final label in binaryExp
  L_15371: 
  #jumpToAllOnlyIf
  L_15370:
  move $v0, $s1
  beqz $v0, L_15369
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15378: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_7_73
  move $s4, $v0
  L_15379: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15377
  j L_15377
  #final label in binaryExp
  L_15377: 
  #final label in codeGenAssignmentExpression
  L_15376: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15375: 
  #final label in statem expression
  L_15374: 
  #if finish label = 15369
  L_15369:
  #if finish label = 15347
  L_15347:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_15383: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15384: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15382
  j L_15382
  #final label in binaryExp
  L_15382: 
  #jumpToAllOnlyIf
  L_15381:
  move $v0, $s1
  beqz $v0, L_15380
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15389: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_5_81
  move $s4, $v0
  L_15390: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15388
  j L_15388
  #final label in binaryExp
  L_15388: 
  #final label in codeGenAssignmentExpression
  L_15387: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15386: 
  #final label in statem expression
  L_15385: 
  #if finish label = 15380
  L_15380:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_15394: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15395: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15393
  j L_15393
  #final label in binaryExp
  L_15393: 
  #jumpToAllOnlyIf
  L_15392:
  move $v0, $s1
  beqz $v0, L_15391
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15400: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_7_83
  move $s4, $v0
  L_15401: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15399
  j L_15399
  #final label in binaryExp
  L_15399: 
  #final label in codeGenAssignmentExpression
  L_15398: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15397: 
  #final label in statem expression
  L_15396: 
  #if finish label = 15391
  L_15391:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15405: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15406: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15404
  j L_15404
  #final label in binaryExp
  L_15404: 
  #jumpToAllOnlyIf
  L_15403:
  move $v0, $s1
  beqz $v0, L_15402
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_15410: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15411: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15409
  j L_15409
  #final label in binaryExp
  L_15409: 
  #jumpToAllOnlyIf
  L_15408:
  move $v0, $s1
  beqz $v0, L_15407
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15416: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_5_91
  move $s4, $v0
  L_15417: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15415
  j L_15415
  #final label in binaryExp
  L_15415: 
  #final label in codeGenAssignmentExpression
  L_15414: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15413: 
  #final label in statem expression
  L_15412: 
  #if finish label = 15407
  L_15407:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15422: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_6_92
  move $s4, $v0
  L_15423: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15421
  j L_15421
  #final label in binaryExp
  L_15421: 
  #final label in codeGenAssignmentExpression
  L_15420: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15419: 
  #final label in statem expression
  L_15418: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_15427: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15428: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15426
  j L_15426
  #final label in binaryExp
  L_15426: 
  #jumpToAllOnlyIf
  L_15425:
  move $v0, $s1
  beqz $v0, L_15424
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15433: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_7_93
  move $s4, $v0
  L_15434: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15432
  j L_15432
  #final label in binaryExp
  L_15432: 
  #final label in codeGenAssignmentExpression
  L_15431: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15430: 
  #final label in statem expression
  L_15429: 
  #if finish label = 15424
  L_15424:
  #if finish label = 15402
  L_15402:
  j L_15341
  #inside else
  L_15343:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15439: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_15440: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15438
  j L_15438
  #final label in binaryExp
  L_15438: 
  #jumpToAllOnlyIf
  L_15436:
  move $v0, $s1
  beqz $v0, L_15437
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15444: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15445: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15443
  j L_15443
  #final label in binaryExp
  L_15443: 
  #jumpToAllOnlyIf
  L_15442:
  move $v0, $s1
  beqz $v0, L_15441
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15449: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15450: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15448
  j L_15448
  #final label in binaryExp
  L_15448: 
  #jumpToAllOnlyIf
  L_15447:
  move $v0, $s1
  beqz $v0, L_15446
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15455: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_6_72
  move $s4, $v0
  L_15456: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15454
  j L_15454
  #final label in binaryExp
  L_15454: 
  #final label in codeGenAssignmentExpression
  L_15453: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15452: 
  #final label in statem expression
  L_15451: 
  #if finish label = 15446
  L_15446:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15461: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_7_73
  move $s4, $v0
  L_15462: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15460
  j L_15460
  #final label in binaryExp
  L_15460: 
  #final label in codeGenAssignmentExpression
  L_15459: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15458: 
  #final label in statem expression
  L_15457: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15466: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15467: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15465
  j L_15465
  #final label in binaryExp
  L_15465: 
  #jumpToAllOnlyIf
  L_15464:
  move $v0, $s1
  beqz $v0, L_15463
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15472: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_8_74
  move $s4, $v0
  L_15473: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15471
  j L_15471
  #final label in binaryExp
  L_15471: 
  #final label in codeGenAssignmentExpression
  L_15470: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15469: 
  #final label in statem expression
  L_15468: 
  #if finish label = 15463
  L_15463:
  #if finish label = 15441
  L_15441:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15477: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15478: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15476
  j L_15476
  #final label in binaryExp
  L_15476: 
  #jumpToAllOnlyIf
  L_15475:
  move $v0, $s1
  beqz $v0, L_15474
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15483: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_6_82
  move $s4, $v0
  L_15484: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15482
  j L_15482
  #final label in binaryExp
  L_15482: 
  #final label in codeGenAssignmentExpression
  L_15481: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15480: 
  #final label in statem expression
  L_15479: 
  #if finish label = 15474
  L_15474:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15488: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15489: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15487
  j L_15487
  #final label in binaryExp
  L_15487: 
  #jumpToAllOnlyIf
  L_15486:
  move $v0, $s1
  beqz $v0, L_15485
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15494: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_8_84
  move $s4, $v0
  L_15495: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15493
  j L_15493
  #final label in binaryExp
  L_15493: 
  #final label in codeGenAssignmentExpression
  L_15492: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15491: 
  #final label in statem expression
  L_15490: 
  #if finish label = 15485
  L_15485:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15499: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15500: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15498
  j L_15498
  #final label in binaryExp
  L_15498: 
  #jumpToAllOnlyIf
  L_15497:
  move $v0, $s1
  beqz $v0, L_15496
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15504: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15505: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15503
  j L_15503
  #final label in binaryExp
  L_15503: 
  #jumpToAllOnlyIf
  L_15502:
  move $v0, $s1
  beqz $v0, L_15501
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15510: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_6_92
  move $s4, $v0
  L_15511: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15509
  j L_15509
  #final label in binaryExp
  L_15509: 
  #final label in codeGenAssignmentExpression
  L_15508: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15507: 
  #final label in statem expression
  L_15506: 
  #if finish label = 15501
  L_15501:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15516: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_7_93
  move $s4, $v0
  L_15517: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15515
  j L_15515
  #final label in binaryExp
  L_15515: 
  #final label in codeGenAssignmentExpression
  L_15514: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15513: 
  #final label in statem expression
  L_15512: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15521: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15522: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15520
  j L_15520
  #final label in binaryExp
  L_15520: 
  #jumpToAllOnlyIf
  L_15519:
  move $v0, $s1
  beqz $v0, L_15518
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15527: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_8_94
  move $s4, $v0
  L_15528: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15526
  j L_15526
  #final label in binaryExp
  L_15526: 
  #final label in codeGenAssignmentExpression
  L_15525: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15524: 
  #final label in statem expression
  L_15523: 
  #if finish label = 15518
  L_15518:
  #if finish label = 15496
  L_15496:
  j L_15435
  #inside else
  L_15437:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15533: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_15534: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15532
  j L_15532
  #final label in binaryExp
  L_15532: 
  #jumpToAllOnlyIf
  L_15530:
  move $v0, $s1
  beqz $v0, L_15531
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15538: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15539: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15537
  j L_15537
  #final label in binaryExp
  L_15537: 
  #jumpToAllOnlyIf
  L_15536:
  move $v0, $s1
  beqz $v0, L_15535
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15543: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15544: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15542
  j L_15542
  #final label in binaryExp
  L_15542: 
  #jumpToAllOnlyIf
  L_15541:
  move $v0, $s1
  beqz $v0, L_15540
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15549: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_7_73
  move $s4, $v0
  L_15550: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15548
  j L_15548
  #final label in binaryExp
  L_15548: 
  #final label in codeGenAssignmentExpression
  L_15547: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15546: 
  #final label in statem expression
  L_15545: 
  #if finish label = 15540
  L_15540:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15555: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_8_74
  move $s4, $v0
  L_15556: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15554
  j L_15554
  #final label in binaryExp
  L_15554: 
  #final label in codeGenAssignmentExpression
  L_15553: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15552: 
  #final label in statem expression
  L_15551: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15560: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15561: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15559
  j L_15559
  #final label in binaryExp
  L_15559: 
  #jumpToAllOnlyIf
  L_15558:
  move $v0, $s1
  beqz $v0, L_15557
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15566: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_9_75
  move $s4, $v0
  L_15567: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15565
  j L_15565
  #final label in binaryExp
  L_15565: 
  #final label in codeGenAssignmentExpression
  L_15564: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15563: 
  #final label in statem expression
  L_15562: 
  #if finish label = 15557
  L_15557:
  #if finish label = 15535
  L_15535:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15571: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15572: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15570
  j L_15570
  #final label in binaryExp
  L_15570: 
  #jumpToAllOnlyIf
  L_15569:
  move $v0, $s1
  beqz $v0, L_15568
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15577: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_7_83
  move $s4, $v0
  L_15578: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15576
  j L_15576
  #final label in binaryExp
  L_15576: 
  #final label in codeGenAssignmentExpression
  L_15575: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15574: 
  #final label in statem expression
  L_15573: 
  #if finish label = 15568
  L_15568:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15582: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15583: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15581
  j L_15581
  #final label in binaryExp
  L_15581: 
  #jumpToAllOnlyIf
  L_15580:
  move $v0, $s1
  beqz $v0, L_15579
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15588: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_9_85
  move $s4, $v0
  L_15589: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15587
  j L_15587
  #final label in binaryExp
  L_15587: 
  #final label in codeGenAssignmentExpression
  L_15586: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15585: 
  #final label in statem expression
  L_15584: 
  #if finish label = 15579
  L_15579:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15593: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15594: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15592
  j L_15592
  #final label in binaryExp
  L_15592: 
  #jumpToAllOnlyIf
  L_15591:
  move $v0, $s1
  beqz $v0, L_15590
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15598: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15599: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15597
  j L_15597
  #final label in binaryExp
  L_15597: 
  #jumpToAllOnlyIf
  L_15596:
  move $v0, $s1
  beqz $v0, L_15595
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15604: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_7_93
  move $s4, $v0
  L_15605: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15603
  j L_15603
  #final label in binaryExp
  L_15603: 
  #final label in codeGenAssignmentExpression
  L_15602: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15601: 
  #final label in statem expression
  L_15600: 
  #if finish label = 15595
  L_15595:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15610: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_8_94
  move $s4, $v0
  L_15611: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15609
  j L_15609
  #final label in binaryExp
  L_15609: 
  #final label in codeGenAssignmentExpression
  L_15608: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15607: 
  #final label in statem expression
  L_15606: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15615: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15616: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15614
  j L_15614
  #final label in binaryExp
  L_15614: 
  #jumpToAllOnlyIf
  L_15613:
  move $v0, $s1
  beqz $v0, L_15612
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15621: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_9_95
  move $s4, $v0
  L_15622: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15620
  j L_15620
  #final label in binaryExp
  L_15620: 
  #final label in codeGenAssignmentExpression
  L_15619: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15618: 
  #final label in statem expression
  L_15617: 
  #if finish label = 15612
  L_15612:
  #if finish label = 15590
  L_15590:
  j L_15529
  #inside else
  L_15531:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15626: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15627: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15625
  j L_15625
  #final label in binaryExp
  L_15625: 
  #jumpToAllOnlyIf
  L_15624:
  move $v0, $s1
  beqz $v0, L_15623
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15631: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15632: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15630
  j L_15630
  #final label in binaryExp
  L_15630: 
  #jumpToAllOnlyIf
  L_15629:
  move $v0, $s1
  beqz $v0, L_15628
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_15636: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15637: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15635
  j L_15635
  #final label in binaryExp
  L_15635: 
  #jumpToAllOnlyIf
  L_15634:
  move $v0, $s1
  beqz $v0, L_15633
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15642: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_8_74
  move $s4, $v0
  L_15643: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15641
  j L_15641
  #final label in binaryExp
  L_15641: 
  #final label in codeGenAssignmentExpression
  L_15640: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15639: 
  #final label in statem expression
  L_15638: 
  #if finish label = 15633
  L_15633:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15648: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_6_9_75
  move $s4, $v0
  L_15649: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15647
  j L_15647
  #final label in binaryExp
  L_15647: 
  #final label in codeGenAssignmentExpression
  L_15646: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15645: 
  #final label in statem expression
  L_15644: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_15653: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15654: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15652
  j L_15652
  #final label in binaryExp
  L_15652: 
  #jumpToAllOnlyIf
  L_15651:
  move $v0, $s1
  beqz $v0, L_15650
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15659: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_15660: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15658
  j L_15658
  #final label in binaryExp
  L_15658: 
  #final label in codeGenAssignmentExpression
  L_15657: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15656: 
  #final label in statem expression
  L_15655: 
  #if finish label = 15650
  L_15650:
  #if finish label = 15628
  L_15628:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_15664: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15665: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15663
  j L_15663
  #final label in binaryExp
  L_15663: 
  #jumpToAllOnlyIf
  L_15662:
  move $v0, $s1
  beqz $v0, L_15661
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15670: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_8_84
  move $s4, $v0
  L_15671: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15669
  j L_15669
  #final label in binaryExp
  L_15669: 
  #final label in codeGenAssignmentExpression
  L_15668: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15667: 
  #final label in statem expression
  L_15666: 
  #if finish label = 15661
  L_15661:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_15675: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15676: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15674
  j L_15674
  #final label in binaryExp
  L_15674: 
  #jumpToAllOnlyIf
  L_15673:
  move $v0, $s1
  beqz $v0, L_15672
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15681: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_15682: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15680
  j L_15680
  #final label in binaryExp
  L_15680: 
  #final label in codeGenAssignmentExpression
  L_15679: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15678: 
  #final label in statem expression
  L_15677: 
  #if finish label = 15672
  L_15672:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_15686: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15687: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15685
  j L_15685
  #final label in binaryExp
  L_15685: 
  #jumpToAllOnlyIf
  L_15684:
  move $v0, $s1
  beqz $v0, L_15683
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_15691: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15692: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15690
  j L_15690
  #final label in binaryExp
  L_15690: 
  #jumpToAllOnlyIf
  L_15689:
  move $v0, $s1
  beqz $v0, L_15688
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15697: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_8_94
  move $s4, $v0
  L_15698: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15696
  j L_15696
  #final label in binaryExp
  L_15696: 
  #final label in codeGenAssignmentExpression
  L_15695: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15694: 
  #final label in statem expression
  L_15693: 
  #if finish label = 15688
  L_15688:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15703: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_9_95
  move $s4, $v0
  L_15704: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15702
  j L_15702
  #final label in binaryExp
  L_15702: 
  #final label in codeGenAssignmentExpression
  L_15701: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15700: 
  #final label in statem expression
  L_15699: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_15708: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15709: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15707
  j L_15707
  #final label in binaryExp
  L_15707: 
  #jumpToAllOnlyIf
  L_15706:
  move $v0, $s1
  beqz $v0, L_15705
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15714: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_15715: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15713
  j L_15713
  #final label in binaryExp
  L_15713: 
  #final label in codeGenAssignmentExpression
  L_15712: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15711: 
  #final label in statem expression
  L_15710: 
  #if finish label = 15705
  L_15705:
  #if finish label = 15683
  L_15683:
  #if finish label = 15623
  L_15623:
  #if finish label = 15529
  L_15529:
  #if finish label = 15435
  L_15435:
  #if finish label = 15341
  L_15341:
  #if finish label = 15247
  L_15247:
  #if finish label = 15153
  L_15153:
  #if finish label = 15059
  L_15059:
  #if finish label = 14965
  L_14965:
  #if finish label = 14871
  L_14871:
  #if finish label = 14777
  L_14777:
  j L_14771
  #inside else
  L_14773:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_15720: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_15721: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15719
  j L_15719
  #final label in binaryExp
  L_15719: 
  #jumpToAllOnlyIf
  L_15717:
  move $v0, $s1
  beqz $v0, L_15718
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15726: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15727: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15725
  j L_15725
  #final label in binaryExp
  L_15725: 
  #jumpToAllOnlyIf
  L_15723:
  move $v0, $s1
  beqz $v0, L_15724
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15731: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15732: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15730
  j L_15730
  #final label in binaryExp
  L_15730: 
  #jumpToAllOnlyIf
  L_15729:
  move $v0, $s1
  beqz $v0, L_15728
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_15736: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15737: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15735
  j L_15735
  #final label in binaryExp
  L_15735: 
  #jumpToAllOnlyIf
  L_15734:
  move $v0, $s1
  beqz $v0, L_15733
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15742: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_15743: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15741
  j L_15741
  #final label in binaryExp
  L_15741: 
  #final label in codeGenAssignmentExpression
  L_15740: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15739: 
  #final label in statem expression
  L_15738: 
  #if finish label = 15733
  L_15733:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15748: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_0_76
  move $s4, $v0
  L_15749: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15747
  j L_15747
  #final label in binaryExp
  L_15747: 
  #final label in codeGenAssignmentExpression
  L_15746: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15745: 
  #final label in statem expression
  L_15744: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_15753: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15754: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15752
  j L_15752
  #final label in binaryExp
  L_15752: 
  #jumpToAllOnlyIf
  L_15751:
  move $v0, $s1
  beqz $v0, L_15750
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15759: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_1_77
  move $s4, $v0
  L_15760: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15758
  j L_15758
  #final label in binaryExp
  L_15758: 
  #final label in codeGenAssignmentExpression
  L_15757: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15756: 
  #final label in statem expression
  L_15755: 
  #if finish label = 15750
  L_15750:
  #if finish label = 15728
  L_15728:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_15764: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15765: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15763
  j L_15763
  #final label in binaryExp
  L_15763: 
  #jumpToAllOnlyIf
  L_15762:
  move $v0, $s1
  beqz $v0, L_15761
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15770: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_15771: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15769
  j L_15769
  #final label in binaryExp
  L_15769: 
  #final label in codeGenAssignmentExpression
  L_15768: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15767: 
  #final label in statem expression
  L_15766: 
  #if finish label = 15761
  L_15761:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_15775: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15776: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15774
  j L_15774
  #final label in binaryExp
  L_15774: 
  #jumpToAllOnlyIf
  L_15773:
  move $v0, $s1
  beqz $v0, L_15772
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15781: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_1_87
  move $s4, $v0
  L_15782: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15780
  j L_15780
  #final label in binaryExp
  L_15780: 
  #final label in codeGenAssignmentExpression
  L_15779: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15778: 
  #final label in statem expression
  L_15777: 
  #if finish label = 15772
  L_15772:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15786: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15787: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15785
  j L_15785
  #final label in binaryExp
  L_15785: 
  #jumpToAllOnlyIf
  L_15784:
  move $v0, $s1
  beqz $v0, L_15783
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_15791: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15792: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15790
  j L_15790
  #final label in binaryExp
  L_15790: 
  #jumpToAllOnlyIf
  L_15789:
  move $v0, $s1
  beqz $v0, L_15788
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15797: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_15798: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15796
  j L_15796
  #final label in binaryExp
  L_15796: 
  #final label in codeGenAssignmentExpression
  L_15795: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15794: 
  #final label in statem expression
  L_15793: 
  #if finish label = 15788
  L_15788:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15803: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_0_96
  move $s4, $v0
  L_15804: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15802
  j L_15802
  #final label in binaryExp
  L_15802: 
  #final label in codeGenAssignmentExpression
  L_15801: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15800: 
  #final label in statem expression
  L_15799: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_15808: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15809: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15807
  j L_15807
  #final label in binaryExp
  L_15807: 
  #jumpToAllOnlyIf
  L_15806:
  move $v0, $s1
  beqz $v0, L_15805
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15814: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_1_97
  move $s4, $v0
  L_15815: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15813
  j L_15813
  #final label in binaryExp
  L_15813: 
  #final label in codeGenAssignmentExpression
  L_15812: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15811: 
  #final label in statem expression
  L_15810: 
  #if finish label = 15805
  L_15805:
  #if finish label = 15783
  L_15783:
  j L_15722
  #inside else
  L_15724:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15820: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_15821: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15819
  j L_15819
  #final label in binaryExp
  L_15819: 
  #jumpToAllOnlyIf
  L_15817:
  move $v0, $s1
  beqz $v0, L_15818
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15825: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15826: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15824
  j L_15824
  #final label in binaryExp
  L_15824: 
  #jumpToAllOnlyIf
  L_15823:
  move $v0, $s1
  beqz $v0, L_15822
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_15830: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15831: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15829
  j L_15829
  #final label in binaryExp
  L_15829: 
  #jumpToAllOnlyIf
  L_15828:
  move $v0, $s1
  beqz $v0, L_15827
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15836: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_0_76
  move $s4, $v0
  L_15837: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15835
  j L_15835
  #final label in binaryExp
  L_15835: 
  #final label in codeGenAssignmentExpression
  L_15834: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15833: 
  #final label in statem expression
  L_15832: 
  #if finish label = 15827
  L_15827:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15842: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_1_77
  move $s4, $v0
  L_15843: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15841
  j L_15841
  #final label in binaryExp
  L_15841: 
  #final label in codeGenAssignmentExpression
  L_15840: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15839: 
  #final label in statem expression
  L_15838: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_15847: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15848: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15846
  j L_15846
  #final label in binaryExp
  L_15846: 
  #jumpToAllOnlyIf
  L_15845:
  move $v0, $s1
  beqz $v0, L_15844
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15853: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_2_78
  move $s4, $v0
  L_15854: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15852
  j L_15852
  #final label in binaryExp
  L_15852: 
  #final label in codeGenAssignmentExpression
  L_15851: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15850: 
  #final label in statem expression
  L_15849: 
  #if finish label = 15844
  L_15844:
  #if finish label = 15822
  L_15822:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_15858: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15859: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15857
  j L_15857
  #final label in binaryExp
  L_15857: 
  #jumpToAllOnlyIf
  L_15856:
  move $v0, $s1
  beqz $v0, L_15855
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15864: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_0_86
  move $s4, $v0
  L_15865: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15863
  j L_15863
  #final label in binaryExp
  L_15863: 
  #final label in codeGenAssignmentExpression
  L_15862: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15861: 
  #final label in statem expression
  L_15860: 
  #if finish label = 15855
  L_15855:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_15869: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15870: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15868
  j L_15868
  #final label in binaryExp
  L_15868: 
  #jumpToAllOnlyIf
  L_15867:
  move $v0, $s1
  beqz $v0, L_15866
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15875: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_2_88
  move $s4, $v0
  L_15876: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15874
  j L_15874
  #final label in binaryExp
  L_15874: 
  #final label in codeGenAssignmentExpression
  L_15873: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15872: 
  #final label in statem expression
  L_15871: 
  #if finish label = 15866
  L_15866:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15880: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15881: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15879
  j L_15879
  #final label in binaryExp
  L_15879: 
  #jumpToAllOnlyIf
  L_15878:
  move $v0, $s1
  beqz $v0, L_15877
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_15885: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15886: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15884
  j L_15884
  #final label in binaryExp
  L_15884: 
  #jumpToAllOnlyIf
  L_15883:
  move $v0, $s1
  beqz $v0, L_15882
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15891: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_0_96
  move $s4, $v0
  L_15892: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15890
  j L_15890
  #final label in binaryExp
  L_15890: 
  #final label in codeGenAssignmentExpression
  L_15889: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15888: 
  #final label in statem expression
  L_15887: 
  #if finish label = 15882
  L_15882:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15897: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_1_97
  move $s4, $v0
  L_15898: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15896
  j L_15896
  #final label in binaryExp
  L_15896: 
  #final label in codeGenAssignmentExpression
  L_15895: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15894: 
  #final label in statem expression
  L_15893: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_15902: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15903: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15901
  j L_15901
  #final label in binaryExp
  L_15901: 
  #jumpToAllOnlyIf
  L_15900:
  move $v0, $s1
  beqz $v0, L_15899
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15908: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_2_98
  move $s4, $v0
  L_15909: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15907
  j L_15907
  #final label in binaryExp
  L_15907: 
  #final label in codeGenAssignmentExpression
  L_15906: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15905: 
  #final label in statem expression
  L_15904: 
  #if finish label = 15899
  L_15899:
  #if finish label = 15877
  L_15877:
  j L_15816
  #inside else
  L_15818:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_15914: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_15915: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15913
  j L_15913
  #final label in binaryExp
  L_15913: 
  #jumpToAllOnlyIf
  L_15911:
  move $v0, $s1
  beqz $v0, L_15912
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15919: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15920: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15918
  j L_15918
  #final label in binaryExp
  L_15918: 
  #jumpToAllOnlyIf
  L_15917:
  move $v0, $s1
  beqz $v0, L_15916
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15924: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15925: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15923
  j L_15923
  #final label in binaryExp
  L_15923: 
  #jumpToAllOnlyIf
  L_15922:
  move $v0, $s1
  beqz $v0, L_15921
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15930: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_1_77
  move $s4, $v0
  L_15931: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15929
  j L_15929
  #final label in binaryExp
  L_15929: 
  #final label in codeGenAssignmentExpression
  L_15928: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15927: 
  #final label in statem expression
  L_15926: 
  #if finish label = 15921
  L_15921:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15936: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_2_78
  move $s4, $v0
  L_15937: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15935
  j L_15935
  #final label in binaryExp
  L_15935: 
  #final label in codeGenAssignmentExpression
  L_15934: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15933: 
  #final label in statem expression
  L_15932: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15941: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15942: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15940
  j L_15940
  #final label in binaryExp
  L_15940: 
  #jumpToAllOnlyIf
  L_15939:
  move $v0, $s1
  beqz $v0, L_15938
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15947: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_3_79
  move $s4, $v0
  L_15948: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15946
  j L_15946
  #final label in binaryExp
  L_15946: 
  #final label in codeGenAssignmentExpression
  L_15945: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15944: 
  #final label in statem expression
  L_15943: 
  #if finish label = 15938
  L_15938:
  #if finish label = 15916
  L_15916:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15952: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15953: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15951
  j L_15951
  #final label in binaryExp
  L_15951: 
  #jumpToAllOnlyIf
  L_15950:
  move $v0, $s1
  beqz $v0, L_15949
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15958: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_1_87
  move $s4, $v0
  L_15959: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15957
  j L_15957
  #final label in binaryExp
  L_15957: 
  #final label in codeGenAssignmentExpression
  L_15956: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15955: 
  #final label in statem expression
  L_15954: 
  #if finish label = 15949
  L_15949:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15963: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15964: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15962
  j L_15962
  #final label in binaryExp
  L_15962: 
  #jumpToAllOnlyIf
  L_15961:
  move $v0, $s1
  beqz $v0, L_15960
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15969: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_3_89
  move $s4, $v0
  L_15970: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15968
  j L_15968
  #final label in binaryExp
  L_15968: 
  #final label in codeGenAssignmentExpression
  L_15967: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15966: 
  #final label in statem expression
  L_15965: 
  #if finish label = 15960
  L_15960:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_15974: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15975: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15973
  j L_15973
  #final label in binaryExp
  L_15973: 
  #jumpToAllOnlyIf
  L_15972:
  move $v0, $s1
  beqz $v0, L_15971
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15979: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_15980: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15978
  j L_15978
  #final label in binaryExp
  L_15978: 
  #jumpToAllOnlyIf
  L_15977:
  move $v0, $s1
  beqz $v0, L_15976
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15985: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_1_97
  move $s4, $v0
  L_15986: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15984
  j L_15984
  #final label in binaryExp
  L_15984: 
  #final label in codeGenAssignmentExpression
  L_15983: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15982: 
  #final label in statem expression
  L_15981: 
  #if finish label = 15976
  L_15976:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_15991: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_2_98
  move $s4, $v0
  L_15992: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_15990
  j L_15990
  #final label in binaryExp
  L_15990: 
  #final label in codeGenAssignmentExpression
  L_15989: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15988: 
  #final label in statem expression
  L_15987: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_15996: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_15997: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_15995
  j L_15995
  #final label in binaryExp
  L_15995: 
  #jumpToAllOnlyIf
  L_15994:
  move $v0, $s1
  beqz $v0, L_15993
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16002: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_3_99
  move $s4, $v0
  L_16003: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16001
  j L_16001
  #final label in binaryExp
  L_16001: 
  #final label in codeGenAssignmentExpression
  L_16000: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_15999: 
  #final label in statem expression
  L_15998: 
  #if finish label = 15993
  L_15993:
  #if finish label = 15971
  L_15971:
  j L_15910
  #inside else
  L_15912:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16008: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_16009: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16007
  j L_16007
  #final label in binaryExp
  L_16007: 
  #jumpToAllOnlyIf
  L_16005:
  move $v0, $s1
  beqz $v0, L_16006
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16013: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16014: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16012
  j L_16012
  #final label in binaryExp
  L_16012: 
  #jumpToAllOnlyIf
  L_16011:
  move $v0, $s1
  beqz $v0, L_16010
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16018: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16019: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16017
  j L_16017
  #final label in binaryExp
  L_16017: 
  #jumpToAllOnlyIf
  L_16016:
  move $v0, $s1
  beqz $v0, L_16015
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16024: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_2_78
  move $s4, $v0
  L_16025: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16023
  j L_16023
  #final label in binaryExp
  L_16023: 
  #final label in codeGenAssignmentExpression
  L_16022: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16021: 
  #final label in statem expression
  L_16020: 
  #if finish label = 16015
  L_16015:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16030: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_3_79
  move $s4, $v0
  L_16031: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16029
  j L_16029
  #final label in binaryExp
  L_16029: 
  #final label in codeGenAssignmentExpression
  L_16028: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16027: 
  #final label in statem expression
  L_16026: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16035: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16036: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16034
  j L_16034
  #final label in binaryExp
  L_16034: 
  #jumpToAllOnlyIf
  L_16033:
  move $v0, $s1
  beqz $v0, L_16032
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16041: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_4_80
  move $s4, $v0
  L_16042: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16040
  j L_16040
  #final label in binaryExp
  L_16040: 
  #final label in codeGenAssignmentExpression
  L_16039: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16038: 
  #final label in statem expression
  L_16037: 
  #if finish label = 16032
  L_16032:
  #if finish label = 16010
  L_16010:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16046: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16047: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16045
  j L_16045
  #final label in binaryExp
  L_16045: 
  #jumpToAllOnlyIf
  L_16044:
  move $v0, $s1
  beqz $v0, L_16043
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16052: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_2_88
  move $s4, $v0
  L_16053: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16051
  j L_16051
  #final label in binaryExp
  L_16051: 
  #final label in codeGenAssignmentExpression
  L_16050: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16049: 
  #final label in statem expression
  L_16048: 
  #if finish label = 16043
  L_16043:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16057: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16058: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16056
  j L_16056
  #final label in binaryExp
  L_16056: 
  #jumpToAllOnlyIf
  L_16055:
  move $v0, $s1
  beqz $v0, L_16054
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16063: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_4_90
  move $s4, $v0
  L_16064: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16062
  j L_16062
  #final label in binaryExp
  L_16062: 
  #final label in codeGenAssignmentExpression
  L_16061: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16060: 
  #final label in statem expression
  L_16059: 
  #if finish label = 16054
  L_16054:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16068: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16069: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16067
  j L_16067
  #final label in binaryExp
  L_16067: 
  #jumpToAllOnlyIf
  L_16066:
  move $v0, $s1
  beqz $v0, L_16065
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16073: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16074: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16072
  j L_16072
  #final label in binaryExp
  L_16072: 
  #jumpToAllOnlyIf
  L_16071:
  move $v0, $s1
  beqz $v0, L_16070
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16079: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_2_98
  move $s4, $v0
  L_16080: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16078
  j L_16078
  #final label in binaryExp
  L_16078: 
  #final label in codeGenAssignmentExpression
  L_16077: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16076: 
  #final label in statem expression
  L_16075: 
  #if finish label = 16070
  L_16070:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16085: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_3_99
  move $s4, $v0
  L_16086: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16084
  j L_16084
  #final label in binaryExp
  L_16084: 
  #final label in codeGenAssignmentExpression
  L_16083: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16082: 
  #final label in statem expression
  L_16081: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16090: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16091: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16089
  j L_16089
  #final label in binaryExp
  L_16089: 
  #jumpToAllOnlyIf
  L_16088:
  move $v0, $s1
  beqz $v0, L_16087
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16096: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_4_100
  move $s4, $v0
  L_16097: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16095
  j L_16095
  #final label in binaryExp
  L_16095: 
  #final label in codeGenAssignmentExpression
  L_16094: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16093: 
  #final label in statem expression
  L_16092: 
  #if finish label = 16087
  L_16087:
  #if finish label = 16065
  L_16065:
  j L_16004
  #inside else
  L_16006:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16102: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_16103: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16101
  j L_16101
  #final label in binaryExp
  L_16101: 
  #jumpToAllOnlyIf
  L_16099:
  move $v0, $s1
  beqz $v0, L_16100
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16107: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16108: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16106
  j L_16106
  #final label in binaryExp
  L_16106: 
  #jumpToAllOnlyIf
  L_16105:
  move $v0, $s1
  beqz $v0, L_16104
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_16112: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16113: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16111
  j L_16111
  #final label in binaryExp
  L_16111: 
  #jumpToAllOnlyIf
  L_16110:
  move $v0, $s1
  beqz $v0, L_16109
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16118: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_3_79
  move $s4, $v0
  L_16119: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16117
  j L_16117
  #final label in binaryExp
  L_16117: 
  #final label in codeGenAssignmentExpression
  L_16116: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16115: 
  #final label in statem expression
  L_16114: 
  #if finish label = 16109
  L_16109:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16124: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_4_80
  move $s4, $v0
  L_16125: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16123
  j L_16123
  #final label in binaryExp
  L_16123: 
  #final label in codeGenAssignmentExpression
  L_16122: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16121: 
  #final label in statem expression
  L_16120: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_16129: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16130: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16128
  j L_16128
  #final label in binaryExp
  L_16128: 
  #jumpToAllOnlyIf
  L_16127:
  move $v0, $s1
  beqz $v0, L_16126
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16135: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_5_81
  move $s4, $v0
  L_16136: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16134
  j L_16134
  #final label in binaryExp
  L_16134: 
  #final label in codeGenAssignmentExpression
  L_16133: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16132: 
  #final label in statem expression
  L_16131: 
  #if finish label = 16126
  L_16126:
  #if finish label = 16104
  L_16104:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_16140: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16141: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16139
  j L_16139
  #final label in binaryExp
  L_16139: 
  #jumpToAllOnlyIf
  L_16138:
  move $v0, $s1
  beqz $v0, L_16137
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16146: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_3_89
  move $s4, $v0
  L_16147: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16145
  j L_16145
  #final label in binaryExp
  L_16145: 
  #final label in codeGenAssignmentExpression
  L_16144: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16143: 
  #final label in statem expression
  L_16142: 
  #if finish label = 16137
  L_16137:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_16151: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16152: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16150
  j L_16150
  #final label in binaryExp
  L_16150: 
  #jumpToAllOnlyIf
  L_16149:
  move $v0, $s1
  beqz $v0, L_16148
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16157: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_5_91
  move $s4, $v0
  L_16158: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16156
  j L_16156
  #final label in binaryExp
  L_16156: 
  #final label in codeGenAssignmentExpression
  L_16155: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16154: 
  #final label in statem expression
  L_16153: 
  #if finish label = 16148
  L_16148:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16162: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16163: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16161
  j L_16161
  #final label in binaryExp
  L_16161: 
  #jumpToAllOnlyIf
  L_16160:
  move $v0, $s1
  beqz $v0, L_16159
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_16167: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16168: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16166
  j L_16166
  #final label in binaryExp
  L_16166: 
  #jumpToAllOnlyIf
  L_16165:
  move $v0, $s1
  beqz $v0, L_16164
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16173: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_3_99
  move $s4, $v0
  L_16174: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16172
  j L_16172
  #final label in binaryExp
  L_16172: 
  #final label in codeGenAssignmentExpression
  L_16171: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16170: 
  #final label in statem expression
  L_16169: 
  #if finish label = 16164
  L_16164:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16179: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_4_100
  move $s4, $v0
  L_16180: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16178
  j L_16178
  #final label in binaryExp
  L_16178: 
  #final label in codeGenAssignmentExpression
  L_16177: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16176: 
  #final label in statem expression
  L_16175: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_16184: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16185: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16183
  j L_16183
  #final label in binaryExp
  L_16183: 
  #jumpToAllOnlyIf
  L_16182:
  move $v0, $s1
  beqz $v0, L_16181
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16190: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_5_101
  move $s4, $v0
  L_16191: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16189
  j L_16189
  #final label in binaryExp
  L_16189: 
  #final label in codeGenAssignmentExpression
  L_16188: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16187: 
  #final label in statem expression
  L_16186: 
  #if finish label = 16181
  L_16181:
  #if finish label = 16159
  L_16159:
  j L_16098
  #inside else
  L_16100:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16196: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_16197: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16195
  j L_16195
  #final label in binaryExp
  L_16195: 
  #jumpToAllOnlyIf
  L_16193:
  move $v0, $s1
  beqz $v0, L_16194
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16201: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16202: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16200
  j L_16200
  #final label in binaryExp
  L_16200: 
  #jumpToAllOnlyIf
  L_16199:
  move $v0, $s1
  beqz $v0, L_16198
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_16206: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16207: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16205
  j L_16205
  #final label in binaryExp
  L_16205: 
  #jumpToAllOnlyIf
  L_16204:
  move $v0, $s1
  beqz $v0, L_16203
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16212: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_4_80
  move $s4, $v0
  L_16213: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16211
  j L_16211
  #final label in binaryExp
  L_16211: 
  #final label in codeGenAssignmentExpression
  L_16210: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16209: 
  #final label in statem expression
  L_16208: 
  #if finish label = 16203
  L_16203:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16218: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_5_81
  move $s4, $v0
  L_16219: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16217
  j L_16217
  #final label in binaryExp
  L_16217: 
  #final label in codeGenAssignmentExpression
  L_16216: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16215: 
  #final label in statem expression
  L_16214: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_16223: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16224: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16222
  j L_16222
  #final label in binaryExp
  L_16222: 
  #jumpToAllOnlyIf
  L_16221:
  move $v0, $s1
  beqz $v0, L_16220
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16229: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_6_82
  move $s4, $v0
  L_16230: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16228
  j L_16228
  #final label in binaryExp
  L_16228: 
  #final label in codeGenAssignmentExpression
  L_16227: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16226: 
  #final label in statem expression
  L_16225: 
  #if finish label = 16220
  L_16220:
  #if finish label = 16198
  L_16198:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_16234: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16235: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16233
  j L_16233
  #final label in binaryExp
  L_16233: 
  #jumpToAllOnlyIf
  L_16232:
  move $v0, $s1
  beqz $v0, L_16231
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16240: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_4_90
  move $s4, $v0
  L_16241: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16239
  j L_16239
  #final label in binaryExp
  L_16239: 
  #final label in codeGenAssignmentExpression
  L_16238: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16237: 
  #final label in statem expression
  L_16236: 
  #if finish label = 16231
  L_16231:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_16245: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16246: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16244
  j L_16244
  #final label in binaryExp
  L_16244: 
  #jumpToAllOnlyIf
  L_16243:
  move $v0, $s1
  beqz $v0, L_16242
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16251: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_6_92
  move $s4, $v0
  L_16252: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16250
  j L_16250
  #final label in binaryExp
  L_16250: 
  #final label in codeGenAssignmentExpression
  L_16249: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16248: 
  #final label in statem expression
  L_16247: 
  #if finish label = 16242
  L_16242:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16256: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16257: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16255
  j L_16255
  #final label in binaryExp
  L_16255: 
  #jumpToAllOnlyIf
  L_16254:
  move $v0, $s1
  beqz $v0, L_16253
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_16261: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16262: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16260
  j L_16260
  #final label in binaryExp
  L_16260: 
  #jumpToAllOnlyIf
  L_16259:
  move $v0, $s1
  beqz $v0, L_16258
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16267: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_4_100
  move $s4, $v0
  L_16268: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16266
  j L_16266
  #final label in binaryExp
  L_16266: 
  #final label in codeGenAssignmentExpression
  L_16265: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16264: 
  #final label in statem expression
  L_16263: 
  #if finish label = 16258
  L_16258:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16273: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_5_101
  move $s4, $v0
  L_16274: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16272
  j L_16272
  #final label in binaryExp
  L_16272: 
  #final label in codeGenAssignmentExpression
  L_16271: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16270: 
  #final label in statem expression
  L_16269: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_16278: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16279: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16277
  j L_16277
  #final label in binaryExp
  L_16277: 
  #jumpToAllOnlyIf
  L_16276:
  move $v0, $s1
  beqz $v0, L_16275
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16284: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_6_102
  move $s4, $v0
  L_16285: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16283
  j L_16283
  #final label in binaryExp
  L_16283: 
  #final label in codeGenAssignmentExpression
  L_16282: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16281: 
  #final label in statem expression
  L_16280: 
  #if finish label = 16275
  L_16275:
  #if finish label = 16253
  L_16253:
  j L_16192
  #inside else
  L_16194:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16290: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_16291: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16289
  j L_16289
  #final label in binaryExp
  L_16289: 
  #jumpToAllOnlyIf
  L_16287:
  move $v0, $s1
  beqz $v0, L_16288
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16295: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16296: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16294
  j L_16294
  #final label in binaryExp
  L_16294: 
  #jumpToAllOnlyIf
  L_16293:
  move $v0, $s1
  beqz $v0, L_16292
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_16300: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16301: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16299
  j L_16299
  #final label in binaryExp
  L_16299: 
  #jumpToAllOnlyIf
  L_16298:
  move $v0, $s1
  beqz $v0, L_16297
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16306: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_5_81
  move $s4, $v0
  L_16307: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16305
  j L_16305
  #final label in binaryExp
  L_16305: 
  #final label in codeGenAssignmentExpression
  L_16304: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16303: 
  #final label in statem expression
  L_16302: 
  #if finish label = 16297
  L_16297:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16312: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_6_82
  move $s4, $v0
  L_16313: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16311
  j L_16311
  #final label in binaryExp
  L_16311: 
  #final label in codeGenAssignmentExpression
  L_16310: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16309: 
  #final label in statem expression
  L_16308: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_16317: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16318: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16316
  j L_16316
  #final label in binaryExp
  L_16316: 
  #jumpToAllOnlyIf
  L_16315:
  move $v0, $s1
  beqz $v0, L_16314
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16323: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_7_83
  move $s4, $v0
  L_16324: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16322
  j L_16322
  #final label in binaryExp
  L_16322: 
  #final label in codeGenAssignmentExpression
  L_16321: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16320: 
  #final label in statem expression
  L_16319: 
  #if finish label = 16314
  L_16314:
  #if finish label = 16292
  L_16292:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_16328: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16329: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16327
  j L_16327
  #final label in binaryExp
  L_16327: 
  #jumpToAllOnlyIf
  L_16326:
  move $v0, $s1
  beqz $v0, L_16325
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16334: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_5_91
  move $s4, $v0
  L_16335: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16333
  j L_16333
  #final label in binaryExp
  L_16333: 
  #final label in codeGenAssignmentExpression
  L_16332: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16331: 
  #final label in statem expression
  L_16330: 
  #if finish label = 16325
  L_16325:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_16339: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16340: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16338
  j L_16338
  #final label in binaryExp
  L_16338: 
  #jumpToAllOnlyIf
  L_16337:
  move $v0, $s1
  beqz $v0, L_16336
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16345: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_7_93
  move $s4, $v0
  L_16346: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16344
  j L_16344
  #final label in binaryExp
  L_16344: 
  #final label in codeGenAssignmentExpression
  L_16343: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16342: 
  #final label in statem expression
  L_16341: 
  #if finish label = 16336
  L_16336:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16350: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16351: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16349
  j L_16349
  #final label in binaryExp
  L_16349: 
  #jumpToAllOnlyIf
  L_16348:
  move $v0, $s1
  beqz $v0, L_16347
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_16355: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16356: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16354
  j L_16354
  #final label in binaryExp
  L_16354: 
  #jumpToAllOnlyIf
  L_16353:
  move $v0, $s1
  beqz $v0, L_16352
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16361: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_5_101
  move $s4, $v0
  L_16362: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16360
  j L_16360
  #final label in binaryExp
  L_16360: 
  #final label in codeGenAssignmentExpression
  L_16359: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16358: 
  #final label in statem expression
  L_16357: 
  #if finish label = 16352
  L_16352:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16367: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_6_102
  move $s4, $v0
  L_16368: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16366
  j L_16366
  #final label in binaryExp
  L_16366: 
  #final label in codeGenAssignmentExpression
  L_16365: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16364: 
  #final label in statem expression
  L_16363: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_16372: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16373: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16371
  j L_16371
  #final label in binaryExp
  L_16371: 
  #jumpToAllOnlyIf
  L_16370:
  move $v0, $s1
  beqz $v0, L_16369
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16378: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_7_103
  move $s4, $v0
  L_16379: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16377
  j L_16377
  #final label in binaryExp
  L_16377: 
  #final label in codeGenAssignmentExpression
  L_16376: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16375: 
  #final label in statem expression
  L_16374: 
  #if finish label = 16369
  L_16369:
  #if finish label = 16347
  L_16347:
  j L_16286
  #inside else
  L_16288:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16384: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_16385: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16383
  j L_16383
  #final label in binaryExp
  L_16383: 
  #jumpToAllOnlyIf
  L_16381:
  move $v0, $s1
  beqz $v0, L_16382
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16389: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16390: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16388
  j L_16388
  #final label in binaryExp
  L_16388: 
  #jumpToAllOnlyIf
  L_16387:
  move $v0, $s1
  beqz $v0, L_16386
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_16394: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16395: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16393
  j L_16393
  #final label in binaryExp
  L_16393: 
  #jumpToAllOnlyIf
  L_16392:
  move $v0, $s1
  beqz $v0, L_16391
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16400: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_6_82
  move $s4, $v0
  L_16401: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16399
  j L_16399
  #final label in binaryExp
  L_16399: 
  #final label in codeGenAssignmentExpression
  L_16398: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16397: 
  #final label in statem expression
  L_16396: 
  #if finish label = 16391
  L_16391:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16406: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_7_83
  move $s4, $v0
  L_16407: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16405
  j L_16405
  #final label in binaryExp
  L_16405: 
  #final label in codeGenAssignmentExpression
  L_16404: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16403: 
  #final label in statem expression
  L_16402: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_16411: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16412: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16410
  j L_16410
  #final label in binaryExp
  L_16410: 
  #jumpToAllOnlyIf
  L_16409:
  move $v0, $s1
  beqz $v0, L_16408
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16417: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_8_84
  move $s4, $v0
  L_16418: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16416
  j L_16416
  #final label in binaryExp
  L_16416: 
  #final label in codeGenAssignmentExpression
  L_16415: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16414: 
  #final label in statem expression
  L_16413: 
  #if finish label = 16408
  L_16408:
  #if finish label = 16386
  L_16386:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_16422: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16423: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16421
  j L_16421
  #final label in binaryExp
  L_16421: 
  #jumpToAllOnlyIf
  L_16420:
  move $v0, $s1
  beqz $v0, L_16419
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16428: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_6_92
  move $s4, $v0
  L_16429: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16427
  j L_16427
  #final label in binaryExp
  L_16427: 
  #final label in codeGenAssignmentExpression
  L_16426: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16425: 
  #final label in statem expression
  L_16424: 
  #if finish label = 16419
  L_16419:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_16433: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16434: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16432
  j L_16432
  #final label in binaryExp
  L_16432: 
  #jumpToAllOnlyIf
  L_16431:
  move $v0, $s1
  beqz $v0, L_16430
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16439: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_8_94
  move $s4, $v0
  L_16440: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16438
  j L_16438
  #final label in binaryExp
  L_16438: 
  #final label in codeGenAssignmentExpression
  L_16437: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16436: 
  #final label in statem expression
  L_16435: 
  #if finish label = 16430
  L_16430:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16444: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16445: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16443
  j L_16443
  #final label in binaryExp
  L_16443: 
  #jumpToAllOnlyIf
  L_16442:
  move $v0, $s1
  beqz $v0, L_16441
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_16449: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16450: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16448
  j L_16448
  #final label in binaryExp
  L_16448: 
  #jumpToAllOnlyIf
  L_16447:
  move $v0, $s1
  beqz $v0, L_16446
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16455: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_6_102
  move $s4, $v0
  L_16456: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16454
  j L_16454
  #final label in binaryExp
  L_16454: 
  #final label in codeGenAssignmentExpression
  L_16453: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16452: 
  #final label in statem expression
  L_16451: 
  #if finish label = 16446
  L_16446:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16461: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_7_103
  move $s4, $v0
  L_16462: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16460
  j L_16460
  #final label in binaryExp
  L_16460: 
  #final label in codeGenAssignmentExpression
  L_16459: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16458: 
  #final label in statem expression
  L_16457: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_16466: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16467: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16465
  j L_16465
  #final label in binaryExp
  L_16465: 
  #jumpToAllOnlyIf
  L_16464:
  move $v0, $s1
  beqz $v0, L_16463
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16472: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_8_104
  move $s4, $v0
  L_16473: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16471
  j L_16471
  #final label in binaryExp
  L_16471: 
  #final label in codeGenAssignmentExpression
  L_16470: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16469: 
  #final label in statem expression
  L_16468: 
  #if finish label = 16463
  L_16463:
  #if finish label = 16441
  L_16441:
  j L_16380
  #inside else
  L_16382:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16478: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_16479: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16477
  j L_16477
  #final label in binaryExp
  L_16477: 
  #jumpToAllOnlyIf
  L_16475:
  move $v0, $s1
  beqz $v0, L_16476
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16483: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16484: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16482
  j L_16482
  #final label in binaryExp
  L_16482: 
  #jumpToAllOnlyIf
  L_16481:
  move $v0, $s1
  beqz $v0, L_16480
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16488: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16489: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16487
  j L_16487
  #final label in binaryExp
  L_16487: 
  #jumpToAllOnlyIf
  L_16486:
  move $v0, $s1
  beqz $v0, L_16485
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16494: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_7_83
  move $s4, $v0
  L_16495: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16493
  j L_16493
  #final label in binaryExp
  L_16493: 
  #final label in codeGenAssignmentExpression
  L_16492: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16491: 
  #final label in statem expression
  L_16490: 
  #if finish label = 16485
  L_16485:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16500: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_8_84
  move $s4, $v0
  L_16501: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16499
  j L_16499
  #final label in binaryExp
  L_16499: 
  #final label in codeGenAssignmentExpression
  L_16498: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16497: 
  #final label in statem expression
  L_16496: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16505: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16506: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16504
  j L_16504
  #final label in binaryExp
  L_16504: 
  #jumpToAllOnlyIf
  L_16503:
  move $v0, $s1
  beqz $v0, L_16502
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16511: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_9_85
  move $s4, $v0
  L_16512: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16510
  j L_16510
  #final label in binaryExp
  L_16510: 
  #final label in codeGenAssignmentExpression
  L_16509: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16508: 
  #final label in statem expression
  L_16507: 
  #if finish label = 16502
  L_16502:
  #if finish label = 16480
  L_16480:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16516: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16517: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16515
  j L_16515
  #final label in binaryExp
  L_16515: 
  #jumpToAllOnlyIf
  L_16514:
  move $v0, $s1
  beqz $v0, L_16513
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16522: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_7_93
  move $s4, $v0
  L_16523: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16521
  j L_16521
  #final label in binaryExp
  L_16521: 
  #final label in codeGenAssignmentExpression
  L_16520: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16519: 
  #final label in statem expression
  L_16518: 
  #if finish label = 16513
  L_16513:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16527: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16528: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16526
  j L_16526
  #final label in binaryExp
  L_16526: 
  #jumpToAllOnlyIf
  L_16525:
  move $v0, $s1
  beqz $v0, L_16524
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16533: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_9_95
  move $s4, $v0
  L_16534: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16532
  j L_16532
  #final label in binaryExp
  L_16532: 
  #final label in codeGenAssignmentExpression
  L_16531: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16530: 
  #final label in statem expression
  L_16529: 
  #if finish label = 16524
  L_16524:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16538: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16539: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16537
  j L_16537
  #final label in binaryExp
  L_16537: 
  #jumpToAllOnlyIf
  L_16536:
  move $v0, $s1
  beqz $v0, L_16535
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16543: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16544: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16542
  j L_16542
  #final label in binaryExp
  L_16542: 
  #jumpToAllOnlyIf
  L_16541:
  move $v0, $s1
  beqz $v0, L_16540
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16549: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_7_103
  move $s4, $v0
  L_16550: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16548
  j L_16548
  #final label in binaryExp
  L_16548: 
  #final label in codeGenAssignmentExpression
  L_16547: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16546: 
  #final label in statem expression
  L_16545: 
  #if finish label = 16540
  L_16540:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16555: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_8_104
  move $s4, $v0
  L_16556: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16554
  j L_16554
  #final label in binaryExp
  L_16554: 
  #final label in codeGenAssignmentExpression
  L_16553: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16552: 
  #final label in statem expression
  L_16551: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16560: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16561: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16559
  j L_16559
  #final label in binaryExp
  L_16559: 
  #jumpToAllOnlyIf
  L_16558:
  move $v0, $s1
  beqz $v0, L_16557
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16566: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_9_105
  move $s4, $v0
  L_16567: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16565
  j L_16565
  #final label in binaryExp
  L_16565: 
  #final label in codeGenAssignmentExpression
  L_16564: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16563: 
  #final label in statem expression
  L_16562: 
  #if finish label = 16557
  L_16557:
  #if finish label = 16535
  L_16535:
  j L_16474
  #inside else
  L_16476:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16571: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16572: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16570
  j L_16570
  #final label in binaryExp
  L_16570: 
  #jumpToAllOnlyIf
  L_16569:
  move $v0, $s1
  beqz $v0, L_16568
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16576: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16577: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16575
  j L_16575
  #final label in binaryExp
  L_16575: 
  #jumpToAllOnlyIf
  L_16574:
  move $v0, $s1
  beqz $v0, L_16573
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16581: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16582: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16580
  j L_16580
  #final label in binaryExp
  L_16580: 
  #jumpToAllOnlyIf
  L_16579:
  move $v0, $s1
  beqz $v0, L_16578
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16587: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_8_84
  move $s4, $v0
  L_16588: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16586
  j L_16586
  #final label in binaryExp
  L_16586: 
  #final label in codeGenAssignmentExpression
  L_16585: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16584: 
  #final label in statem expression
  L_16583: 
  #if finish label = 16578
  L_16578:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16593: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_7_9_85
  move $s4, $v0
  L_16594: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16592
  j L_16592
  #final label in binaryExp
  L_16592: 
  #final label in codeGenAssignmentExpression
  L_16591: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16590: 
  #final label in statem expression
  L_16589: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16598: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16599: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16597
  j L_16597
  #final label in binaryExp
  L_16597: 
  #jumpToAllOnlyIf
  L_16596:
  move $v0, $s1
  beqz $v0, L_16595
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16604: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16605: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16603
  j L_16603
  #final label in binaryExp
  L_16603: 
  #final label in codeGenAssignmentExpression
  L_16602: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16601: 
  #final label in statem expression
  L_16600: 
  #if finish label = 16595
  L_16595:
  #if finish label = 16573
  L_16573:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16609: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16610: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16608
  j L_16608
  #final label in binaryExp
  L_16608: 
  #jumpToAllOnlyIf
  L_16607:
  move $v0, $s1
  beqz $v0, L_16606
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16615: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_8_94
  move $s4, $v0
  L_16616: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16614
  j L_16614
  #final label in binaryExp
  L_16614: 
  #final label in codeGenAssignmentExpression
  L_16613: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16612: 
  #final label in statem expression
  L_16611: 
  #if finish label = 16606
  L_16606:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16620: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16621: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16619
  j L_16619
  #final label in binaryExp
  L_16619: 
  #jumpToAllOnlyIf
  L_16618:
  move $v0, $s1
  beqz $v0, L_16617
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16626: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16627: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16625
  j L_16625
  #final label in binaryExp
  L_16625: 
  #final label in codeGenAssignmentExpression
  L_16624: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16623: 
  #final label in statem expression
  L_16622: 
  #if finish label = 16617
  L_16617:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_16631: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16632: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16630
  j L_16630
  #final label in binaryExp
  L_16630: 
  #jumpToAllOnlyIf
  L_16629:
  move $v0, $s1
  beqz $v0, L_16628
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16636: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16637: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16635
  j L_16635
  #final label in binaryExp
  L_16635: 
  #jumpToAllOnlyIf
  L_16634:
  move $v0, $s1
  beqz $v0, L_16633
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16642: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_8_104
  move $s4, $v0
  L_16643: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16641
  j L_16641
  #final label in binaryExp
  L_16641: 
  #final label in codeGenAssignmentExpression
  L_16640: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16639: 
  #final label in statem expression
  L_16638: 
  #if finish label = 16633
  L_16633:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16648: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_9_105
  move $s4, $v0
  L_16649: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16647
  j L_16647
  #final label in binaryExp
  L_16647: 
  #final label in codeGenAssignmentExpression
  L_16646: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16645: 
  #final label in statem expression
  L_16644: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16653: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16654: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16652
  j L_16652
  #final label in binaryExp
  L_16652: 
  #jumpToAllOnlyIf
  L_16651:
  move $v0, $s1
  beqz $v0, L_16650
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16659: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16660: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16658
  j L_16658
  #final label in binaryExp
  L_16658: 
  #final label in codeGenAssignmentExpression
  L_16657: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16656: 
  #final label in statem expression
  L_16655: 
  #if finish label = 16650
  L_16650:
  #if finish label = 16628
  L_16628:
  #if finish label = 16568
  L_16568:
  #if finish label = 16474
  L_16474:
  #if finish label = 16380
  L_16380:
  #if finish label = 16286
  L_16286:
  #if finish label = 16192
  L_16192:
  #if finish label = 16098
  L_16098:
  #if finish label = 16004
  L_16004:
  #if finish label = 15910
  L_15910:
  #if finish label = 15816
  L_15816:
  #if finish label = 15722
  L_15722:
  j L_15716
  #inside else
  L_15718:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
  L_16664: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16665: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16663
  j L_16663
  #final label in binaryExp
  L_16663: 
  #jumpToAllOnlyIf
  L_16662:
  move $v0, $s1
  beqz $v0, L_16661
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16670: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16671: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16669
  j L_16669
  #final label in binaryExp
  L_16669: 
  #jumpToAllOnlyIf
  L_16667:
  move $v0, $s1
  beqz $v0, L_16668
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16675: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16676: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16674
  j L_16674
  #final label in binaryExp
  L_16674: 
  #jumpToAllOnlyIf
  L_16673:
  move $v0, $s1
  beqz $v0, L_16672
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_16680: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16681: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16679
  j L_16679
  #final label in binaryExp
  L_16679: 
  #jumpToAllOnlyIf
  L_16678:
  move $v0, $s1
  beqz $v0, L_16677
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16686: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16687: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16685
  j L_16685
  #final label in binaryExp
  L_16685: 
  #final label in codeGenAssignmentExpression
  L_16684: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16683: 
  #final label in statem expression
  L_16682: 
  #if finish label = 16677
  L_16677:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16692: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_0_86
  move $s4, $v0
  L_16693: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16691
  j L_16691
  #final label in binaryExp
  L_16691: 
  #final label in codeGenAssignmentExpression
  L_16690: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16689: 
  #final label in statem expression
  L_16688: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_16697: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16698: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16696
  j L_16696
  #final label in binaryExp
  L_16696: 
  #jumpToAllOnlyIf
  L_16695:
  move $v0, $s1
  beqz $v0, L_16694
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16703: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_1_87
  move $s4, $v0
  L_16704: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16702
  j L_16702
  #final label in binaryExp
  L_16702: 
  #final label in codeGenAssignmentExpression
  L_16701: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16700: 
  #final label in statem expression
  L_16699: 
  #if finish label = 16694
  L_16694:
  #if finish label = 16672
  L_16672:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_16708: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16709: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16707
  j L_16707
  #final label in binaryExp
  L_16707: 
  #jumpToAllOnlyIf
  L_16706:
  move $v0, $s1
  beqz $v0, L_16705
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16714: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16715: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16713
  j L_16713
  #final label in binaryExp
  L_16713: 
  #final label in codeGenAssignmentExpression
  L_16712: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16711: 
  #final label in statem expression
  L_16710: 
  #if finish label = 16705
  L_16705:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_16719: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16720: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16718
  j L_16718
  #final label in binaryExp
  L_16718: 
  #jumpToAllOnlyIf
  L_16717:
  move $v0, $s1
  beqz $v0, L_16716
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16725: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_1_97
  move $s4, $v0
  L_16726: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16724
  j L_16724
  #final label in binaryExp
  L_16724: 
  #final label in codeGenAssignmentExpression
  L_16723: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16722: 
  #final label in statem expression
  L_16721: 
  #if finish label = 16716
  L_16716:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16730: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16731: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16729
  j L_16729
  #final label in binaryExp
  L_16729: 
  #jumpToAllOnlyIf
  L_16728:
  move $v0, $s1
  beqz $v0, L_16727
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_16735: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16736: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16734
  j L_16734
  #final label in binaryExp
  L_16734: 
  #jumpToAllOnlyIf
  L_16733:
  move $v0, $s1
  beqz $v0, L_16732
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16741: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16742: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16740
  j L_16740
  #final label in binaryExp
  L_16740: 
  #final label in codeGenAssignmentExpression
  L_16739: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16738: 
  #final label in statem expression
  L_16737: 
  #if finish label = 16732
  L_16732:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16747: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16748: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16746
  j L_16746
  #final label in binaryExp
  L_16746: 
  #final label in codeGenAssignmentExpression
  L_16745: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16744: 
  #final label in statem expression
  L_16743: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 0
  move $s2, $v0
  L_16752: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16753: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16751
  j L_16751
  #final label in binaryExp
  L_16751: 
  #jumpToAllOnlyIf
  L_16750:
  move $v0, $s1
  beqz $v0, L_16749
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16758: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16759: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16757
  j L_16757
  #final label in binaryExp
  L_16757: 
  #final label in codeGenAssignmentExpression
  L_16756: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16755: 
  #final label in statem expression
  L_16754: 
  #if finish label = 16749
  L_16749:
  #if finish label = 16727
  L_16727:
  j L_16666
  #inside else
  L_16668:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16764: 
  #storing literal to v0
  #reg name $s3
  li $v0, 1
  move $s3, $v0
  L_16765: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16763
  j L_16763
  #final label in binaryExp
  L_16763: 
  #jumpToAllOnlyIf
  L_16761:
  move $v0, $s1
  beqz $v0, L_16762
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16769: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16770: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16768
  j L_16768
  #final label in binaryExp
  L_16768: 
  #jumpToAllOnlyIf
  L_16767:
  move $v0, $s1
  beqz $v0, L_16766
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_16774: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16775: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16773
  j L_16773
  #final label in binaryExp
  L_16773: 
  #jumpToAllOnlyIf
  L_16772:
  move $v0, $s1
  beqz $v0, L_16771
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16780: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_0_86
  move $s4, $v0
  L_16781: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16779
  j L_16779
  #final label in binaryExp
  L_16779: 
  #final label in codeGenAssignmentExpression
  L_16778: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16777: 
  #final label in statem expression
  L_16776: 
  #if finish label = 16771
  L_16771:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16786: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_1_87
  move $s4, $v0
  L_16787: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16785
  j L_16785
  #final label in binaryExp
  L_16785: 
  #final label in codeGenAssignmentExpression
  L_16784: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16783: 
  #final label in statem expression
  L_16782: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_16791: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16792: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16790
  j L_16790
  #final label in binaryExp
  L_16790: 
  #jumpToAllOnlyIf
  L_16789:
  move $v0, $s1
  beqz $v0, L_16788
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16797: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_2_88
  move $s4, $v0
  L_16798: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16796
  j L_16796
  #final label in binaryExp
  L_16796: 
  #final label in codeGenAssignmentExpression
  L_16795: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16794: 
  #final label in statem expression
  L_16793: 
  #if finish label = 16788
  L_16788:
  #if finish label = 16766
  L_16766:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_16802: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16803: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16801
  j L_16801
  #final label in binaryExp
  L_16801: 
  #jumpToAllOnlyIf
  L_16800:
  move $v0, $s1
  beqz $v0, L_16799
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16808: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_0_96
  move $s4, $v0
  L_16809: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16807
  j L_16807
  #final label in binaryExp
  L_16807: 
  #final label in codeGenAssignmentExpression
  L_16806: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16805: 
  #final label in statem expression
  L_16804: 
  #if finish label = 16799
  L_16799:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_16813: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16814: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16812
  j L_16812
  #final label in binaryExp
  L_16812: 
  #jumpToAllOnlyIf
  L_16811:
  move $v0, $s1
  beqz $v0, L_16810
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16819: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_2_98
  move $s4, $v0
  L_16820: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16818
  j L_16818
  #final label in binaryExp
  L_16818: 
  #final label in codeGenAssignmentExpression
  L_16817: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16816: 
  #final label in statem expression
  L_16815: 
  #if finish label = 16810
  L_16810:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16824: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16825: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16823
  j L_16823
  #final label in binaryExp
  L_16823: 
  #jumpToAllOnlyIf
  L_16822:
  move $v0, $s1
  beqz $v0, L_16821
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_16829: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16830: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16828
  j L_16828
  #final label in binaryExp
  L_16828: 
  #jumpToAllOnlyIf
  L_16827:
  move $v0, $s1
  beqz $v0, L_16826
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16835: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16836: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16834
  j L_16834
  #final label in binaryExp
  L_16834: 
  #final label in codeGenAssignmentExpression
  L_16833: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16832: 
  #final label in statem expression
  L_16831: 
  #if finish label = 16826
  L_16826:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16841: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16842: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16840
  j L_16840
  #final label in binaryExp
  L_16840: 
  #final label in codeGenAssignmentExpression
  L_16839: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16838: 
  #final label in statem expression
  L_16837: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 1
  move $s2, $v0
  L_16846: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16847: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16845
  j L_16845
  #final label in binaryExp
  L_16845: 
  #jumpToAllOnlyIf
  L_16844:
  move $v0, $s1
  beqz $v0, L_16843
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16852: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16853: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16851
  j L_16851
  #final label in binaryExp
  L_16851: 
  #final label in codeGenAssignmentExpression
  L_16850: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16849: 
  #final label in statem expression
  L_16848: 
  #if finish label = 16843
  L_16843:
  #if finish label = 16821
  L_16821:
  j L_16760
  #inside else
  L_16762:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16858: 
  #storing literal to v0
  #reg name $s3
  li $v0, 2
  move $s3, $v0
  L_16859: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16857
  j L_16857
  #final label in binaryExp
  L_16857: 
  #jumpToAllOnlyIf
  L_16855:
  move $v0, $s1
  beqz $v0, L_16856
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16863: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16864: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16862
  j L_16862
  #final label in binaryExp
  L_16862: 
  #jumpToAllOnlyIf
  L_16861:
  move $v0, $s1
  beqz $v0, L_16860
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_16868: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16869: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16867
  j L_16867
  #final label in binaryExp
  L_16867: 
  #jumpToAllOnlyIf
  L_16866:
  move $v0, $s1
  beqz $v0, L_16865
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16874: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_1_87
  move $s4, $v0
  L_16875: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16873
  j L_16873
  #final label in binaryExp
  L_16873: 
  #final label in codeGenAssignmentExpression
  L_16872: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16871: 
  #final label in statem expression
  L_16870: 
  #if finish label = 16865
  L_16865:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16880: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_2_88
  move $s4, $v0
  L_16881: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16879
  j L_16879
  #final label in binaryExp
  L_16879: 
  #final label in codeGenAssignmentExpression
  L_16878: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16877: 
  #final label in statem expression
  L_16876: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_16885: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16886: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16884
  j L_16884
  #final label in binaryExp
  L_16884: 
  #jumpToAllOnlyIf
  L_16883:
  move $v0, $s1
  beqz $v0, L_16882
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16891: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_3_89
  move $s4, $v0
  L_16892: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16890
  j L_16890
  #final label in binaryExp
  L_16890: 
  #final label in codeGenAssignmentExpression
  L_16889: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16888: 
  #final label in statem expression
  L_16887: 
  #if finish label = 16882
  L_16882:
  #if finish label = 16860
  L_16860:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_16896: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16897: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16895
  j L_16895
  #final label in binaryExp
  L_16895: 
  #jumpToAllOnlyIf
  L_16894:
  move $v0, $s1
  beqz $v0, L_16893
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16902: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_1_97
  move $s4, $v0
  L_16903: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16901
  j L_16901
  #final label in binaryExp
  L_16901: 
  #final label in codeGenAssignmentExpression
  L_16900: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16899: 
  #final label in statem expression
  L_16898: 
  #if finish label = 16893
  L_16893:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_16907: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16908: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16906
  j L_16906
  #final label in binaryExp
  L_16906: 
  #jumpToAllOnlyIf
  L_16905:
  move $v0, $s1
  beqz $v0, L_16904
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16913: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_3_99
  move $s4, $v0
  L_16914: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16912
  j L_16912
  #final label in binaryExp
  L_16912: 
  #final label in codeGenAssignmentExpression
  L_16911: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16910: 
  #final label in statem expression
  L_16909: 
  #if finish label = 16904
  L_16904:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16918: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16919: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16917
  j L_16917
  #final label in binaryExp
  L_16917: 
  #jumpToAllOnlyIf
  L_16916:
  move $v0, $s1
  beqz $v0, L_16915
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_16923: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16924: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16922
  j L_16922
  #final label in binaryExp
  L_16922: 
  #jumpToAllOnlyIf
  L_16921:
  move $v0, $s1
  beqz $v0, L_16920
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16929: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16930: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16928
  j L_16928
  #final label in binaryExp
  L_16928: 
  #final label in codeGenAssignmentExpression
  L_16927: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16926: 
  #final label in statem expression
  L_16925: 
  #if finish label = 16920
  L_16920:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16935: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16936: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16934
  j L_16934
  #final label in binaryExp
  L_16934: 
  #final label in codeGenAssignmentExpression
  L_16933: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16932: 
  #final label in statem expression
  L_16931: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 2
  move $s2, $v0
  L_16940: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16941: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16939
  j L_16939
  #final label in binaryExp
  L_16939: 
  #jumpToAllOnlyIf
  L_16938:
  move $v0, $s1
  beqz $v0, L_16937
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16946: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_16947: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16945
  j L_16945
  #final label in binaryExp
  L_16945: 
  #final label in codeGenAssignmentExpression
  L_16944: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16943: 
  #final label in statem expression
  L_16942: 
  #if finish label = 16937
  L_16937:
  #if finish label = 16915
  L_16915:
  j L_16854
  #inside else
  L_16856:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_16952: 
  #storing literal to v0
  #reg name $s3
  li $v0, 3
  move $s3, $v0
  L_16953: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16951
  j L_16951
  #final label in binaryExp
  L_16951: 
  #jumpToAllOnlyIf
  L_16949:
  move $v0, $s1
  beqz $v0, L_16950
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_16957: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16958: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16956
  j L_16956
  #final label in binaryExp
  L_16956: 
  #jumpToAllOnlyIf
  L_16955:
  move $v0, $s1
  beqz $v0, L_16954
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16962: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16963: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16961
  j L_16961
  #final label in binaryExp
  L_16961: 
  #jumpToAllOnlyIf
  L_16960:
  move $v0, $s1
  beqz $v0, L_16959
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16968: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_2_88
  move $s4, $v0
  L_16969: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16967
  j L_16967
  #final label in binaryExp
  L_16967: 
  #final label in codeGenAssignmentExpression
  L_16966: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16965: 
  #final label in statem expression
  L_16964: 
  #if finish label = 16959
  L_16959:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16974: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_3_89
  move $s4, $v0
  L_16975: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16973
  j L_16973
  #final label in binaryExp
  L_16973: 
  #final label in codeGenAssignmentExpression
  L_16972: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16971: 
  #final label in statem expression
  L_16970: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16979: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_16980: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16978
  j L_16978
  #final label in binaryExp
  L_16978: 
  #jumpToAllOnlyIf
  L_16977:
  move $v0, $s1
  beqz $v0, L_16976
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16985: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_4_90
  move $s4, $v0
  L_16986: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16984
  j L_16984
  #final label in binaryExp
  L_16984: 
  #final label in codeGenAssignmentExpression
  L_16983: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16982: 
  #final label in statem expression
  L_16981: 
  #if finish label = 16976
  L_16976:
  #if finish label = 16954
  L_16954:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_16990: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_16991: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_16989
  j L_16989
  #final label in binaryExp
  L_16989: 
  #jumpToAllOnlyIf
  L_16988:
  move $v0, $s1
  beqz $v0, L_16987
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_16996: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_2_98
  move $s4, $v0
  L_16997: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_16995
  j L_16995
  #final label in binaryExp
  L_16995: 
  #final label in codeGenAssignmentExpression
  L_16994: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_16993: 
  #final label in statem expression
  L_16992: 
  #if finish label = 16987
  L_16987:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_17001: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17002: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17000
  j L_17000
  #final label in binaryExp
  L_17000: 
  #jumpToAllOnlyIf
  L_16999:
  move $v0, $s1
  beqz $v0, L_16998
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17007: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_4_100
  move $s4, $v0
  L_17008: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17006
  j L_17006
  #final label in binaryExp
  L_17006: 
  #final label in codeGenAssignmentExpression
  L_17005: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17004: 
  #final label in statem expression
  L_17003: 
  #if finish label = 16998
  L_16998:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17012: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17013: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17011
  j L_17011
  #final label in binaryExp
  L_17011: 
  #jumpToAllOnlyIf
  L_17010:
  move $v0, $s1
  beqz $v0, L_17009
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_17017: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17018: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17016
  j L_17016
  #final label in binaryExp
  L_17016: 
  #jumpToAllOnlyIf
  L_17015:
  move $v0, $s1
  beqz $v0, L_17014
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17023: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17024: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17022
  j L_17022
  #final label in binaryExp
  L_17022: 
  #final label in codeGenAssignmentExpression
  L_17021: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17020: 
  #final label in statem expression
  L_17019: 
  #if finish label = 17014
  L_17014:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17029: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17030: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17028
  j L_17028
  #final label in binaryExp
  L_17028: 
  #final label in codeGenAssignmentExpression
  L_17027: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17026: 
  #final label in statem expression
  L_17025: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 3
  move $s2, $v0
  L_17034: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17035: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17033
  j L_17033
  #final label in binaryExp
  L_17033: 
  #jumpToAllOnlyIf
  L_17032:
  move $v0, $s1
  beqz $v0, L_17031
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17040: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17041: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17039
  j L_17039
  #final label in binaryExp
  L_17039: 
  #final label in codeGenAssignmentExpression
  L_17038: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17037: 
  #final label in statem expression
  L_17036: 
  #if finish label = 17031
  L_17031:
  #if finish label = 17009
  L_17009:
  j L_16948
  #inside else
  L_16950:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_17046: 
  #storing literal to v0
  #reg name $s3
  li $v0, 4
  move $s3, $v0
  L_17047: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17045
  j L_17045
  #final label in binaryExp
  L_17045: 
  #jumpToAllOnlyIf
  L_17043:
  move $v0, $s1
  beqz $v0, L_17044
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17051: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17052: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17050
  j L_17050
  #final label in binaryExp
  L_17050: 
  #jumpToAllOnlyIf
  L_17049:
  move $v0, $s1
  beqz $v0, L_17048
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_17056: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17057: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17055
  j L_17055
  #final label in binaryExp
  L_17055: 
  #jumpToAllOnlyIf
  L_17054:
  move $v0, $s1
  beqz $v0, L_17053
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17062: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_3_89
  move $s4, $v0
  L_17063: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17061
  j L_17061
  #final label in binaryExp
  L_17061: 
  #final label in codeGenAssignmentExpression
  L_17060: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17059: 
  #final label in statem expression
  L_17058: 
  #if finish label = 17053
  L_17053:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17068: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_4_90
  move $s4, $v0
  L_17069: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17067
  j L_17067
  #final label in binaryExp
  L_17067: 
  #final label in codeGenAssignmentExpression
  L_17066: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17065: 
  #final label in statem expression
  L_17064: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_17073: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17074: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17072
  j L_17072
  #final label in binaryExp
  L_17072: 
  #jumpToAllOnlyIf
  L_17071:
  move $v0, $s1
  beqz $v0, L_17070
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17079: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_5_91
  move $s4, $v0
  L_17080: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17078
  j L_17078
  #final label in binaryExp
  L_17078: 
  #final label in codeGenAssignmentExpression
  L_17077: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17076: 
  #final label in statem expression
  L_17075: 
  #if finish label = 17070
  L_17070:
  #if finish label = 17048
  L_17048:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_17084: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17085: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17083
  j L_17083
  #final label in binaryExp
  L_17083: 
  #jumpToAllOnlyIf
  L_17082:
  move $v0, $s1
  beqz $v0, L_17081
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17090: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_3_99
  move $s4, $v0
  L_17091: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17089
  j L_17089
  #final label in binaryExp
  L_17089: 
  #final label in codeGenAssignmentExpression
  L_17088: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17087: 
  #final label in statem expression
  L_17086: 
  #if finish label = 17081
  L_17081:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_17095: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17096: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17094
  j L_17094
  #final label in binaryExp
  L_17094: 
  #jumpToAllOnlyIf
  L_17093:
  move $v0, $s1
  beqz $v0, L_17092
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17101: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_5_101
  move $s4, $v0
  L_17102: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17100
  j L_17100
  #final label in binaryExp
  L_17100: 
  #final label in codeGenAssignmentExpression
  L_17099: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17098: 
  #final label in statem expression
  L_17097: 
  #if finish label = 17092
  L_17092:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17106: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17107: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17105
  j L_17105
  #final label in binaryExp
  L_17105: 
  #jumpToAllOnlyIf
  L_17104:
  move $v0, $s1
  beqz $v0, L_17103
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_17111: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17112: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17110
  j L_17110
  #final label in binaryExp
  L_17110: 
  #jumpToAllOnlyIf
  L_17109:
  move $v0, $s1
  beqz $v0, L_17108
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17117: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17118: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17116
  j L_17116
  #final label in binaryExp
  L_17116: 
  #final label in codeGenAssignmentExpression
  L_17115: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17114: 
  #final label in statem expression
  L_17113: 
  #if finish label = 17108
  L_17108:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17123: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17124: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17122
  j L_17122
  #final label in binaryExp
  L_17122: 
  #final label in codeGenAssignmentExpression
  L_17121: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17120: 
  #final label in statem expression
  L_17119: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 4
  move $s2, $v0
  L_17128: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17129: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17127
  j L_17127
  #final label in binaryExp
  L_17127: 
  #jumpToAllOnlyIf
  L_17126:
  move $v0, $s1
  beqz $v0, L_17125
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17134: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17135: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17133
  j L_17133
  #final label in binaryExp
  L_17133: 
  #final label in codeGenAssignmentExpression
  L_17132: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17131: 
  #final label in statem expression
  L_17130: 
  #if finish label = 17125
  L_17125:
  #if finish label = 17103
  L_17103:
  j L_17042
  #inside else
  L_17044:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_17140: 
  #storing literal to v0
  #reg name $s3
  li $v0, 5
  move $s3, $v0
  L_17141: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17139
  j L_17139
  #final label in binaryExp
  L_17139: 
  #jumpToAllOnlyIf
  L_17137:
  move $v0, $s1
  beqz $v0, L_17138
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17145: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17146: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17144
  j L_17144
  #final label in binaryExp
  L_17144: 
  #jumpToAllOnlyIf
  L_17143:
  move $v0, $s1
  beqz $v0, L_17142
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_17150: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17151: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17149
  j L_17149
  #final label in binaryExp
  L_17149: 
  #jumpToAllOnlyIf
  L_17148:
  move $v0, $s1
  beqz $v0, L_17147
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17156: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_4_90
  move $s4, $v0
  L_17157: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17155
  j L_17155
  #final label in binaryExp
  L_17155: 
  #final label in codeGenAssignmentExpression
  L_17154: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17153: 
  #final label in statem expression
  L_17152: 
  #if finish label = 17147
  L_17147:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17162: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_5_91
  move $s4, $v0
  L_17163: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17161
  j L_17161
  #final label in binaryExp
  L_17161: 
  #final label in codeGenAssignmentExpression
  L_17160: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17159: 
  #final label in statem expression
  L_17158: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_17167: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17168: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17166
  j L_17166
  #final label in binaryExp
  L_17166: 
  #jumpToAllOnlyIf
  L_17165:
  move $v0, $s1
  beqz $v0, L_17164
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17173: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_6_92
  move $s4, $v0
  L_17174: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17172
  j L_17172
  #final label in binaryExp
  L_17172: 
  #final label in codeGenAssignmentExpression
  L_17171: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17170: 
  #final label in statem expression
  L_17169: 
  #if finish label = 17164
  L_17164:
  #if finish label = 17142
  L_17142:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_17178: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17179: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17177
  j L_17177
  #final label in binaryExp
  L_17177: 
  #jumpToAllOnlyIf
  L_17176:
  move $v0, $s1
  beqz $v0, L_17175
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17184: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_4_100
  move $s4, $v0
  L_17185: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17183
  j L_17183
  #final label in binaryExp
  L_17183: 
  #final label in codeGenAssignmentExpression
  L_17182: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17181: 
  #final label in statem expression
  L_17180: 
  #if finish label = 17175
  L_17175:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_17189: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17190: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17188
  j L_17188
  #final label in binaryExp
  L_17188: 
  #jumpToAllOnlyIf
  L_17187:
  move $v0, $s1
  beqz $v0, L_17186
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17195: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_6_102
  move $s4, $v0
  L_17196: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17194
  j L_17194
  #final label in binaryExp
  L_17194: 
  #final label in codeGenAssignmentExpression
  L_17193: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17192: 
  #final label in statem expression
  L_17191: 
  #if finish label = 17186
  L_17186:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17200: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17201: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17199
  j L_17199
  #final label in binaryExp
  L_17199: 
  #jumpToAllOnlyIf
  L_17198:
  move $v0, $s1
  beqz $v0, L_17197
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_17205: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17206: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17204
  j L_17204
  #final label in binaryExp
  L_17204: 
  #jumpToAllOnlyIf
  L_17203:
  move $v0, $s1
  beqz $v0, L_17202
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17211: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17212: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17210
  j L_17210
  #final label in binaryExp
  L_17210: 
  #final label in codeGenAssignmentExpression
  L_17209: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17208: 
  #final label in statem expression
  L_17207: 
  #if finish label = 17202
  L_17202:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17217: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17218: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17216
  j L_17216
  #final label in binaryExp
  L_17216: 
  #final label in codeGenAssignmentExpression
  L_17215: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17214: 
  #final label in statem expression
  L_17213: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 5
  move $s2, $v0
  L_17222: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17223: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17221
  j L_17221
  #final label in binaryExp
  L_17221: 
  #jumpToAllOnlyIf
  L_17220:
  move $v0, $s1
  beqz $v0, L_17219
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17228: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17229: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17227
  j L_17227
  #final label in binaryExp
  L_17227: 
  #final label in codeGenAssignmentExpression
  L_17226: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17225: 
  #final label in statem expression
  L_17224: 
  #if finish label = 17219
  L_17219:
  #if finish label = 17197
  L_17197:
  j L_17136
  #inside else
  L_17138:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_17234: 
  #storing literal to v0
  #reg name $s3
  li $v0, 6
  move $s3, $v0
  L_17235: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17233
  j L_17233
  #final label in binaryExp
  L_17233: 
  #jumpToAllOnlyIf
  L_17231:
  move $v0, $s1
  beqz $v0, L_17232
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17239: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17240: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17238
  j L_17238
  #final label in binaryExp
  L_17238: 
  #jumpToAllOnlyIf
  L_17237:
  move $v0, $s1
  beqz $v0, L_17236
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_17244: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17245: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17243
  j L_17243
  #final label in binaryExp
  L_17243: 
  #jumpToAllOnlyIf
  L_17242:
  move $v0, $s1
  beqz $v0, L_17241
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17250: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_5_91
  move $s4, $v0
  L_17251: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17249
  j L_17249
  #final label in binaryExp
  L_17249: 
  #final label in codeGenAssignmentExpression
  L_17248: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17247: 
  #final label in statem expression
  L_17246: 
  #if finish label = 17241
  L_17241:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17256: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_6_92
  move $s4, $v0
  L_17257: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17255
  j L_17255
  #final label in binaryExp
  L_17255: 
  #final label in codeGenAssignmentExpression
  L_17254: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17253: 
  #final label in statem expression
  L_17252: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_17261: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17262: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17260
  j L_17260
  #final label in binaryExp
  L_17260: 
  #jumpToAllOnlyIf
  L_17259:
  move $v0, $s1
  beqz $v0, L_17258
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17267: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_7_93
  move $s4, $v0
  L_17268: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17266
  j L_17266
  #final label in binaryExp
  L_17266: 
  #final label in codeGenAssignmentExpression
  L_17265: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17264: 
  #final label in statem expression
  L_17263: 
  #if finish label = 17258
  L_17258:
  #if finish label = 17236
  L_17236:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_17272: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17273: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17271
  j L_17271
  #final label in binaryExp
  L_17271: 
  #jumpToAllOnlyIf
  L_17270:
  move $v0, $s1
  beqz $v0, L_17269
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17278: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_5_101
  move $s4, $v0
  L_17279: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17277
  j L_17277
  #final label in binaryExp
  L_17277: 
  #final label in codeGenAssignmentExpression
  L_17276: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17275: 
  #final label in statem expression
  L_17274: 
  #if finish label = 17269
  L_17269:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_17283: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17284: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17282
  j L_17282
  #final label in binaryExp
  L_17282: 
  #jumpToAllOnlyIf
  L_17281:
  move $v0, $s1
  beqz $v0, L_17280
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17289: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_7_103
  move $s4, $v0
  L_17290: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17288
  j L_17288
  #final label in binaryExp
  L_17288: 
  #final label in codeGenAssignmentExpression
  L_17287: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17286: 
  #final label in statem expression
  L_17285: 
  #if finish label = 17280
  L_17280:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17294: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17295: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17293
  j L_17293
  #final label in binaryExp
  L_17293: 
  #jumpToAllOnlyIf
  L_17292:
  move $v0, $s1
  beqz $v0, L_17291
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_17299: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17300: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17298
  j L_17298
  #final label in binaryExp
  L_17298: 
  #jumpToAllOnlyIf
  L_17297:
  move $v0, $s1
  beqz $v0, L_17296
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17305: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17306: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17304
  j L_17304
  #final label in binaryExp
  L_17304: 
  #final label in codeGenAssignmentExpression
  L_17303: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17302: 
  #final label in statem expression
  L_17301: 
  #if finish label = 17296
  L_17296:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17311: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17312: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17310
  j L_17310
  #final label in binaryExp
  L_17310: 
  #final label in codeGenAssignmentExpression
  L_17309: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17308: 
  #final label in statem expression
  L_17307: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 6
  move $s2, $v0
  L_17316: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17317: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17315
  j L_17315
  #final label in binaryExp
  L_17315: 
  #jumpToAllOnlyIf
  L_17314:
  move $v0, $s1
  beqz $v0, L_17313
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17322: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17323: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17321
  j L_17321
  #final label in binaryExp
  L_17321: 
  #final label in codeGenAssignmentExpression
  L_17320: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17319: 
  #final label in statem expression
  L_17318: 
  #if finish label = 17313
  L_17313:
  #if finish label = 17291
  L_17291:
  j L_17230
  #inside else
  L_17232:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_17328: 
  #storing literal to v0
  #reg name $s3
  li $v0, 7
  move $s3, $v0
  L_17329: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17327
  j L_17327
  #final label in binaryExp
  L_17327: 
  #jumpToAllOnlyIf
  L_17325:
  move $v0, $s1
  beqz $v0, L_17326
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17333: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17334: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17332
  j L_17332
  #final label in binaryExp
  L_17332: 
  #jumpToAllOnlyIf
  L_17331:
  move $v0, $s1
  beqz $v0, L_17330
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_17338: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17339: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17337
  j L_17337
  #final label in binaryExp
  L_17337: 
  #jumpToAllOnlyIf
  L_17336:
  move $v0, $s1
  beqz $v0, L_17335
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17344: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_6_92
  move $s4, $v0
  L_17345: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17343
  j L_17343
  #final label in binaryExp
  L_17343: 
  #final label in codeGenAssignmentExpression
  L_17342: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17341: 
  #final label in statem expression
  L_17340: 
  #if finish label = 17335
  L_17335:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17350: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_7_93
  move $s4, $v0
  L_17351: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17349
  j L_17349
  #final label in binaryExp
  L_17349: 
  #final label in codeGenAssignmentExpression
  L_17348: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17347: 
  #final label in statem expression
  L_17346: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_17355: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17356: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17354
  j L_17354
  #final label in binaryExp
  L_17354: 
  #jumpToAllOnlyIf
  L_17353:
  move $v0, $s1
  beqz $v0, L_17352
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17361: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_8_94
  move $s4, $v0
  L_17362: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17360
  j L_17360
  #final label in binaryExp
  L_17360: 
  #final label in codeGenAssignmentExpression
  L_17359: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17358: 
  #final label in statem expression
  L_17357: 
  #if finish label = 17352
  L_17352:
  #if finish label = 17330
  L_17330:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_17366: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17367: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17365
  j L_17365
  #final label in binaryExp
  L_17365: 
  #jumpToAllOnlyIf
  L_17364:
  move $v0, $s1
  beqz $v0, L_17363
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17372: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_6_102
  move $s4, $v0
  L_17373: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17371
  j L_17371
  #final label in binaryExp
  L_17371: 
  #final label in codeGenAssignmentExpression
  L_17370: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17369: 
  #final label in statem expression
  L_17368: 
  #if finish label = 17363
  L_17363:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_17377: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17378: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17376
  j L_17376
  #final label in binaryExp
  L_17376: 
  #jumpToAllOnlyIf
  L_17375:
  move $v0, $s1
  beqz $v0, L_17374
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17383: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_8_104
  move $s4, $v0
  L_17384: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17382
  j L_17382
  #final label in binaryExp
  L_17382: 
  #final label in codeGenAssignmentExpression
  L_17381: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17380: 
  #final label in statem expression
  L_17379: 
  #if finish label = 17374
  L_17374:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17388: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17389: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17387
  j L_17387
  #final label in binaryExp
  L_17387: 
  #jumpToAllOnlyIf
  L_17386:
  move $v0, $s1
  beqz $v0, L_17385
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_17393: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17394: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17392
  j L_17392
  #final label in binaryExp
  L_17392: 
  #jumpToAllOnlyIf
  L_17391:
  move $v0, $s1
  beqz $v0, L_17390
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17399: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17400: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17398
  j L_17398
  #final label in binaryExp
  L_17398: 
  #final label in codeGenAssignmentExpression
  L_17397: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17396: 
  #final label in statem expression
  L_17395: 
  #if finish label = 17390
  L_17390:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17405: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17406: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17404
  j L_17404
  #final label in binaryExp
  L_17404: 
  #final label in codeGenAssignmentExpression
  L_17403: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17402: 
  #final label in statem expression
  L_17401: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 7
  move $s2, $v0
  L_17410: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17411: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17409
  j L_17409
  #final label in binaryExp
  L_17409: 
  #jumpToAllOnlyIf
  L_17408:
  move $v0, $s1
  beqz $v0, L_17407
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17416: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17417: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17415
  j L_17415
  #final label in binaryExp
  L_17415: 
  #final label in codeGenAssignmentExpression
  L_17414: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17413: 
  #final label in statem expression
  L_17412: 
  #if finish label = 17407
  L_17407:
  #if finish label = 17385
  L_17385:
  j L_17324
  #inside else
  L_17326:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_17422: 
  #storing literal to v0
  #reg name $s3
  li $v0, 8
  move $s3, $v0
  L_17423: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17421
  j L_17421
  #final label in binaryExp
  L_17421: 
  #jumpToAllOnlyIf
  L_17419:
  move $v0, $s1
  beqz $v0, L_17420
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17427: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17428: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17426
  j L_17426
  #final label in binaryExp
  L_17426: 
  #jumpToAllOnlyIf
  L_17425:
  move $v0, $s1
  beqz $v0, L_17424
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_17432: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17433: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17431
  j L_17431
  #final label in binaryExp
  L_17431: 
  #jumpToAllOnlyIf
  L_17430:
  move $v0, $s1
  beqz $v0, L_17429
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17438: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_7_93
  move $s4, $v0
  L_17439: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17437
  j L_17437
  #final label in binaryExp
  L_17437: 
  #final label in codeGenAssignmentExpression
  L_17436: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17435: 
  #final label in statem expression
  L_17434: 
  #if finish label = 17429
  L_17429:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17444: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_8_94
  move $s4, $v0
  L_17445: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17443
  j L_17443
  #final label in binaryExp
  L_17443: 
  #final label in codeGenAssignmentExpression
  L_17442: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17441: 
  #final label in statem expression
  L_17440: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_17449: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17450: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17448
  j L_17448
  #final label in binaryExp
  L_17448: 
  #jumpToAllOnlyIf
  L_17447:
  move $v0, $s1
  beqz $v0, L_17446
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17455: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_9_95
  move $s4, $v0
  L_17456: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17454
  j L_17454
  #final label in binaryExp
  L_17454: 
  #final label in codeGenAssignmentExpression
  L_17453: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17452: 
  #final label in statem expression
  L_17451: 
  #if finish label = 17446
  L_17446:
  #if finish label = 17424
  L_17424:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_17460: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17461: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17459
  j L_17459
  #final label in binaryExp
  L_17459: 
  #jumpToAllOnlyIf
  L_17458:
  move $v0, $s1
  beqz $v0, L_17457
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17466: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_7_103
  move $s4, $v0
  L_17467: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17465
  j L_17465
  #final label in binaryExp
  L_17465: 
  #final label in codeGenAssignmentExpression
  L_17464: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17463: 
  #final label in statem expression
  L_17462: 
  #if finish label = 17457
  L_17457:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_17471: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17472: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17470
  j L_17470
  #final label in binaryExp
  L_17470: 
  #jumpToAllOnlyIf
  L_17469:
  move $v0, $s1
  beqz $v0, L_17468
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17477: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_9_105
  move $s4, $v0
  L_17478: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17476
  j L_17476
  #final label in binaryExp
  L_17476: 
  #final label in codeGenAssignmentExpression
  L_17475: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17474: 
  #final label in statem expression
  L_17473: 
  #if finish label = 17468
  L_17468:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17482: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17483: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17481
  j L_17481
  #final label in binaryExp
  L_17481: 
  #jumpToAllOnlyIf
  L_17480:
  move $v0, $s1
  beqz $v0, L_17479
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_17487: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17488: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17486
  j L_17486
  #final label in binaryExp
  L_17486: 
  #jumpToAllOnlyIf
  L_17485:
  move $v0, $s1
  beqz $v0, L_17484
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17493: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17494: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17492
  j L_17492
  #final label in binaryExp
  L_17492: 
  #final label in codeGenAssignmentExpression
  L_17491: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17490: 
  #final label in statem expression
  L_17489: 
  #if finish label = 17484
  L_17484:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17499: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17500: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17498
  j L_17498
  #final label in binaryExp
  L_17498: 
  #final label in codeGenAssignmentExpression
  L_17497: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17496: 
  #final label in statem expression
  L_17495: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 8
  move $s2, $v0
  L_17504: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17505: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17503
  j L_17503
  #final label in binaryExp
  L_17503: 
  #jumpToAllOnlyIf
  L_17502:
  move $v0, $s1
  beqz $v0, L_17501
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17510: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17511: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17509
  j L_17509
  #final label in binaryExp
  L_17509: 
  #final label in codeGenAssignmentExpression
  L_17508: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17507: 
  #final label in statem expression
  L_17506: 
  #if finish label = 17501
  L_17501:
  #if finish label = 17479
  L_17479:
  j L_17418
  #inside else
  L_17420:
  #starting if
  #reg name $s1
  #storing identifier to v0
  #reg name $s2
  move $v0, $a1
  move $s2, $v0
  L_17515: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17516: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  seq $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17514
  j L_17514
  #final label in binaryExp
  L_17514: 
  #jumpToAllOnlyIf
  L_17513:
  move $v0, $s1
  beqz $v0, L_17512
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17520: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17521: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17519
  j L_17519
  #final label in binaryExp
  L_17519: 
  #jumpToAllOnlyIf
  L_17518:
  move $v0, $s1
  beqz $v0, L_17517
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17525: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17526: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17524
  j L_17524
  #final label in binaryExp
  L_17524: 
  #jumpToAllOnlyIf
  L_17523:
  move $v0, $s1
  beqz $v0, L_17522
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17531: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_8_94
  move $s4, $v0
  L_17532: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17530
  j L_17530
  #final label in binaryExp
  L_17530: 
  #final label in codeGenAssignmentExpression
  L_17529: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17528: 
  #final label in statem expression
  L_17527: 
  #if finish label = 17522
  L_17522:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17537: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_8_9_95
  move $s4, $v0
  L_17538: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17536
  j L_17536
  #final label in binaryExp
  L_17536: 
  #final label in codeGenAssignmentExpression
  L_17535: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17534: 
  #final label in statem expression
  L_17533: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17542: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17543: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17541
  j L_17541
  #final label in binaryExp
  L_17541: 
  #jumpToAllOnlyIf
  L_17540:
  move $v0, $s1
  beqz $v0, L_17539
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17548: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17549: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17547
  j L_17547
  #final label in binaryExp
  L_17547: 
  #final label in codeGenAssignmentExpression
  L_17546: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17545: 
  #final label in statem expression
  L_17544: 
  #if finish label = 17539
  L_17539:
  #if finish label = 17517
  L_17517:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17553: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17554: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17552
  j L_17552
  #final label in binaryExp
  L_17552: 
  #jumpToAllOnlyIf
  L_17551:
  move $v0, $s1
  beqz $v0, L_17550
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17559: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, A_9_8_104
  move $s4, $v0
  L_17560: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17558
  j L_17558
  #final label in binaryExp
  L_17558: 
  #final label in codeGenAssignmentExpression
  L_17557: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17556: 
  #final label in statem expression
  L_17555: 
  #if finish label = 17550
  L_17550:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17564: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17565: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17563
  j L_17563
  #final label in binaryExp
  L_17563: 
  #jumpToAllOnlyIf
  L_17562:
  move $v0, $s1
  beqz $v0, L_17561
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17570: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17571: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17569
  j L_17569
  #final label in binaryExp
  L_17569: 
  #final label in codeGenAssignmentExpression
  L_17568: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17567: 
  #final label in statem expression
  L_17566: 
  #if finish label = 17561
  L_17561:
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17575: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17576: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17574
  j L_17574
  #final label in binaryExp
  L_17574: 
  #jumpToAllOnlyIf
  L_17573:
  move $v0, $s1
  beqz $v0, L_17572
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17580: 
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  L_17581: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  sgt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17579
  j L_17579
  #final label in binaryExp
  L_17579: 
  #jumpToAllOnlyIf
  L_17578:
  move $v0, $s1
  beqz $v0, L_17577
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17586: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17587: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17585
  j L_17585
  #final label in binaryExp
  L_17585: 
  #final label in codeGenAssignmentExpression
  L_17584: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17583: 
  #final label in statem expression
  L_17582: 
  #if finish label = 17577
  L_17577:
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17592: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17593: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17591
  j L_17591
  #final label in binaryExp
  L_17591: 
  #final label in codeGenAssignmentExpression
  L_17590: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17589: 
  #final label in statem expression
  L_17588: 
  #starting if
  #reg name $s1
  #storing literal to v0
  #reg name $s2
  li $v0, 9
  move $s2, $v0
  L_17597: 
  #storing literal to v0
  #reg name $s3
  li $v0, 9
  move $s3, $v0
  L_17598: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  slt $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_17596
  j L_17596
  #final label in binaryExp
  L_17596: 
  #jumpToAllOnlyIf
  L_17595:
  move $v0, $s1
  beqz $v0, L_17594
  #inside codeGenAssignmentExpression
  #reg name $s1
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17603: 
  #storing identifier to v0
  #reg name $s4
  lw $v0, not_there_106
  move $s4, $v0
  L_17604: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17602
  j L_17602
  #final label in binaryExp
  L_17602: 
  #final label in codeGenAssignmentExpression
  L_17601: 
  move $v0, $s2
  move $s0, $v0
  move $s1, $v0
  #final label in assignmentStatement
  L_17600: 
  #final label in statem expression
  L_17599: 
  #if finish label = 17594
  L_17594:
  #if finish label = 17572
  L_17572:
  #if finish label = 17512
  L_17512:
  #if finish label = 17418
  L_17418:
  #if finish label = 17324
  L_17324:
  #if finish label = 17230
  L_17230:
  #if finish label = 17136
  L_17136:
  #if finish label = 17042
  L_17042:
  #if finish label = 16948
  L_16948:
  #if finish label = 16854
  L_16854:
  #if finish label = 16760
  L_16760:
  #if finish label = 16666
  L_16666:
  #if finish label = 16661
  L_16661:
  #if finish label = 15716
  L_15716:
  #if finish label = 14771
  L_14771:
  #if finish label = 13826
  L_13826:
  #if finish label = 12881
  L_12881:
  #if finish label = 11936
  L_11936:
  #if finish label = 10991
  L_10991:
  #if finish label = 10046
  L_10046:
  #if finish label = 9101
  L_9101:
  #if finish label = 8156
  L_8156:
  #in return
  #storing identifier to v0
  #reg name $s1
  move $v0, $s0
  move $s1, $v0
  #final label in return
  L_17605: 
  move $v0, $s1
  j EPILOG_8152
  .data
FUNC_RET_ERROR_17606: .asciiz "function 'neighbours' must return a value\n"
.text

  la $a0, FUNC_RET_ERROR_17606
  j error
EPILOG_8152: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
.text
  #START PROLOG
printboard_209: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  #variable i is declared to be
  #reg name $s0
  #variable j is declared to be
  #reg name $s1
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17611: .byte   71,   101,   110,   101,   114,   97,   116,   105,   111,   110,   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17611
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17610: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17609: 
  #final label in statem expression
  L_17608: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  move $v0, $a0
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17614: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17613: 
  #final label in statem expression
  L_17612: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17618: .byte   58,   10,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17618
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17617: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17616: 
  #final label in statem expression
  L_17615: 
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_17621: 
  move $v0, $s3
  move $s0, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_17620: 
  #final label in statem expression
  L_17619: 
  #starting while
  #start of while loop
  L_17623:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17627: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_17628: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17626
  j L_17626
  #final label in binaryExp
  L_17626: 
  #jumpToAllOnlyIf
  L_17624:
  move $v0, $s2
  bnez $v0, L_17629
  j L_17622
  #whileBodyLabel
  L_17629:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17634: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_17635: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17633
  j L_17633
  #final label in binaryExp
  L_17633: 
  #jumpToAllOnlyIf
  L_17631:
  move $v0, $s2
  beqz $v0, L_17632
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_17638: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_17637: 
  #final label in statem expression
  L_17636: 
  #starting while
  #start of while loop
  L_17640:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17644: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_17645: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17643
  j L_17643
  #final label in binaryExp
  L_17643: 
  #jumpToAllOnlyIf
  L_17641:
  move $v0, $s2
  bnez $v0, L_17646
  j L_17639
  #whileBodyLabel
  L_17646:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17651: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_17652: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17650
  j L_17650
  #final label in binaryExp
  L_17650: 
  #jumpToAllOnlyIf
  L_17648:
  move $v0, $s2
  beqz $v0, L_17649
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_0_6
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17655: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17654: 
  #final label in statem expression
  L_17653: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17659: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17659
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17658: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17657: 
  #final label in statem expression
  L_17656: 
  j L_17647
  #inside else
  L_17649:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17664: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_17665: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17663
  j L_17663
  #final label in binaryExp
  L_17663: 
  #jumpToAllOnlyIf
  L_17661:
  move $v0, $s2
  beqz $v0, L_17662
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_1_7
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17668: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17667: 
  #final label in statem expression
  L_17666: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17672: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17672
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17671: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17670: 
  #final label in statem expression
  L_17669: 
  j L_17660
  #inside else
  L_17662:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17677: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_17678: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17676
  j L_17676
  #final label in binaryExp
  L_17676: 
  #jumpToAllOnlyIf
  L_17674:
  move $v0, $s2
  beqz $v0, L_17675
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_2_8
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17681: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17680: 
  #final label in statem expression
  L_17679: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17685: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17685
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17684: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17683: 
  #final label in statem expression
  L_17682: 
  j L_17673
  #inside else
  L_17675:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17690: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_17691: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17689
  j L_17689
  #final label in binaryExp
  L_17689: 
  #jumpToAllOnlyIf
  L_17687:
  move $v0, $s2
  beqz $v0, L_17688
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_3_9
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17694: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17693: 
  #final label in statem expression
  L_17692: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17698: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17698
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17697: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17696: 
  #final label in statem expression
  L_17695: 
  j L_17686
  #inside else
  L_17688:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17703: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_17704: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17702
  j L_17702
  #final label in binaryExp
  L_17702: 
  #jumpToAllOnlyIf
  L_17700:
  move $v0, $s2
  beqz $v0, L_17701
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_4_10
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17707: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17706: 
  #final label in statem expression
  L_17705: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17711: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17711
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17710: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17709: 
  #final label in statem expression
  L_17708: 
  j L_17699
  #inside else
  L_17701:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17716: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_17717: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17715
  j L_17715
  #final label in binaryExp
  L_17715: 
  #jumpToAllOnlyIf
  L_17713:
  move $v0, $s2
  beqz $v0, L_17714
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_5_11
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17720: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17719: 
  #final label in statem expression
  L_17718: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17724: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17724
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17723: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17722: 
  #final label in statem expression
  L_17721: 
  j L_17712
  #inside else
  L_17714:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17729: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_17730: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17728
  j L_17728
  #final label in binaryExp
  L_17728: 
  #jumpToAllOnlyIf
  L_17726:
  move $v0, $s2
  beqz $v0, L_17727
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_6_12
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17733: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17732: 
  #final label in statem expression
  L_17731: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17737: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17737
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17736: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17735: 
  #final label in statem expression
  L_17734: 
  j L_17725
  #inside else
  L_17727:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17742: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_17743: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17741
  j L_17741
  #final label in binaryExp
  L_17741: 
  #jumpToAllOnlyIf
  L_17739:
  move $v0, $s2
  beqz $v0, L_17740
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_7_13
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17746: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17745: 
  #final label in statem expression
  L_17744: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17750: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17750
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17749: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17748: 
  #final label in statem expression
  L_17747: 
  j L_17738
  #inside else
  L_17740:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17755: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_17756: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17754
  j L_17754
  #final label in binaryExp
  L_17754: 
  #jumpToAllOnlyIf
  L_17752:
  move $v0, $s2
  beqz $v0, L_17753
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_8_14
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17759: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17758: 
  #final label in statem expression
  L_17757: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17763: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17763
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17762: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17761: 
  #final label in statem expression
  L_17760: 
  j L_17751
  #inside else
  L_17753:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17767: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_17768: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17766
  j L_17766
  #final label in binaryExp
  L_17766: 
  #jumpToAllOnlyIf
  L_17765:
  move $v0, $s2
  beqz $v0, L_17764
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_0_9_15
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17771: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17770: 
  #final label in statem expression
  L_17769: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17775: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17775
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17774: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17773: 
  #final label in statem expression
  L_17772: 
  #if finish label = 17764
  L_17764:
  #if finish label = 17751
  L_17751:
  #if finish label = 17738
  L_17738:
  #if finish label = 17725
  L_17725:
  #if finish label = 17712
  L_17712:
  #if finish label = 17699
  L_17699:
  #if finish label = 17686
  L_17686:
  #if finish label = 17673
  L_17673:
  #if finish label = 17660
  L_17660:
  #if finish label = 17647
  L_17647:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_17780: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_17781: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_17779
  j L_17779
  #final label in binaryExp
  L_17779: 
  #final label in codeGenAssignmentExpression
  L_17778: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_17777: 
  #final label in statem expression
  L_17776: 
  #whileBodyEndJump
  L_17642:
  j  L_17640
  #while finish label = 17639
  L_17639:
  j L_17630
  #inside else
  L_17632:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17786: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_17787: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17785
  j L_17785
  #final label in binaryExp
  L_17785: 
  #jumpToAllOnlyIf
  L_17783:
  move $v0, $s2
  beqz $v0, L_17784
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_17790: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_17789: 
  #final label in statem expression
  L_17788: 
  #starting while
  #start of while loop
  L_17792:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17796: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_17797: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17795
  j L_17795
  #final label in binaryExp
  L_17795: 
  #jumpToAllOnlyIf
  L_17793:
  move $v0, $s2
  bnez $v0, L_17798
  j L_17791
  #whileBodyLabel
  L_17798:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17803: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_17804: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17802
  j L_17802
  #final label in binaryExp
  L_17802: 
  #jumpToAllOnlyIf
  L_17800:
  move $v0, $s2
  beqz $v0, L_17801
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_0_16
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17807: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17806: 
  #final label in statem expression
  L_17805: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17811: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17811
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17810: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17809: 
  #final label in statem expression
  L_17808: 
  j L_17799
  #inside else
  L_17801:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17816: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_17817: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17815
  j L_17815
  #final label in binaryExp
  L_17815: 
  #jumpToAllOnlyIf
  L_17813:
  move $v0, $s2
  beqz $v0, L_17814
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_1_17
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17820: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17819: 
  #final label in statem expression
  L_17818: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17824: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17824
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17823: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17822: 
  #final label in statem expression
  L_17821: 
  j L_17812
  #inside else
  L_17814:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17829: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_17830: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17828
  j L_17828
  #final label in binaryExp
  L_17828: 
  #jumpToAllOnlyIf
  L_17826:
  move $v0, $s2
  beqz $v0, L_17827
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_2_18
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17833: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17832: 
  #final label in statem expression
  L_17831: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17837: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17837
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17836: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17835: 
  #final label in statem expression
  L_17834: 
  j L_17825
  #inside else
  L_17827:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17842: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_17843: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17841
  j L_17841
  #final label in binaryExp
  L_17841: 
  #jumpToAllOnlyIf
  L_17839:
  move $v0, $s2
  beqz $v0, L_17840
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_3_19
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17846: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17845: 
  #final label in statem expression
  L_17844: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17850: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17850
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17849: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17848: 
  #final label in statem expression
  L_17847: 
  j L_17838
  #inside else
  L_17840:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17855: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_17856: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17854
  j L_17854
  #final label in binaryExp
  L_17854: 
  #jumpToAllOnlyIf
  L_17852:
  move $v0, $s2
  beqz $v0, L_17853
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_4_20
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17859: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17858: 
  #final label in statem expression
  L_17857: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17863: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17863
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17862: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17861: 
  #final label in statem expression
  L_17860: 
  j L_17851
  #inside else
  L_17853:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17868: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_17869: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17867
  j L_17867
  #final label in binaryExp
  L_17867: 
  #jumpToAllOnlyIf
  L_17865:
  move $v0, $s2
  beqz $v0, L_17866
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_5_21
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17872: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17871: 
  #final label in statem expression
  L_17870: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17876: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17876
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17875: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17874: 
  #final label in statem expression
  L_17873: 
  j L_17864
  #inside else
  L_17866:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17881: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_17882: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17880
  j L_17880
  #final label in binaryExp
  L_17880: 
  #jumpToAllOnlyIf
  L_17878:
  move $v0, $s2
  beqz $v0, L_17879
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_6_22
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17885: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17884: 
  #final label in statem expression
  L_17883: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17889: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17889
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17888: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17887: 
  #final label in statem expression
  L_17886: 
  j L_17877
  #inside else
  L_17879:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17894: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_17895: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17893
  j L_17893
  #final label in binaryExp
  L_17893: 
  #jumpToAllOnlyIf
  L_17891:
  move $v0, $s2
  beqz $v0, L_17892
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_7_23
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17898: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17897: 
  #final label in statem expression
  L_17896: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17902: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17902
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17901: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17900: 
  #final label in statem expression
  L_17899: 
  j L_17890
  #inside else
  L_17892:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17907: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_17908: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17906
  j L_17906
  #final label in binaryExp
  L_17906: 
  #jumpToAllOnlyIf
  L_17904:
  move $v0, $s2
  beqz $v0, L_17905
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_8_24
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17911: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17910: 
  #final label in statem expression
  L_17909: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17915: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17915
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17914: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17913: 
  #final label in statem expression
  L_17912: 
  j L_17903
  #inside else
  L_17905:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17919: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_17920: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17918
  j L_17918
  #final label in binaryExp
  L_17918: 
  #jumpToAllOnlyIf
  L_17917:
  move $v0, $s2
  beqz $v0, L_17916
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_1_9_25
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17923: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17922: 
  #final label in statem expression
  L_17921: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17927: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17927
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17926: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17925: 
  #final label in statem expression
  L_17924: 
  #if finish label = 17916
  L_17916:
  #if finish label = 17903
  L_17903:
  #if finish label = 17890
  L_17890:
  #if finish label = 17877
  L_17877:
  #if finish label = 17864
  L_17864:
  #if finish label = 17851
  L_17851:
  #if finish label = 17838
  L_17838:
  #if finish label = 17825
  L_17825:
  #if finish label = 17812
  L_17812:
  #if finish label = 17799
  L_17799:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_17932: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_17933: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_17931
  j L_17931
  #final label in binaryExp
  L_17931: 
  #final label in codeGenAssignmentExpression
  L_17930: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_17929: 
  #final label in statem expression
  L_17928: 
  #whileBodyEndJump
  L_17794:
  j  L_17792
  #while finish label = 17791
  L_17791:
  j L_17782
  #inside else
  L_17784:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_17938: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_17939: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17937
  j L_17937
  #final label in binaryExp
  L_17937: 
  #jumpToAllOnlyIf
  L_17935:
  move $v0, $s2
  beqz $v0, L_17936
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_17942: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_17941: 
  #final label in statem expression
  L_17940: 
  #starting while
  #start of while loop
  L_17944:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17948: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_17949: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17947
  j L_17947
  #final label in binaryExp
  L_17947: 
  #jumpToAllOnlyIf
  L_17945:
  move $v0, $s2
  bnez $v0, L_17950
  j L_17943
  #whileBodyLabel
  L_17950:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17955: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_17956: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17954
  j L_17954
  #final label in binaryExp
  L_17954: 
  #jumpToAllOnlyIf
  L_17952:
  move $v0, $s2
  beqz $v0, L_17953
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_0_26
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17959: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17958: 
  #final label in statem expression
  L_17957: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17963: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17963
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17962: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17961: 
  #final label in statem expression
  L_17960: 
  j L_17951
  #inside else
  L_17953:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17968: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_17969: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17967
  j L_17967
  #final label in binaryExp
  L_17967: 
  #jumpToAllOnlyIf
  L_17965:
  move $v0, $s2
  beqz $v0, L_17966
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_1_27
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17972: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17971: 
  #final label in statem expression
  L_17970: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17976: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17976
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17975: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17974: 
  #final label in statem expression
  L_17973: 
  j L_17964
  #inside else
  L_17966:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17981: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_17982: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17980
  j L_17980
  #final label in binaryExp
  L_17980: 
  #jumpToAllOnlyIf
  L_17978:
  move $v0, $s2
  beqz $v0, L_17979
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_2_28
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17985: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17984: 
  #final label in statem expression
  L_17983: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_17989: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_17989
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17988: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17987: 
  #final label in statem expression
  L_17986: 
  j L_17977
  #inside else
  L_17979:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_17994: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_17995: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_17993
  j L_17993
  #final label in binaryExp
  L_17993: 
  #jumpToAllOnlyIf
  L_17991:
  move $v0, $s2
  beqz $v0, L_17992
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_3_29
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_17998: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_17997: 
  #final label in statem expression
  L_17996: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18002: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18002
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18001: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18000: 
  #final label in statem expression
  L_17999: 
  j L_17990
  #inside else
  L_17992:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18007: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_18008: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18006
  j L_18006
  #final label in binaryExp
  L_18006: 
  #jumpToAllOnlyIf
  L_18004:
  move $v0, $s2
  beqz $v0, L_18005
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_4_30
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18011: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18010: 
  #final label in statem expression
  L_18009: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18015: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18015
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18014: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18013: 
  #final label in statem expression
  L_18012: 
  j L_18003
  #inside else
  L_18005:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18020: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_18021: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18019
  j L_18019
  #final label in binaryExp
  L_18019: 
  #jumpToAllOnlyIf
  L_18017:
  move $v0, $s2
  beqz $v0, L_18018
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_5_31
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18024: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18023: 
  #final label in statem expression
  L_18022: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18028: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18028
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18027: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18026: 
  #final label in statem expression
  L_18025: 
  j L_18016
  #inside else
  L_18018:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18033: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_18034: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18032
  j L_18032
  #final label in binaryExp
  L_18032: 
  #jumpToAllOnlyIf
  L_18030:
  move $v0, $s2
  beqz $v0, L_18031
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_6_32
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18037: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18036: 
  #final label in statem expression
  L_18035: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18041: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18041
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18040: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18039: 
  #final label in statem expression
  L_18038: 
  j L_18029
  #inside else
  L_18031:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18046: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_18047: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18045
  j L_18045
  #final label in binaryExp
  L_18045: 
  #jumpToAllOnlyIf
  L_18043:
  move $v0, $s2
  beqz $v0, L_18044
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_7_33
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18050: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18049: 
  #final label in statem expression
  L_18048: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18054: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18054
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18053: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18052: 
  #final label in statem expression
  L_18051: 
  j L_18042
  #inside else
  L_18044:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18059: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_18060: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18058
  j L_18058
  #final label in binaryExp
  L_18058: 
  #jumpToAllOnlyIf
  L_18056:
  move $v0, $s2
  beqz $v0, L_18057
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_8_34
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18063: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18062: 
  #final label in statem expression
  L_18061: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18067: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18067
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18066: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18065: 
  #final label in statem expression
  L_18064: 
  j L_18055
  #inside else
  L_18057:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18071: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18072: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18070
  j L_18070
  #final label in binaryExp
  L_18070: 
  #jumpToAllOnlyIf
  L_18069:
  move $v0, $s2
  beqz $v0, L_18068
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_2_9_35
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18075: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18074: 
  #final label in statem expression
  L_18073: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18079: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18079
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18078: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18077: 
  #final label in statem expression
  L_18076: 
  #if finish label = 18068
  L_18068:
  #if finish label = 18055
  L_18055:
  #if finish label = 18042
  L_18042:
  #if finish label = 18029
  L_18029:
  #if finish label = 18016
  L_18016:
  #if finish label = 18003
  L_18003:
  #if finish label = 17990
  L_17990:
  #if finish label = 17977
  L_17977:
  #if finish label = 17964
  L_17964:
  #if finish label = 17951
  L_17951:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_18084: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_18085: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_18083
  j L_18083
  #final label in binaryExp
  L_18083: 
  #final label in codeGenAssignmentExpression
  L_18082: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18081: 
  #final label in statem expression
  L_18080: 
  #whileBodyEndJump
  L_17946:
  j  L_17944
  #while finish label = 17943
  L_17943:
  j L_17934
  #inside else
  L_17936:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_18090: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_18091: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18089
  j L_18089
  #final label in binaryExp
  L_18089: 
  #jumpToAllOnlyIf
  L_18087:
  move $v0, $s2
  beqz $v0, L_18088
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_18094: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18093: 
  #final label in statem expression
  L_18092: 
  #starting while
  #start of while loop
  L_18096:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18100: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18101: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18099
  j L_18099
  #final label in binaryExp
  L_18099: 
  #jumpToAllOnlyIf
  L_18097:
  move $v0, $s2
  bnez $v0, L_18102
  j L_18095
  #whileBodyLabel
  L_18102:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18107: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_18108: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18106
  j L_18106
  #final label in binaryExp
  L_18106: 
  #jumpToAllOnlyIf
  L_18104:
  move $v0, $s2
  beqz $v0, L_18105
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_0_36
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18111: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18110: 
  #final label in statem expression
  L_18109: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18115: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18115
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18114: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18113: 
  #final label in statem expression
  L_18112: 
  j L_18103
  #inside else
  L_18105:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18120: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_18121: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18119
  j L_18119
  #final label in binaryExp
  L_18119: 
  #jumpToAllOnlyIf
  L_18117:
  move $v0, $s2
  beqz $v0, L_18118
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_1_37
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18124: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18123: 
  #final label in statem expression
  L_18122: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18128: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18128
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18127: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18126: 
  #final label in statem expression
  L_18125: 
  j L_18116
  #inside else
  L_18118:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18133: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_18134: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18132
  j L_18132
  #final label in binaryExp
  L_18132: 
  #jumpToAllOnlyIf
  L_18130:
  move $v0, $s2
  beqz $v0, L_18131
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_2_38
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18137: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18136: 
  #final label in statem expression
  L_18135: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18141: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18141
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18140: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18139: 
  #final label in statem expression
  L_18138: 
  j L_18129
  #inside else
  L_18131:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18146: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_18147: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18145
  j L_18145
  #final label in binaryExp
  L_18145: 
  #jumpToAllOnlyIf
  L_18143:
  move $v0, $s2
  beqz $v0, L_18144
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_3_39
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18150: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18149: 
  #final label in statem expression
  L_18148: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18154: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18154
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18153: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18152: 
  #final label in statem expression
  L_18151: 
  j L_18142
  #inside else
  L_18144:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18159: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_18160: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18158
  j L_18158
  #final label in binaryExp
  L_18158: 
  #jumpToAllOnlyIf
  L_18156:
  move $v0, $s2
  beqz $v0, L_18157
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_4_40
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18163: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18162: 
  #final label in statem expression
  L_18161: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18167: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18167
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18166: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18165: 
  #final label in statem expression
  L_18164: 
  j L_18155
  #inside else
  L_18157:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18172: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_18173: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18171
  j L_18171
  #final label in binaryExp
  L_18171: 
  #jumpToAllOnlyIf
  L_18169:
  move $v0, $s2
  beqz $v0, L_18170
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_5_41
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18176: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18175: 
  #final label in statem expression
  L_18174: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18180: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18180
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18179: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18178: 
  #final label in statem expression
  L_18177: 
  j L_18168
  #inside else
  L_18170:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18185: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_18186: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18184
  j L_18184
  #final label in binaryExp
  L_18184: 
  #jumpToAllOnlyIf
  L_18182:
  move $v0, $s2
  beqz $v0, L_18183
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_6_42
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18189: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18188: 
  #final label in statem expression
  L_18187: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18193: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18193
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18192: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18191: 
  #final label in statem expression
  L_18190: 
  j L_18181
  #inside else
  L_18183:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18198: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_18199: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18197
  j L_18197
  #final label in binaryExp
  L_18197: 
  #jumpToAllOnlyIf
  L_18195:
  move $v0, $s2
  beqz $v0, L_18196
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_7_43
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18202: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18201: 
  #final label in statem expression
  L_18200: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18206: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18206
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18205: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18204: 
  #final label in statem expression
  L_18203: 
  j L_18194
  #inside else
  L_18196:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18211: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_18212: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18210
  j L_18210
  #final label in binaryExp
  L_18210: 
  #jumpToAllOnlyIf
  L_18208:
  move $v0, $s2
  beqz $v0, L_18209
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_8_44
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18215: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18214: 
  #final label in statem expression
  L_18213: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18219: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18219
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18218: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18217: 
  #final label in statem expression
  L_18216: 
  j L_18207
  #inside else
  L_18209:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18223: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18224: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18222
  j L_18222
  #final label in binaryExp
  L_18222: 
  #jumpToAllOnlyIf
  L_18221:
  move $v0, $s2
  beqz $v0, L_18220
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_3_9_45
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18227: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18226: 
  #final label in statem expression
  L_18225: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18231: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18231
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18230: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18229: 
  #final label in statem expression
  L_18228: 
  #if finish label = 18220
  L_18220:
  #if finish label = 18207
  L_18207:
  #if finish label = 18194
  L_18194:
  #if finish label = 18181
  L_18181:
  #if finish label = 18168
  L_18168:
  #if finish label = 18155
  L_18155:
  #if finish label = 18142
  L_18142:
  #if finish label = 18129
  L_18129:
  #if finish label = 18116
  L_18116:
  #if finish label = 18103
  L_18103:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_18236: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_18237: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_18235
  j L_18235
  #final label in binaryExp
  L_18235: 
  #final label in codeGenAssignmentExpression
  L_18234: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18233: 
  #final label in statem expression
  L_18232: 
  #whileBodyEndJump
  L_18098:
  j  L_18096
  #while finish label = 18095
  L_18095:
  j L_18086
  #inside else
  L_18088:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_18242: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_18243: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18241
  j L_18241
  #final label in binaryExp
  L_18241: 
  #jumpToAllOnlyIf
  L_18239:
  move $v0, $s2
  beqz $v0, L_18240
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_18246: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18245: 
  #final label in statem expression
  L_18244: 
  #starting while
  #start of while loop
  L_18248:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18252: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18253: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18251
  j L_18251
  #final label in binaryExp
  L_18251: 
  #jumpToAllOnlyIf
  L_18249:
  move $v0, $s2
  bnez $v0, L_18254
  j L_18247
  #whileBodyLabel
  L_18254:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18259: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_18260: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18258
  j L_18258
  #final label in binaryExp
  L_18258: 
  #jumpToAllOnlyIf
  L_18256:
  move $v0, $s2
  beqz $v0, L_18257
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_0_46
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18263: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18262: 
  #final label in statem expression
  L_18261: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18267: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18267
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18266: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18265: 
  #final label in statem expression
  L_18264: 
  j L_18255
  #inside else
  L_18257:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18272: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_18273: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18271
  j L_18271
  #final label in binaryExp
  L_18271: 
  #jumpToAllOnlyIf
  L_18269:
  move $v0, $s2
  beqz $v0, L_18270
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_1_47
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18276: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18275: 
  #final label in statem expression
  L_18274: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18280: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18280
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18279: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18278: 
  #final label in statem expression
  L_18277: 
  j L_18268
  #inside else
  L_18270:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18285: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_18286: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18284
  j L_18284
  #final label in binaryExp
  L_18284: 
  #jumpToAllOnlyIf
  L_18282:
  move $v0, $s2
  beqz $v0, L_18283
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_2_48
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18289: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18288: 
  #final label in statem expression
  L_18287: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18293: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18293
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18292: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18291: 
  #final label in statem expression
  L_18290: 
  j L_18281
  #inside else
  L_18283:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18298: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_18299: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18297
  j L_18297
  #final label in binaryExp
  L_18297: 
  #jumpToAllOnlyIf
  L_18295:
  move $v0, $s2
  beqz $v0, L_18296
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_3_49
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18302: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18301: 
  #final label in statem expression
  L_18300: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18306: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18306
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18305: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18304: 
  #final label in statem expression
  L_18303: 
  j L_18294
  #inside else
  L_18296:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18311: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_18312: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18310
  j L_18310
  #final label in binaryExp
  L_18310: 
  #jumpToAllOnlyIf
  L_18308:
  move $v0, $s2
  beqz $v0, L_18309
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_4_50
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18315: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18314: 
  #final label in statem expression
  L_18313: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18319: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18319
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18318: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18317: 
  #final label in statem expression
  L_18316: 
  j L_18307
  #inside else
  L_18309:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18324: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_18325: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18323
  j L_18323
  #final label in binaryExp
  L_18323: 
  #jumpToAllOnlyIf
  L_18321:
  move $v0, $s2
  beqz $v0, L_18322
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_5_51
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18328: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18327: 
  #final label in statem expression
  L_18326: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18332: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18332
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18331: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18330: 
  #final label in statem expression
  L_18329: 
  j L_18320
  #inside else
  L_18322:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18337: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_18338: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18336
  j L_18336
  #final label in binaryExp
  L_18336: 
  #jumpToAllOnlyIf
  L_18334:
  move $v0, $s2
  beqz $v0, L_18335
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_6_52
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18341: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18340: 
  #final label in statem expression
  L_18339: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18345: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18345
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18344: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18343: 
  #final label in statem expression
  L_18342: 
  j L_18333
  #inside else
  L_18335:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18350: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_18351: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18349
  j L_18349
  #final label in binaryExp
  L_18349: 
  #jumpToAllOnlyIf
  L_18347:
  move $v0, $s2
  beqz $v0, L_18348
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_7_53
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18354: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18353: 
  #final label in statem expression
  L_18352: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18358: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18358
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18357: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18356: 
  #final label in statem expression
  L_18355: 
  j L_18346
  #inside else
  L_18348:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18363: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_18364: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18362
  j L_18362
  #final label in binaryExp
  L_18362: 
  #jumpToAllOnlyIf
  L_18360:
  move $v0, $s2
  beqz $v0, L_18361
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_8_54
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18367: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18366: 
  #final label in statem expression
  L_18365: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18371: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18371
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18370: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18369: 
  #final label in statem expression
  L_18368: 
  j L_18359
  #inside else
  L_18361:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18375: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18376: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18374
  j L_18374
  #final label in binaryExp
  L_18374: 
  #jumpToAllOnlyIf
  L_18373:
  move $v0, $s2
  beqz $v0, L_18372
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_4_9_55
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18379: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18378: 
  #final label in statem expression
  L_18377: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18383: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18383
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18382: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18381: 
  #final label in statem expression
  L_18380: 
  #if finish label = 18372
  L_18372:
  #if finish label = 18359
  L_18359:
  #if finish label = 18346
  L_18346:
  #if finish label = 18333
  L_18333:
  #if finish label = 18320
  L_18320:
  #if finish label = 18307
  L_18307:
  #if finish label = 18294
  L_18294:
  #if finish label = 18281
  L_18281:
  #if finish label = 18268
  L_18268:
  #if finish label = 18255
  L_18255:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_18388: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_18389: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_18387
  j L_18387
  #final label in binaryExp
  L_18387: 
  #final label in codeGenAssignmentExpression
  L_18386: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18385: 
  #final label in statem expression
  L_18384: 
  #whileBodyEndJump
  L_18250:
  j  L_18248
  #while finish label = 18247
  L_18247:
  j L_18238
  #inside else
  L_18240:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_18394: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_18395: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18393
  j L_18393
  #final label in binaryExp
  L_18393: 
  #jumpToAllOnlyIf
  L_18391:
  move $v0, $s2
  beqz $v0, L_18392
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_18398: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18397: 
  #final label in statem expression
  L_18396: 
  #starting while
  #start of while loop
  L_18400:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18404: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18405: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18403
  j L_18403
  #final label in binaryExp
  L_18403: 
  #jumpToAllOnlyIf
  L_18401:
  move $v0, $s2
  bnez $v0, L_18406
  j L_18399
  #whileBodyLabel
  L_18406:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18411: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_18412: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18410
  j L_18410
  #final label in binaryExp
  L_18410: 
  #jumpToAllOnlyIf
  L_18408:
  move $v0, $s2
  beqz $v0, L_18409
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_0_56
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18415: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18414: 
  #final label in statem expression
  L_18413: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18419: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18419
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18418: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18417: 
  #final label in statem expression
  L_18416: 
  j L_18407
  #inside else
  L_18409:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18424: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_18425: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18423
  j L_18423
  #final label in binaryExp
  L_18423: 
  #jumpToAllOnlyIf
  L_18421:
  move $v0, $s2
  beqz $v0, L_18422
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_1_57
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18428: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18427: 
  #final label in statem expression
  L_18426: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18432: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18432
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18431: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18430: 
  #final label in statem expression
  L_18429: 
  j L_18420
  #inside else
  L_18422:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18437: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_18438: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18436
  j L_18436
  #final label in binaryExp
  L_18436: 
  #jumpToAllOnlyIf
  L_18434:
  move $v0, $s2
  beqz $v0, L_18435
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_2_58
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18441: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18440: 
  #final label in statem expression
  L_18439: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18445: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18445
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18444: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18443: 
  #final label in statem expression
  L_18442: 
  j L_18433
  #inside else
  L_18435:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18450: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_18451: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18449
  j L_18449
  #final label in binaryExp
  L_18449: 
  #jumpToAllOnlyIf
  L_18447:
  move $v0, $s2
  beqz $v0, L_18448
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_3_59
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18454: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18453: 
  #final label in statem expression
  L_18452: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18458: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18458
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18457: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18456: 
  #final label in statem expression
  L_18455: 
  j L_18446
  #inside else
  L_18448:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18463: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_18464: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18462
  j L_18462
  #final label in binaryExp
  L_18462: 
  #jumpToAllOnlyIf
  L_18460:
  move $v0, $s2
  beqz $v0, L_18461
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_4_60
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18467: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18466: 
  #final label in statem expression
  L_18465: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18471: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18471
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18470: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18469: 
  #final label in statem expression
  L_18468: 
  j L_18459
  #inside else
  L_18461:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18476: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_18477: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18475
  j L_18475
  #final label in binaryExp
  L_18475: 
  #jumpToAllOnlyIf
  L_18473:
  move $v0, $s2
  beqz $v0, L_18474
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_5_61
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18480: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18479: 
  #final label in statem expression
  L_18478: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18484: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18484
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18483: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18482: 
  #final label in statem expression
  L_18481: 
  j L_18472
  #inside else
  L_18474:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18489: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_18490: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18488
  j L_18488
  #final label in binaryExp
  L_18488: 
  #jumpToAllOnlyIf
  L_18486:
  move $v0, $s2
  beqz $v0, L_18487
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_6_62
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18493: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18492: 
  #final label in statem expression
  L_18491: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18497: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18497
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18496: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18495: 
  #final label in statem expression
  L_18494: 
  j L_18485
  #inside else
  L_18487:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18502: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_18503: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18501
  j L_18501
  #final label in binaryExp
  L_18501: 
  #jumpToAllOnlyIf
  L_18499:
  move $v0, $s2
  beqz $v0, L_18500
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_7_63
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18506: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18505: 
  #final label in statem expression
  L_18504: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18510: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18510
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18509: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18508: 
  #final label in statem expression
  L_18507: 
  j L_18498
  #inside else
  L_18500:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18515: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_18516: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18514
  j L_18514
  #final label in binaryExp
  L_18514: 
  #jumpToAllOnlyIf
  L_18512:
  move $v0, $s2
  beqz $v0, L_18513
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_8_64
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18519: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18518: 
  #final label in statem expression
  L_18517: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18523: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18523
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18522: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18521: 
  #final label in statem expression
  L_18520: 
  j L_18511
  #inside else
  L_18513:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18527: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18528: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18526
  j L_18526
  #final label in binaryExp
  L_18526: 
  #jumpToAllOnlyIf
  L_18525:
  move $v0, $s2
  beqz $v0, L_18524
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_5_9_65
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18531: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18530: 
  #final label in statem expression
  L_18529: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18535: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18535
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18534: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18533: 
  #final label in statem expression
  L_18532: 
  #if finish label = 18524
  L_18524:
  #if finish label = 18511
  L_18511:
  #if finish label = 18498
  L_18498:
  #if finish label = 18485
  L_18485:
  #if finish label = 18472
  L_18472:
  #if finish label = 18459
  L_18459:
  #if finish label = 18446
  L_18446:
  #if finish label = 18433
  L_18433:
  #if finish label = 18420
  L_18420:
  #if finish label = 18407
  L_18407:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_18540: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_18541: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_18539
  j L_18539
  #final label in binaryExp
  L_18539: 
  #final label in codeGenAssignmentExpression
  L_18538: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18537: 
  #final label in statem expression
  L_18536: 
  #whileBodyEndJump
  L_18402:
  j  L_18400
  #while finish label = 18399
  L_18399:
  j L_18390
  #inside else
  L_18392:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_18546: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_18547: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18545
  j L_18545
  #final label in binaryExp
  L_18545: 
  #jumpToAllOnlyIf
  L_18543:
  move $v0, $s2
  beqz $v0, L_18544
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_18550: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18549: 
  #final label in statem expression
  L_18548: 
  #starting while
  #start of while loop
  L_18552:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18556: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18557: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18555
  j L_18555
  #final label in binaryExp
  L_18555: 
  #jumpToAllOnlyIf
  L_18553:
  move $v0, $s2
  bnez $v0, L_18558
  j L_18551
  #whileBodyLabel
  L_18558:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18563: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_18564: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18562
  j L_18562
  #final label in binaryExp
  L_18562: 
  #jumpToAllOnlyIf
  L_18560:
  move $v0, $s2
  beqz $v0, L_18561
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_0_66
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18567: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18566: 
  #final label in statem expression
  L_18565: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18571: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18571
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18570: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18569: 
  #final label in statem expression
  L_18568: 
  j L_18559
  #inside else
  L_18561:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18576: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_18577: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18575
  j L_18575
  #final label in binaryExp
  L_18575: 
  #jumpToAllOnlyIf
  L_18573:
  move $v0, $s2
  beqz $v0, L_18574
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_1_67
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18580: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18579: 
  #final label in statem expression
  L_18578: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18584: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18584
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18583: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18582: 
  #final label in statem expression
  L_18581: 
  j L_18572
  #inside else
  L_18574:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18589: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_18590: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18588
  j L_18588
  #final label in binaryExp
  L_18588: 
  #jumpToAllOnlyIf
  L_18586:
  move $v0, $s2
  beqz $v0, L_18587
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_2_68
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18593: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18592: 
  #final label in statem expression
  L_18591: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18597: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18597
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18596: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18595: 
  #final label in statem expression
  L_18594: 
  j L_18585
  #inside else
  L_18587:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18602: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_18603: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18601
  j L_18601
  #final label in binaryExp
  L_18601: 
  #jumpToAllOnlyIf
  L_18599:
  move $v0, $s2
  beqz $v0, L_18600
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_3_69
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18606: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18605: 
  #final label in statem expression
  L_18604: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18610: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18610
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18609: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18608: 
  #final label in statem expression
  L_18607: 
  j L_18598
  #inside else
  L_18600:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18615: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_18616: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18614
  j L_18614
  #final label in binaryExp
  L_18614: 
  #jumpToAllOnlyIf
  L_18612:
  move $v0, $s2
  beqz $v0, L_18613
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_4_70
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18619: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18618: 
  #final label in statem expression
  L_18617: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18623: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18623
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18622: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18621: 
  #final label in statem expression
  L_18620: 
  j L_18611
  #inside else
  L_18613:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18628: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_18629: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18627
  j L_18627
  #final label in binaryExp
  L_18627: 
  #jumpToAllOnlyIf
  L_18625:
  move $v0, $s2
  beqz $v0, L_18626
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_5_71
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18632: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18631: 
  #final label in statem expression
  L_18630: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18636: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18636
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18635: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18634: 
  #final label in statem expression
  L_18633: 
  j L_18624
  #inside else
  L_18626:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18641: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_18642: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18640
  j L_18640
  #final label in binaryExp
  L_18640: 
  #jumpToAllOnlyIf
  L_18638:
  move $v0, $s2
  beqz $v0, L_18639
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_6_72
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18645: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18644: 
  #final label in statem expression
  L_18643: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18649: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18649
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18648: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18647: 
  #final label in statem expression
  L_18646: 
  j L_18637
  #inside else
  L_18639:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18654: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_18655: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18653
  j L_18653
  #final label in binaryExp
  L_18653: 
  #jumpToAllOnlyIf
  L_18651:
  move $v0, $s2
  beqz $v0, L_18652
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_7_73
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18658: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18657: 
  #final label in statem expression
  L_18656: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18662: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18662
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18661: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18660: 
  #final label in statem expression
  L_18659: 
  j L_18650
  #inside else
  L_18652:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18667: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_18668: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18666
  j L_18666
  #final label in binaryExp
  L_18666: 
  #jumpToAllOnlyIf
  L_18664:
  move $v0, $s2
  beqz $v0, L_18665
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_8_74
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18671: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18670: 
  #final label in statem expression
  L_18669: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18675: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18675
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18674: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18673: 
  #final label in statem expression
  L_18672: 
  j L_18663
  #inside else
  L_18665:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18679: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18680: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18678
  j L_18678
  #final label in binaryExp
  L_18678: 
  #jumpToAllOnlyIf
  L_18677:
  move $v0, $s2
  beqz $v0, L_18676
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_6_9_75
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18683: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18682: 
  #final label in statem expression
  L_18681: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18687: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18687
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18686: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18685: 
  #final label in statem expression
  L_18684: 
  #if finish label = 18676
  L_18676:
  #if finish label = 18663
  L_18663:
  #if finish label = 18650
  L_18650:
  #if finish label = 18637
  L_18637:
  #if finish label = 18624
  L_18624:
  #if finish label = 18611
  L_18611:
  #if finish label = 18598
  L_18598:
  #if finish label = 18585
  L_18585:
  #if finish label = 18572
  L_18572:
  #if finish label = 18559
  L_18559:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_18692: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_18693: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_18691
  j L_18691
  #final label in binaryExp
  L_18691: 
  #final label in codeGenAssignmentExpression
  L_18690: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18689: 
  #final label in statem expression
  L_18688: 
  #whileBodyEndJump
  L_18554:
  j  L_18552
  #while finish label = 18551
  L_18551:
  j L_18542
  #inside else
  L_18544:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_18698: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_18699: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18697
  j L_18697
  #final label in binaryExp
  L_18697: 
  #jumpToAllOnlyIf
  L_18695:
  move $v0, $s2
  beqz $v0, L_18696
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_18702: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18701: 
  #final label in statem expression
  L_18700: 
  #starting while
  #start of while loop
  L_18704:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18708: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18709: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18707
  j L_18707
  #final label in binaryExp
  L_18707: 
  #jumpToAllOnlyIf
  L_18705:
  move $v0, $s2
  bnez $v0, L_18710
  j L_18703
  #whileBodyLabel
  L_18710:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18715: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_18716: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18714
  j L_18714
  #final label in binaryExp
  L_18714: 
  #jumpToAllOnlyIf
  L_18712:
  move $v0, $s2
  beqz $v0, L_18713
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_0_76
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18719: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18718: 
  #final label in statem expression
  L_18717: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18723: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18723
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18722: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18721: 
  #final label in statem expression
  L_18720: 
  j L_18711
  #inside else
  L_18713:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18728: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_18729: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18727
  j L_18727
  #final label in binaryExp
  L_18727: 
  #jumpToAllOnlyIf
  L_18725:
  move $v0, $s2
  beqz $v0, L_18726
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_1_77
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18732: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18731: 
  #final label in statem expression
  L_18730: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18736: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18736
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18735: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18734: 
  #final label in statem expression
  L_18733: 
  j L_18724
  #inside else
  L_18726:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18741: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_18742: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18740
  j L_18740
  #final label in binaryExp
  L_18740: 
  #jumpToAllOnlyIf
  L_18738:
  move $v0, $s2
  beqz $v0, L_18739
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_2_78
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18745: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18744: 
  #final label in statem expression
  L_18743: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18749: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18749
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18748: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18747: 
  #final label in statem expression
  L_18746: 
  j L_18737
  #inside else
  L_18739:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18754: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_18755: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18753
  j L_18753
  #final label in binaryExp
  L_18753: 
  #jumpToAllOnlyIf
  L_18751:
  move $v0, $s2
  beqz $v0, L_18752
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_3_79
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18758: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18757: 
  #final label in statem expression
  L_18756: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18762: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18762
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18761: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18760: 
  #final label in statem expression
  L_18759: 
  j L_18750
  #inside else
  L_18752:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18767: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_18768: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18766
  j L_18766
  #final label in binaryExp
  L_18766: 
  #jumpToAllOnlyIf
  L_18764:
  move $v0, $s2
  beqz $v0, L_18765
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_4_80
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18771: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18770: 
  #final label in statem expression
  L_18769: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18775: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18775
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18774: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18773: 
  #final label in statem expression
  L_18772: 
  j L_18763
  #inside else
  L_18765:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18780: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_18781: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18779
  j L_18779
  #final label in binaryExp
  L_18779: 
  #jumpToAllOnlyIf
  L_18777:
  move $v0, $s2
  beqz $v0, L_18778
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_5_81
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18784: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18783: 
  #final label in statem expression
  L_18782: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18788: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18788
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18787: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18786: 
  #final label in statem expression
  L_18785: 
  j L_18776
  #inside else
  L_18778:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18793: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_18794: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18792
  j L_18792
  #final label in binaryExp
  L_18792: 
  #jumpToAllOnlyIf
  L_18790:
  move $v0, $s2
  beqz $v0, L_18791
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_6_82
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18797: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18796: 
  #final label in statem expression
  L_18795: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18801: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18801
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18800: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18799: 
  #final label in statem expression
  L_18798: 
  j L_18789
  #inside else
  L_18791:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18806: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_18807: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18805
  j L_18805
  #final label in binaryExp
  L_18805: 
  #jumpToAllOnlyIf
  L_18803:
  move $v0, $s2
  beqz $v0, L_18804
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_7_83
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18810: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18809: 
  #final label in statem expression
  L_18808: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18814: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18814
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18813: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18812: 
  #final label in statem expression
  L_18811: 
  j L_18802
  #inside else
  L_18804:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18819: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_18820: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18818
  j L_18818
  #final label in binaryExp
  L_18818: 
  #jumpToAllOnlyIf
  L_18816:
  move $v0, $s2
  beqz $v0, L_18817
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_8_84
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18823: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18822: 
  #final label in statem expression
  L_18821: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18827: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18827
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18826: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18825: 
  #final label in statem expression
  L_18824: 
  j L_18815
  #inside else
  L_18817:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18831: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18832: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18830
  j L_18830
  #final label in binaryExp
  L_18830: 
  #jumpToAllOnlyIf
  L_18829:
  move $v0, $s2
  beqz $v0, L_18828
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_7_9_85
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18835: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18834: 
  #final label in statem expression
  L_18833: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18839: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18839
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18838: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18837: 
  #final label in statem expression
  L_18836: 
  #if finish label = 18828
  L_18828:
  #if finish label = 18815
  L_18815:
  #if finish label = 18802
  L_18802:
  #if finish label = 18789
  L_18789:
  #if finish label = 18776
  L_18776:
  #if finish label = 18763
  L_18763:
  #if finish label = 18750
  L_18750:
  #if finish label = 18737
  L_18737:
  #if finish label = 18724
  L_18724:
  #if finish label = 18711
  L_18711:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_18844: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_18845: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_18843
  j L_18843
  #final label in binaryExp
  L_18843: 
  #final label in codeGenAssignmentExpression
  L_18842: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18841: 
  #final label in statem expression
  L_18840: 
  #whileBodyEndJump
  L_18706:
  j  L_18704
  #while finish label = 18703
  L_18703:
  j L_18694
  #inside else
  L_18696:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_18850: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_18851: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18849
  j L_18849
  #final label in binaryExp
  L_18849: 
  #jumpToAllOnlyIf
  L_18847:
  move $v0, $s2
  beqz $v0, L_18848
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_18854: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18853: 
  #final label in statem expression
  L_18852: 
  #starting while
  #start of while loop
  L_18856:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18860: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18861: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18859
  j L_18859
  #final label in binaryExp
  L_18859: 
  #jumpToAllOnlyIf
  L_18857:
  move $v0, $s2
  bnez $v0, L_18862
  j L_18855
  #whileBodyLabel
  L_18862:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18867: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_18868: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18866
  j L_18866
  #final label in binaryExp
  L_18866: 
  #jumpToAllOnlyIf
  L_18864:
  move $v0, $s2
  beqz $v0, L_18865
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_0_86
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18871: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18870: 
  #final label in statem expression
  L_18869: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18875: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18875
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18874: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18873: 
  #final label in statem expression
  L_18872: 
  j L_18863
  #inside else
  L_18865:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18880: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_18881: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18879
  j L_18879
  #final label in binaryExp
  L_18879: 
  #jumpToAllOnlyIf
  L_18877:
  move $v0, $s2
  beqz $v0, L_18878
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_1_87
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18884: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18883: 
  #final label in statem expression
  L_18882: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18888: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18888
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18887: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18886: 
  #final label in statem expression
  L_18885: 
  j L_18876
  #inside else
  L_18878:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18893: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_18894: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18892
  j L_18892
  #final label in binaryExp
  L_18892: 
  #jumpToAllOnlyIf
  L_18890:
  move $v0, $s2
  beqz $v0, L_18891
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_2_88
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18897: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18896: 
  #final label in statem expression
  L_18895: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18901: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18901
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18900: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18899: 
  #final label in statem expression
  L_18898: 
  j L_18889
  #inside else
  L_18891:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18906: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_18907: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18905
  j L_18905
  #final label in binaryExp
  L_18905: 
  #jumpToAllOnlyIf
  L_18903:
  move $v0, $s2
  beqz $v0, L_18904
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_3_89
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18910: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18909: 
  #final label in statem expression
  L_18908: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18914: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18914
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18913: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18912: 
  #final label in statem expression
  L_18911: 
  j L_18902
  #inside else
  L_18904:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18919: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_18920: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18918
  j L_18918
  #final label in binaryExp
  L_18918: 
  #jumpToAllOnlyIf
  L_18916:
  move $v0, $s2
  beqz $v0, L_18917
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_4_90
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18923: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18922: 
  #final label in statem expression
  L_18921: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18927: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18927
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18926: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18925: 
  #final label in statem expression
  L_18924: 
  j L_18915
  #inside else
  L_18917:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18932: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_18933: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18931
  j L_18931
  #final label in binaryExp
  L_18931: 
  #jumpToAllOnlyIf
  L_18929:
  move $v0, $s2
  beqz $v0, L_18930
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_5_91
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18936: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18935: 
  #final label in statem expression
  L_18934: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18940: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18940
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18939: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18938: 
  #final label in statem expression
  L_18937: 
  j L_18928
  #inside else
  L_18930:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18945: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_18946: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18944
  j L_18944
  #final label in binaryExp
  L_18944: 
  #jumpToAllOnlyIf
  L_18942:
  move $v0, $s2
  beqz $v0, L_18943
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_6_92
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18949: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18948: 
  #final label in statem expression
  L_18947: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18953: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18953
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18952: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18951: 
  #final label in statem expression
  L_18950: 
  j L_18941
  #inside else
  L_18943:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18958: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_18959: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18957
  j L_18957
  #final label in binaryExp
  L_18957: 
  #jumpToAllOnlyIf
  L_18955:
  move $v0, $s2
  beqz $v0, L_18956
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_7_93
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18962: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18961: 
  #final label in statem expression
  L_18960: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18966: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18966
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18965: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18964: 
  #final label in statem expression
  L_18963: 
  j L_18954
  #inside else
  L_18956:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18971: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_18972: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18970
  j L_18970
  #final label in binaryExp
  L_18970: 
  #jumpToAllOnlyIf
  L_18968:
  move $v0, $s2
  beqz $v0, L_18969
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_8_94
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18975: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18974: 
  #final label in statem expression
  L_18973: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18979: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18979
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18978: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18977: 
  #final label in statem expression
  L_18976: 
  j L_18967
  #inside else
  L_18969:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_18983: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_18984: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_18982
  j L_18982
  #final label in binaryExp
  L_18982: 
  #jumpToAllOnlyIf
  L_18981:
  move $v0, $s2
  beqz $v0, L_18980
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_8_9_95
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18987: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18986: 
  #final label in statem expression
  L_18985: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_18991: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_18991
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_18990: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_18989: 
  #final label in statem expression
  L_18988: 
  #if finish label = 18980
  L_18980:
  #if finish label = 18967
  L_18967:
  #if finish label = 18954
  L_18954:
  #if finish label = 18941
  L_18941:
  #if finish label = 18928
  L_18928:
  #if finish label = 18915
  L_18915:
  #if finish label = 18902
  L_18902:
  #if finish label = 18889
  L_18889:
  #if finish label = 18876
  L_18876:
  #if finish label = 18863
  L_18863:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_18996: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_18997: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_18995
  j L_18995
  #final label in binaryExp
  L_18995: 
  #final label in codeGenAssignmentExpression
  L_18994: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_18993: 
  #final label in statem expression
  L_18992: 
  #whileBodyEndJump
  L_18858:
  j  L_18856
  #while finish label = 18855
  L_18855:
  j L_18846
  #inside else
  L_18848:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s0
  move $s3, $v0
  L_19001: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_19002: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19000
  j L_19000
  #final label in binaryExp
  L_19000: 
  #jumpToAllOnlyIf
  L_18999:
  move $v0, $s2
  beqz $v0, L_18998
  #inside codeGenAssignmentExpression
  #reg name $s2
  #storing literal to v0
  #reg name $s3
  li $v0, 0
  move $s3, $v0
  #final label in codeGenAssignmentExpression
  L_19005: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_19004: 
  #final label in statem expression
  L_19003: 
  #starting while
  #start of while loop
  L_19007:
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19011: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_19012: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  sle $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19010
  j L_19010
  #final label in binaryExp
  L_19010: 
  #jumpToAllOnlyIf
  L_19008:
  move $v0, $s2
  bnez $v0, L_19013
  j L_19006
  #whileBodyLabel
  L_19013:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19018: 
  #storing literal to v0
  #reg name $s4
  li $v0, 0
  move $s4, $v0
  L_19019: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19017
  j L_19017
  #final label in binaryExp
  L_19017: 
  #jumpToAllOnlyIf
  L_19015:
  move $v0, $s2
  beqz $v0, L_19016
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_0_96
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19022: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19021: 
  #final label in statem expression
  L_19020: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19026: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19026
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19025: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19024: 
  #final label in statem expression
  L_19023: 
  j L_19014
  #inside else
  L_19016:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19031: 
  #storing literal to v0
  #reg name $s4
  li $v0, 1
  move $s4, $v0
  L_19032: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19030
  j L_19030
  #final label in binaryExp
  L_19030: 
  #jumpToAllOnlyIf
  L_19028:
  move $v0, $s2
  beqz $v0, L_19029
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_1_97
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19035: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19034: 
  #final label in statem expression
  L_19033: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19039: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19039
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19038: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19037: 
  #final label in statem expression
  L_19036: 
  j L_19027
  #inside else
  L_19029:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19044: 
  #storing literal to v0
  #reg name $s4
  li $v0, 2
  move $s4, $v0
  L_19045: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19043
  j L_19043
  #final label in binaryExp
  L_19043: 
  #jumpToAllOnlyIf
  L_19041:
  move $v0, $s2
  beqz $v0, L_19042
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_2_98
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19048: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19047: 
  #final label in statem expression
  L_19046: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19052: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19052
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19051: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19050: 
  #final label in statem expression
  L_19049: 
  j L_19040
  #inside else
  L_19042:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19057: 
  #storing literal to v0
  #reg name $s4
  li $v0, 3
  move $s4, $v0
  L_19058: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19056
  j L_19056
  #final label in binaryExp
  L_19056: 
  #jumpToAllOnlyIf
  L_19054:
  move $v0, $s2
  beqz $v0, L_19055
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_3_99
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19061: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19060: 
  #final label in statem expression
  L_19059: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19065: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19065
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19064: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19063: 
  #final label in statem expression
  L_19062: 
  j L_19053
  #inside else
  L_19055:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19070: 
  #storing literal to v0
  #reg name $s4
  li $v0, 4
  move $s4, $v0
  L_19071: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19069
  j L_19069
  #final label in binaryExp
  L_19069: 
  #jumpToAllOnlyIf
  L_19067:
  move $v0, $s2
  beqz $v0, L_19068
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_4_100
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19074: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19073: 
  #final label in statem expression
  L_19072: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19078: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19078
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19077: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19076: 
  #final label in statem expression
  L_19075: 
  j L_19066
  #inside else
  L_19068:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19083: 
  #storing literal to v0
  #reg name $s4
  li $v0, 5
  move $s4, $v0
  L_19084: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19082
  j L_19082
  #final label in binaryExp
  L_19082: 
  #jumpToAllOnlyIf
  L_19080:
  move $v0, $s2
  beqz $v0, L_19081
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_5_101
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19087: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19086: 
  #final label in statem expression
  L_19085: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19091: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19091
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19090: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19089: 
  #final label in statem expression
  L_19088: 
  j L_19079
  #inside else
  L_19081:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19096: 
  #storing literal to v0
  #reg name $s4
  li $v0, 6
  move $s4, $v0
  L_19097: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19095
  j L_19095
  #final label in binaryExp
  L_19095: 
  #jumpToAllOnlyIf
  L_19093:
  move $v0, $s2
  beqz $v0, L_19094
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_6_102
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19100: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19099: 
  #final label in statem expression
  L_19098: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19104: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19104
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19103: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19102: 
  #final label in statem expression
  L_19101: 
  j L_19092
  #inside else
  L_19094:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19109: 
  #storing literal to v0
  #reg name $s4
  li $v0, 7
  move $s4, $v0
  L_19110: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19108
  j L_19108
  #final label in binaryExp
  L_19108: 
  #jumpToAllOnlyIf
  L_19106:
  move $v0, $s2
  beqz $v0, L_19107
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_7_103
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19113: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19112: 
  #final label in statem expression
  L_19111: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19117: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19117
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19116: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19115: 
  #final label in statem expression
  L_19114: 
  j L_19105
  #inside else
  L_19107:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19122: 
  #storing literal to v0
  #reg name $s4
  li $v0, 8
  move $s4, $v0
  L_19123: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19121
  j L_19121
  #final label in binaryExp
  L_19121: 
  #jumpToAllOnlyIf
  L_19119:
  move $v0, $s2
  beqz $v0, L_19120
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_8_104
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19126: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19125: 
  #final label in statem expression
  L_19124: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19130: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19130
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19129: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19128: 
  #final label in statem expression
  L_19127: 
  j L_19118
  #inside else
  L_19120:
  #starting if
  #reg name $s2
  #storing identifier to v0
  #reg name $s3
  move $v0, $s1
  move $s3, $v0
  L_19134: 
  #storing literal to v0
  #reg name $s4
  li $v0, 9
  move $s4, $v0
  L_19135: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  seq $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19133
  j L_19133
  #final label in binaryExp
  L_19133: 
  #jumpToAllOnlyIf
  L_19132:
  move $v0, $s2
  beqz $v0, L_19131
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  #storing identifier to v0
  #reg name $s2
  lw $v0, A_9_9_105
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19138: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal printi_4
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19137: 
  #final label in statem expression
  L_19136: 
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19142: .byte   32,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19142
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19141: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19140: 
  #final label in statem expression
  L_19139: 
  #if finish label = 19131
  L_19131:
  #if finish label = 19118
  L_19118:
  #if finish label = 19105
  L_19105:
  #if finish label = 19092
  L_19092:
  #if finish label = 19079
  L_19079:
  #if finish label = 19066
  L_19066:
  #if finish label = 19053
  L_19053:
  #if finish label = 19040
  L_19040:
  #if finish label = 19027
  L_19027:
  #if finish label = 19014
  L_19014:
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s1
  move $s4, $v0
  L_19147: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_19148: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_19146
  j L_19146
  #final label in binaryExp
  L_19146: 
  #final label in codeGenAssignmentExpression
  L_19145: 
  move $v0, $s3
  move $s1, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_19144: 
  #final label in statem expression
  L_19143: 
  #whileBodyEndJump
  L_19009:
  j  L_19007
  #while finish label = 19006
  L_19006:
  #if finish label = 18998
  L_18998:
  #if finish label = 18846
  L_18846:
  #if finish label = 18694
  L_18694:
  #if finish label = 18542
  L_18542:
  #if finish label = 18390
  L_18390:
  #if finish label = 18238
  L_18238:
  #if finish label = 18086
  L_18086:
  #if finish label = 17934
  L_17934:
  #if finish label = 17782
  L_17782:
  #if finish label = 17630
  L_17630:
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #inside funcInvEvalArgs #0
  .data 
  STRING_19152: .byte   10,   0
  .align 2
  .text 
  #reg name $s2
  la $v0, STRING_19152
  move $s2, $v0
#regData in funcInv #0 = $s2
  #final label of #0 in funcInvEvalArgs
  L_19151: 
  move $v0, $s2
  sw $v0, -4($sp)
  subu $sp, $sp, 4
  #start preparing to load back arguments for function call
  lw $a0, 0($sp)
  jal prints_5
  #load back saved regs from stack
  addu $sp, $sp, 60
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s2
  move $s2, $v0
  #final label in funcInvStatement
  L_19150: 
  #final label in statem expression
  L_19149: 
  #inside codeGenAssignmentExpression
  #reg name $s2
  #reg name $s3
  #storing identifier to v0
  #reg name $s4
  move $v0, $s0
  move $s4, $v0
  L_19157: 
  #storing literal to v0
  #reg name $s5
  li $v0, 1
  move $s5, $v0
  L_19158: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  addu $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_19156
  j L_19156
  #final label in binaryExp
  L_19156: 
  #final label in codeGenAssignmentExpression
  L_19155: 
  move $v0, $s3
  move $s0, $v0
  move $s2, $v0
  #final label in assignmentStatement
  L_19154: 
  #final label in statem expression
  L_19153: 
  #whileBodyEndJump
  L_17625:
  j  L_17623
  #while finish label = 17622
  L_17622:
EPILOG_17607: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
.text
  #START PROLOG
morerandom_210: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  #in return
  #reg name $s0
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal INTERNALrandom_213
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s1
  move $s1, $v0
  #final label in funcInvStatement
  L_19164: 
  L_19162: 
  #storing literal to v0
  #reg name $s2
  li $v0, 57
  move $s2, $v0
  L_19163: 
  #setting left reg return val to $v0
  move $v0, $s1
  #setting right reg return val to $v1
  move $v1, $s2
  bnez $v1, L_19166
  .data
ARITH_ERROR_19165: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_19165
  j error
  L_19166:
  rem $v0, $v0, $v1
  move $s0, $v0
  bnez $v0, L_19161
  j L_19161
  #final label in binaryExp
  L_19161: 
  #final label in return
  L_19160: 
  move $v0, $s0
  j EPILOG_19159
  sw $a0, -4($sp)
  sw $a1, -8($sp)
  sw $a2, -12($sp)
  sw $a3, -16($sp)
  sw $t0, -20($sp)
  sw $t1, -24($sp)
  sw $t2, -28($sp)
  sw $t3, -32($sp)
  sw $t4, -36($sp)
  sw $t5, -40($sp)
  sw $t6, -44($sp)
  sw $t7, -48($sp)
  sw $t8, -52($sp)
  sw $t9, -56($sp)
  subu $sp, $sp, 56
  #pusing func inv args from reverse
  #start preparing to load back arguments for function call
  jal INTERNALrandom_213
  #load back saved regs from stack
  addu $sp, $sp, 56
  lw $a0, -4($sp)
  lw $a1, -8($sp)
  lw $a2, -12($sp)
  lw $a3, -16($sp)
  lw $t0, -20($sp)
  lw $t1, -24($sp)
  lw $t2, -28($sp)
  lw $t3, -32($sp)
  lw $t4, -36($sp)
  lw $t5, -40($sp)
  lw $t6, -44($sp)
  lw $t7, -48($sp)
  lw $t8, -52($sp)
  lw $t9, -56($sp)
  #END FUNC INV
  #reg name $s0
  move $s0, $v0
  #final label in funcInvStatement
  L_19168: 
  #final label in statem expression
  L_19167: 
  .data
FUNC_RET_ERROR_19169: .asciiz "function 'morerandom' must return a value\n"
.text

  la $a0, FUNC_RET_ERROR_19169
  j error
EPILOG_19159: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
.data
   INTERNALX_211: .word 0
.text
  #START PROLOG
INTERNALseed_212: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  #inside codeGenAssignmentExpression
  #reg name $s0
  #storing identifier to v0
  #reg name $s1
  move $v0, $a0
  move $s1, $v0
  #final label in codeGenAssignmentExpression
  L_19173: 
  move $v0, $s1
  sw $v0, INTERNALX_211
  move $s0, $v0
  #final label in assignmentStatement
  L_19172: 
  #final label in statem expression
  L_19171: 
EPILOG_19170: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
.text
  #START PROLOG
INTERNALrandom_213: 
  sw $fp, -4($sp)
  sw $ra, -8($sp)
  subu $fp, $sp, 4
  sw $s0, -12($sp)
  sw $s1, -16($sp)
  sw $s2, -20($sp)
  sw $s3, -24($sp)
  sw $s4, -28($sp)
  sw $s5, -32($sp)
  sw $s6, -36($sp)
  sw $s7, -40($sp)
  subu $sp, $sp, 40
  #END PROLOG
  #inside codeGenAssignmentExpression
  #reg name $s0
  #reg name $s1
  #reg name $s2
  #reg name $s3
  #storing literal to v0
  #reg name $s4
  li $v0, 17
  move $s4, $v0
  L_19185: 
  #storing identifier to v0
  #reg name $s5
  lw $v0, INTERNALX_211
  move $s5, $v0
  L_19186: 
  #setting left reg return val to $v0
  move $v0, $s4
  #setting right reg return val to $v1
  move $v1, $s5
  mul $v0, $v0, $v1
  move $s3, $v0
  bnez $v0, L_19184
  j L_19184
  #final label in binaryExp
  L_19184: 
  L_19182: 
  #storing literal to v0
  #reg name $s4
  li $v0, 13
  move $s4, $v0
  L_19183: 
  #setting left reg return val to $v0
  move $v0, $s3
  #setting right reg return val to $v1
  move $v1, $s4
  addu $v0, $v0, $v1
  move $s2, $v0
  bnez $v0, L_19181
  j L_19181
  #final label in binaryExp
  L_19181: 
  L_19179: 
  #storing literal to v0
  #reg name $s3
  li $v0, 32768
  move $s3, $v0
  L_19180: 
  #setting left reg return val to $v0
  move $v0, $s2
  #setting right reg return val to $v1
  move $v1, $s3
  bnez $v1, L_19188
  .data
ARITH_ERROR_19187: .asciiz "remainder by zero\n"
  .text
  la $a0, ARITH_ERROR_19187
  j error
  L_19188:
  rem $v0, $v0, $v1
  move $s1, $v0
  bnez $v0, L_19178
  j L_19178
  #final label in binaryExp
  L_19178: 
  #final label in codeGenAssignmentExpression
  L_19177: 
  move $v0, $s1
  sw $v0, INTERNALX_211
  move $s0, $v0
  #final label in assignmentStatement
  L_19176: 
  #final label in statem expression
  L_19175: 
  #in return
  #storing identifier to v0
  #reg name $s0
  lw $v0, INTERNALX_211
  move $s0, $v0
  #final label in return
  L_19189: 
  move $v0, $s0
  j EPILOG_19174
  .data
FUNC_RET_ERROR_19190: .asciiz "function 'INTERNALrandom' must return a value\n"
.text

  la $a0, FUNC_RET_ERROR_19190
  j error
EPILOG_19174: 
  #START EPILOG
  addu $sp, $fp, 4
  lw $fp, -4($sp)
  lw $ra, -8($sp)
  lw $s0, -12($sp)
  lw $s1, -16($sp)
  lw $s2, -20($sp)
  lw $s3, -24($sp)
  lw $s4, -28($sp)
  lw $s5, -32($sp)
  lw $s6, -36($sp)
  lw $s7, -40($sp)
  jr $ra
  #END EPILOG
